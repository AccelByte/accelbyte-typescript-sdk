{
  "host": "demo.accelbyte.io",
  "info": {
    "contact": {
      "email": "engineering@accelbyte.io",
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io"
    },
    "description": "Justice BuildInfo Service",
    "title": "justice-buildinfo-service",
    "version": "3.28.16"
  },
  "schemes": ["https"],
  "tags": [
    {
      "name": "Caching"
    },
    {
      "name": "DLC"
    },
    {
      "name": "DRM"
    },
    {
      "name": "Downloader"
    },
    {
      "name": "GDPR"
    },
    {
      "name": "Multipart Uploader"
    },
    {
      "name": "Release Note"
    },
    {
      "name": "Uploader V1"
    },
    {
      "name": "Uploader V2"
    },
    {
      "name": "Uploader V3"
    },
    {
      "name": "Utility"
    }
  ],
  "externalDocs": {
    "description": "API Docs",
    "url": "https://development.accelbyte.io/buildinfo"
  },
  "securityDefinitions": {
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/buildinfo/admin/namespaces/{namespace}/blocks/multipart": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to \u0026lt;b\u0026gt;start multipart file upload\u0026lt;/b\u0026gt;. The service will returns the list of presigned urls that will be used to upload the Parts.\u0026lt;br/\u0026gt;Make sure to upload the Parts in-order based on the presigned urls order.The size of each Part should above or equals to 5MB, except the last one.",
        "operationId": "startMultipartFileUpload",
        "parameters": [
          {
            "description": "File Info",
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartMultipartUploadRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultipartUploadSummary"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Multipart File Upload",
        "tags": ["Multipart Uploader"],
        "x-errorCodes": {
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/blocks/multipart/{hash}": {
      "delete": {
        "description": "This API is used to \u0026lt;b\u0026gt;abort multipart file upload\u0026lt;/b\u0026gt;. The aborted multipart file upload cannot be continued again.",
        "operationId": "abortMultipartFileUpload",
        "parameters": [
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12941\u003c/td\u003e\u003ctd\u003eMultipart uploadId for hash [{}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Abort Multipart File Upload",
        "tags": ["Multipart Uploader"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete",
          "12941": "Multipart uploadId for hash [{}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [DELETE]"
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to \u0026lt;b\u0026gt;commit multipart file upload\u0026lt;/b\u0026gt; to signal the upload completion.\u0026lt;br/\u0026gt;The request should contains list of PartNumber along with its ETag value. The list should be in-order.",
        "operationId": "commitMultipartFileUpload",
        "parameters": [
          {
            "description": "Parts",
            "in": "body",
            "name": "parts",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommitMultipartUploadRequest"
            }
          },
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12921\u003c/td\u003e\u003ctd\u003eInvalid multipart upload parameters: [{}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12941\u003c/td\u003e\u003ctd\u003eMultipart uploadId for hash [{}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Multipart File Upload",
        "tags": ["Multipart Uploader"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete",
          "12921": "Invalid multipart upload parameters: [{}]",
          "12941": "Multipart uploadId for hash [{}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/builddeletion/{buildId}/cancel": {
      "delete": {
        "description": "This API is used to cancel build deletion.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:BUILDINFO\u0026#34;, action=8 (DELETE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "cancelBuildDeletion",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "Cancel successfully"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12138\u003c/td\u003e\u003ctd\u003eBuild Deletion Invalid [{build}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Cancel Build Deletion",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12138": "Build Deletion Invalid [{build}]",
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [DELETE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/builddeletion/{buildId}/retry": {
      "put": {
        "description": "This API is used to retry build deletion.",
        "operationId": "retryBuildDeletion",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12138\u003c/td\u003e\u003ctd\u003eBuild Deletion Invalid [{build}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retry Failed Build Deletion",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12138": "Build Deletion Invalid [{build}]",
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/builds/byAppId": {
      "get": {
        "description": "This API is used to get basic build manifests. Only committed build will be retrieved.",
        "operationId": "getBuildByAppId",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Application Id",
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BuildIdVersion"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get committed builds by appId",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/builds/byNamespace": {
      "get": {
        "description": "This API is used to get basic build manifests. Only committed build will be retrieved.",
        "operationId": "getBuildByNamespace",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BasicBuildManifest"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get committed builds by namespace",
        "tags": ["Uploader V1"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/builds/{buildId}": {
      "delete": {
        "deprecated": true,
        "description": "This API is used to delete build manifest.",
        "operationId": "deleteBuildManifest",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete Build",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [DELETE]"
        }
      },
      "get": {
        "description": "This API is used to get build manifest.",
        "operationId": "getBuild",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Build Manifest",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/builds/{buildId}/blocks/urls": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to Generate Download URLs for the requested blocks inside the specified buildId.\u0026lt;br/\u0026gt;The download URL generation may returns Signed URL or Public URL, depends on service configurations.",
        "operationId": "adminGenerateBlocksDownloadUrls",
        "parameters": [
          {
            "description": "Build ID of the blocks",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrlsRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrls"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12149\u003c/td\u003e\u003ctd\u003eFile with uuid [{uuid}] not found in sourceBuildId [{buildId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003eValidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate Block Download URLs",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12149": "File with uuid [{uuid}] not found in sourceBuildId [{buildId}]",
          "20002": "Validation error"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/buildsdeletion/byAppId": {
      "get": {
        "description": "This API is used to get build deletion. Only deleted build will be retrieved.",
        "operationId": "getBuildDeletionByAppId",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Application Id",
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Deletion Status",
            "format": "int32",
            "in": "query",
            "name": "deletionStatus",
            "required": false,
            "type": "integer",
            "x-example": "0 - Requested, 1 - In Progress, 2 - Deleted, 3 - Failed "
          },
          {
            "description": "Platform ID",
            "in": "query",
            "name": "platformId",
            "required": false,
            "type": "string",
            "x-example": "win32 win64 windows linux-amd64 darwin"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BuildDeletionData"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get builds deletion by appId",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/cleanerConfigurations": {
      "get": {
        "description": "This API is used to retrieve grace period of buildinfo cleaner.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Buildinfo Grace Period Time\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getBuildInfoCleanerConfiguration",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CleanerConfigObject"
            }
          }
        },
        "summary": "Get Buildinfo Cleaner Configurations",
        "tags": ["Utility"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/commitbuildmanifest": {
      "post": {
        "consumes": ["application/json"],
        "deprecated": true,
        "description": "This API is used to commit build manifest.",
        "operationId": "commitBuildManifest",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12121\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] is invalid! Blocks can't be empty\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12122\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] can't be null\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003eValidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Build Manifest",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12121": "Build [{buildId}] is invalid! Blocks can't be empty",
          "12122": "Build [{buildId}] can't be null",
          "12123": "Platform id [{platformId}] is invalid",
          "12141": "Build not found",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed",
          "20002": "Validation error"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/commitchunkupload/{hash}/{uuid}/{offset}": {
      "post": {
        "deprecated": true,
        "description": "This API is used to commit chunk that has been uploaded.",
        "operationId": "commitChunkUpload",
        "parameters": [
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset",
            "format": "int64",
            "in": "path",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "UUID",
            "in": "path",
            "name": "uuid",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "\u003cs\u003eCommit Chunk Upload\u003c/s\u003e",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/commitchunkupload/{hash}/{uuid}/{offset}/{blockSize}": {
      "post": {
        "deprecated": true,
        "description": "This API is used to commit chunk that has been uploaded.",
        "operationId": "commitChunkUploadWithSize",
        "parameters": [
          {
            "description": "Block Size",
            "format": "int64",
            "in": "path",
            "name": "blockSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset",
            "format": "int64",
            "in": "path",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "description": "UUID",
            "in": "path",
            "name": "uuid",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Chunk Upload",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/configurations": {
      "get": {
        "description": "This API is used to get the BuildInfo configurations.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;b\u0026gt;1. Entitlement Validation\u0026lt;/b\u0026gt;\u0026lt;br/\u0026gt;Entitlement Validation is utilized in download and update game/application flow.\u0026lt;br/\u0026gt;It will check whether the user is entitled for the game/application or not through Justice Entitlement Service.\u0026lt;br/\u0026gt;If user is entitled, it will process the request, otherwise the request will rejected.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Configuration Info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getConfiguration",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Configurations",
        "tags": ["Utility"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO:CONFIG [READ]"
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to update the BuildInfo configurations.\u0026lt;br/\u0026gt;This API support update configuration based on given data. Single request can update single field or multi fields.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;b\u0026gt;1. Entitlement Validation\u0026lt;/b\u0026gt;\u0026lt;br/\u0026gt;Entitlement Validation is utilized in download and update game/application flow.\u0026lt;br/\u0026gt;It will check whether the user is entitled for the game/application or not through Justice Entitlement Service.\u0026lt;br/\u0026gt;If user is entitled, it will process the request, otherwise the request will rejected.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Configuration Info\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateConfiguration",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationUpdate"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update Configurations",
        "tags": ["Utility"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO:CONFIG [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/diff/cache": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to save detailed diff cache. Only used by differ. Not to be used directly.",
        "operationId": "createCache",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateDiffCacheRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Save Diff Cache",
        "tags": ["Caching"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:DIFFCACHE [CREATE]"
        }
      },
      "put": {
        "consumes": ["application/json"],
        "description": "This API is used to mark that the diff caching is complete and diff summary file uploaded to s3. Only used by differ. Not to be used directly.",
        "operationId": "commitCache",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommitDiffCacheRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Diff Cache Completion",
        "tags": ["Caching"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:DIFFCACHE [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/diff/calculate": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to dispatch diff caching request.",
        "operationId": "cachingRequest",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CalculateDiffCacheRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "202": {
            "description": "Successful operation"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12180\u003c/td\u003e\u003ctd\u003eDiff cache result already exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Dispatch Diff Caching Request",
        "tags": ["Caching"],
        "x-errorCodes": {
          "12180": "Diff cache result already exist"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:DIFFCACHE [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/diff/calculate/bulk": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to bulk dispatch diff caching requests to differ instance.\u0026lt;br/\u0026gt;The processing order will follow the order of the array.\u0026lt;br/\u0026gt;The \u0026lt;b\u0026gt;priority\u0026lt;/b\u0026gt; flag means that request will be set as priority inside the queue and always served first even if there’s existing non-priority request(s) beforehand.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;Request is skipped if the source and destination versions is same\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Request is skipped if the source version is not found\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Request is skipped if the destination version is not found\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "bulkCachingRequests",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkCalculateDiffCacheRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "202": {
            "description": "Request accepted"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Bulk Dispatch Diff Caching Requests",
        "tags": ["Caching"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:DIFFCACHE [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/diff/send": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to send diff request to MQ.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: diff status\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "sendDiffRequestMessage",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Trigger diff request message",
        "tags": ["Uploader V3"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/dlc/link": {
      "put": {
        "consumes": ["application/json"],
        "description": "This API is used to link DLC version(s) against the game version.\u0026lt;p\u0026gt;",
        "operationId": "linkDependencies",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateDependencyLinkRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Link DLC",
        "tags": ["DLC"],
        "x-errorCodes": {
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/dlc/{buildId}/link": {
      "get": {
        "description": "This API is used to retrieve DLC versions against the game version.",
        "operationId": "retrieveDependencies",
        "parameters": [
          {
            "description": "Build Id",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDependencyLinkResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12157\u003c/td\u003e\u003ctd\u003eDependency link not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve DLC Link",
        "tags": ["DLC"],
        "x-errorCodes": {
          "12157": "Dependency link not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/gdpr/remove": {
      "delete": {
        "description": "This API is used to remove all stored data that relates to supplied machineId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of data related to machineId\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "gdprRemovePii",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildInfoPII"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12146\u003c/td\u003e\u003ctd\u003eRecord with userId [{userId}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "GDPR Compliant - Delete",
        "tags": ["GDPR"],
        "x-errorCodes": {
          "12146": "Record with userId [{userId}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [DELETE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/gdpr/retrieve": {
      "get": {
        "description": "This API is used to get all stored data that relates to supplied machineId.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of data related to machineId\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "gdprRetrievePii",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User Id",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildInfoPII"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12146\u003c/td\u003e\u003ctd\u003eRecord with userId [{userId}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "GDPR Compliant - Retrieve",
        "tags": ["GDPR"],
        "x-errorCodes": {
          "12146": "Record with userId [{userId}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/listenDiffStatus": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to listen diff status.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: diff status\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listenDiffStatus",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FileDiffingStatus"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12151\u003c/td\u003e\u003ctd\u003eMessage queue not found for source build [{sourceBuildId}] to [{destinationBuildId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Listen diff status",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12151": "Message queue not found for source build [{sourceBuildId}] to [{destinationBuildId}]"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/listenPatchStatus": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to listen patch status from source file and missing bytes file to destination file.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: diff status\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "listenPatchStatus",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FileDiffingStatus"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12151\u003c/td\u003e\u003ctd\u003eMessage queue not found for source build [{sourceBuildId}] to [{destinationBuildId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Listen patch status",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12151": "Message queue not found for source build [{sourceBuildId}] to [{destinationBuildId}]"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/patch/send": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to send patch request to MQ.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: diff status\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "sendPatchRequestMessage",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Trigger patch request message",
        "tags": ["Uploader V3"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/ping/differ": {
      "get": {
        "description": "This API is used to manually checks the readiness of differ.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: ping result\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "pingDiffer",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PingResultResponse"
            }
          }
        },
        "summary": "Ping Differ",
        "tags": ["Utility"],
        "x-errorCodes": {}
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/releasenote/manifest/get/{appId}/{platformId}": {
      "get": {
        "consumes": ["application/json"],
        "description": "This API is used to get release note manifest.",
        "operationId": "getReleaseNote",
        "parameters": [
          {
            "description": "App Id",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform Id",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseNoteDTO"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12154\u003c/td\u003e\u003ctd\u003eRelease note not found for namespace [{namespace}], appId [{appId}], platformId [{platformId}], version [{version}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get release note manifest",
        "tags": ["Release Note"],
        "x-errorCodes": {
          "12154": "Release note not found for namespace [{namespace}], appId [{appId}], platformId [{platformId}], version [{version}]"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/releasenote/manifest/save/{uploadMode}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to save release note manifest.\u0026lt;p\u0026gt;It will update the existing release note manifest if exist (based on namespace, appId, platformId and version).\u0026lt;br/\u0026gt;Otherwise, it will create a new release note manifest.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;b\u0026gt;Upload Mode for existing release note manifest:\u0026lt;/b\u0026gt;\u0026lt;br/\u0026gt;0 = update, will merge the old localizations with the new localizations.\u0026lt;br/\u0026gt;1 = replace, will replace the old localizations with the new localizations.",
        "operationId": "saveReleaseNote",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Upload Mode (0: update, 1: replace)",
            "in": "path",
            "name": "uploadMode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReleaseNoteManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12176\u003c/td\u003e\u003ctd\u003eUpload [{type}] with hash [{hash}] hasn't yet committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003eValidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Save release note manifest",
        "tags": ["Release Note"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12176": "Upload [{type}] with hash [{hash}] hasn't yet committed",
          "20002": "Validation error"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/releasenote/upload/commit/{hash}": {
      "patch": {
        "description": "This API is used to commit release note file that has been uploaded to signal completion.",
        "operationId": "commitReleaseNoteUpload",
        "parameters": [
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Release Note Upload",
        "tags": ["Release Note"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/releasenote/upload/start/{uploaderId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start release note upload and get the presigned URL.",
        "operationId": "startReleaseNoteUpload",
        "parameters": [
          {
            "description": "File Info",
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uploader Id",
            "in": "path",
            "name": "uploaderId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Release Note Upload",
        "tags": ["Release Note"],
        "x-errorCodes": {
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/retrievechunkbyhash/{hash}": {
      "get": {
        "description": "This API is used to retrieve chunk by hash.",
        "operationId": "retrieveChunkByHash",
        "parameters": [
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockData"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve Chunk by Hash",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/setcurrentbuild/{appId}/{version}": {
      "put": {
        "deprecated": true,
        "description": "This API is used to set current build as release version.",
        "operationId": "setCurrentBuild",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12172\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] is not committed yet\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Set Current Build",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12141": "Build not found",
          "12172": "Build [{buildId}] is not committed yet"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/setcurrentbuild/{buildId}": {
      "put": {
        "description": "This API is used to set current build as release version.",
        "operationId": "setCurrentBuildByBuildId",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "Is send latest game notification",
            "in": "query",
            "name": "sendNotification",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12172\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] is not committed yet\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Set Current Build",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12141": "Build not found",
          "12172": "Build [{buildId}] is not committed yet"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/startbuildupload/{appId}/{version}": {
      "post": {
        "deprecated": true,
        "description": "This API is used to start build upload.",
        "operationId": "startBuildUpload",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildIdManifest"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Build Upload",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/startchunkupload": {
      "post": {
        "consumes": ["application/json"],
        "deprecated": true,
        "description": "This API is used to start chunk upload and retrieve upload url.",
        "operationId": "startChunkUpload",
        "parameters": [
          {
            "description": "Chunk Info",
            "in": "body",
            "name": "chunkInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12174\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already started\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Chunk Upload",
        "tags": ["Uploader V1"],
        "x-errorCodes": {
          "12173": "Upload with hash [{hash}] already complete",
          "12174": "Upload with hash [{hash}] already started"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/builds/byAppId": {
      "get": {
        "description": "This API is used to get basic build manifests. Only committed build will be retrieved.",
        "operationId": "getBuildByAppId_1",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Application ID",
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "query",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BuildIdVersion"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get committed builds by appId (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/builds/{buildId}": {
      "delete": {
        "description": "This API is used to delete build manifest.",
        "operationId": "deleteBuildManifest_1",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12137\u003c/td\u003e\u003ctd\u003eThe Latest Build cannot be deleted [{}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete Build v2",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12137": "The Latest Build cannot be deleted [{}]",
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [DELETE]"
        }
      },
      "get": {
        "description": "This API is used to get build manifest for build uploaded with BuildInfo v2.",
        "operationId": "getBuild_1",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Build Manifest v2",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      },
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to edit build\u0026#39;s launchArgument.",
        "operationId": "updateBuildMetadata",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateBuildMetadataRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Edit Launch Arguments",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/commitbuildmanifest": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to commit build manifest.",
        "operationId": "commitBuildManifest_1",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12127\u003c/td\u003e\u003ctd\u003eInvalid endpoint, attempt to hit this endpoint with v1 behaviour\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12128\u003c/td\u003e\u003ctd\u003eZsync file from file with UUID [{uuid}] shouldn't empty\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12129\u003c/td\u003e\u003ctd\u003eFile [{filename}] with hash [{hash}] can't have empty uuid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Build Manifest (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12127": "Invalid endpoint, attempt to hit this endpoint with v1 behaviour",
          "12128": "Zsync file from file with UUID [{uuid}] shouldn't empty",
          "12129": "File [{filename}] with hash [{hash}] can't have empty uuid",
          "12141": "Build not found",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/commitdlcbuildmanifest": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to commit build manifest.",
        "operationId": "commitDLCBuildManifest",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12127\u003c/td\u003e\u003ctd\u003eInvalid endpoint, attempt to hit this endpoint with v1 behaviour\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12128\u003c/td\u003e\u003ctd\u003eZsync file from file with UUID [{uuid}] shouldn't empty\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12129\u003c/td\u003e\u003ctd\u003eFile [{filename}] with hash [{hash}] can't have empty uuid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12155\u003c/td\u003e\u003ctd\u003eAssociated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit DLC Build Manifest (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12127": "Invalid endpoint, attempt to hit this endpoint with v1 behaviour",
          "12128": "Zsync file from file with UUID [{uuid}] shouldn't empty",
          "12129": "File [{filename}] with hash [{hash}] can't have empty uuid",
          "12141": "Build not found",
          "12155": "Associated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/commitfileupload/{buildId}/{hash}": {
      "patch": {
        "description": "This API is used to commit file that has been uploaded to signal completion.",
        "operationId": "commitFileUpload",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit File Upload (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/commitzsyncfileupload/{buildId}/{hash}": {
      "patch": {
        "description": "This API is used to commit file that has been uploaded to signal completion",
        "operationId": "commitZsyncFileUpload",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit ZsyncFile Upload (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/commitzsyncfileupload/{buildId}/{hash}/{blockSize}": {
      "patch": {
        "description": "This API is used to commit chunk that has been uploaded.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v2/startzsyncfileupload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v2/startfileupload/{uploaderId}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "commitZsyncFileUploadWithSize",
        "parameters": [
          {
            "description": "Block Size",
            "format": "int64",
            "in": "path",
            "name": "blockSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Zsync File Upload v2",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/diff/commit/{sourceBuildId}/{destinationBuildId}": {
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to commit diff manifest.",
        "operationId": "commitDiffManifest",
        "parameters": [
          {
            "description": "DestinationBuildId",
            "in": "path",
            "name": "destinationBuildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "SourceBuildId",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12148\u003c/td\u003e\u003ctd\u003eDiff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12177\u003c/td\u003e\u003ctd\u003eDiff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Diff Manifest",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12148": "Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]",
          "12177": "Diff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/diff/signedurl/{sourceBuildId}/{destinationBuildId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "Use this API to get the presigned url to upload the diff manifest.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Required permission\u0026lt;/i\u0026gt;: resource=\u0026#34;ADMIN:NAMESPACE:{namespace}:BUILDINFO\u0026#34;, action=1 (CREATE)\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build id\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "requestPresignedUrlDiffUpload",
        "parameters": [
          {
            "description": "DestinationBuildId",
            "in": "path",
            "name": "destinationBuildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "SourceBuildId",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12148\u003c/td\u003e\u003ctd\u003eDiff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12177\u003c/td\u003e\u003ctd\u003eDiff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Request Presigned Url for Diff Manifest Upload",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12148": "Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]",
          "12177": "Diff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/diff/start/{sourceBuildId}/{destinationBuildId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start diff manifest upload.",
        "operationId": "startDiffUpload",
        "parameters": [
          {
            "description": "DestinationBuildId",
            "in": "path",
            "name": "destinationBuildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "SourceBuildId",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12177\u003c/td\u003e\u003ctd\u003eDiff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Diff Upload",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12177": "Diff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/difftrigger/status": {
      "get": {
        "consumes": ["application/json"],
        "description": "This API is used to get diff trigger status.",
        "operationId": "getDiffTriggerStatus",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean",
              "x-omitempty": false
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Diff Trigger Status",
        "tags": ["Uploader V2"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/difftrigger/status/{value}": {
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to toggle diff trigger status. Use 0 to turn off and 1 to turn on. Any values other than 0 will be regarded as 1.",
        "operationId": "toggleDiffTriggerStatus",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Value",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Toggle Diff Trigger Status",
        "tags": ["Uploader V2"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/dlc/byGameAppId": {
      "get": {
        "description": "This API is used to get basic DLC build manifests. Only committed build will be retrieved.",
        "operationId": "getDLCBuildByAppId",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Application ID",
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "query",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BuildIdVersion"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get committed DLC build by appId (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/setcurrentbuild/{appId}/{version}/{platformId}": {
      "put": {
        "description": "This API is used to set current build as release version.",
        "operationId": "setCurrentBuild_1",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12172\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] is not committed yet\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Set Current Build (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12141": "Build not found",
          "12172": "Build [{buildId}] is not committed yet"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/startbuildupload": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start build upload.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v2/startfileupload/{uploaderId}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "startBuildUpload_1",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Build Upload v2",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/startbuildupload/{sourceBuildId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start incremental build upload. This endpoint used for incremental build upload, where developer update the files from existing build version (that hasn\u0026#39;t yet set as latest).",
        "operationId": "startBuildUpload_2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source Build ID",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12130\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] buildinfo version is not V2\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12147\u003c/td\u003e\u003ctd\u003eSource build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Build Upload v2",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12130": "Build [{buildId}] buildinfo version is not V2",
          "12147": "Source build not found",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/startdlcbuildupload": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start DLC build upload.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v2/startfileupload/{uploaderId} for normal (non-differential) upload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/prezsyncupload for differential upload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "startDLCBuildUpload",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12155\u003c/td\u003e\u003ctd\u003eAssociated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start DLC Build Upload",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12155": "Associated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/startdlcbuildupload/{sourceBuildId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start DLC build upload. This endpoint used for incremental build upload, where developer update the files from existing build version (that hasn\u0026#39;t yet set as latest).",
        "operationId": "startDLCBuildUpload_1",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source Build ID",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12130\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] buildinfo version is not V2\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12155\u003c/td\u003e\u003ctd\u003eAssociated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start DLC Build Upload",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12130": "Build [{buildId}] buildinfo version is not V2",
          "12155": "Associated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/startfileupload/{uploaderId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start file upload and retrieve upload url.",
        "operationId": "startFileUpload",
        "parameters": [
          {
            "description": "File Info",
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "The build id of this file",
            "in": "path",
            "name": "uploaderId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start File Upload (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v2/startzsyncfileupload/{fileHash}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start zsync control file upload and retrieve upload url.",
        "operationId": "startZsyncFileUpload",
        "parameters": [
          {
            "description": "Zsync File Info",
            "in": "body",
            "name": "zsyncFileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          },
          {
            "description": "File Hash",
            "in": "path",
            "name": "fileHash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12176\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] hasn't yet committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start ZsyncFile Upload (v2)",
        "tags": ["Uploader V2"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete",
          "12176": "Upload with hash [{hash}] hasn't yet committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/commitbuildmanifest/{sourceBuildId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to commit build manifest.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/listenPatchStatus in case needs to patch file\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/commitzsyncfileupload/{buildId}/{hash} in case of normal non-differential upload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize} to also specify the blocksize in case of normal non-differential upload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "commitBuildManifest_2",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source Build ID",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12121\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] is invalid! Blocks can't be empty\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12127\u003c/td\u003e\u003ctd\u003eInvalid endpoint, attempt to hit this endpoint with v1 behaviour\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12128\u003c/td\u003e\u003ctd\u003eZsync file from file with UUID [{uuid}] shouldn't empty!\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12129\u003c/td\u003e\u003ctd\u003eFile [{filename}] with hash [{hash}] can't have empty uuid\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12172\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] is not committed yet\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Build Manifest (v3)",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12121": "Build [{buildId}] is invalid! Blocks can't be empty",
          "12127": "Invalid endpoint, attempt to hit this endpoint with v1 behaviour",
          "12128": "Zsync file from file with UUID [{uuid}] shouldn't empty!",
          "12129": "File [{filename}] with hash [{hash}] can't have empty uuid",
          "12141": "Build not found",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed",
          "12172": "Build [{buildId}] is not committed yet"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/commitfileupload/{buildId}/{hash}": {
      "patch": {
        "description": "This API is used to commit file that has been uploaded to signal completion.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startfileupload/{uploaderId}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startzsyncfileupload/{fileHash} for non-differential (normal) upload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/prezsyncupload for differential upload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "commitFileUpload_1",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit File Upload v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/commitmissingbytesfileupload/{hash}": {
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to commit missing bytes file that has been uploaded to S3.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startzsyncfileupload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startfileupload/{uploaderId}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: chunk data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "commitMissingBytesFileUploadWithSize",
        "parameters": [
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12149\u003c/td\u003e\u003ctd\u003eFile with checksum [{fileChecksum}] not found in sourceBuildId [{sourceBuildId}]\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12152\u003c/td\u003e\u003ctd\u003eDiff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Missing Bytes File Upload (v3)",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12149": "File with checksum [{fileChecksum}] not found in sourceBuildId [{sourceBuildId}]",
          "12152": "Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/commitzsyncfileupload/{buildId}/{hash}": {
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to commit file that has been uploaded to signal completion.\u0026lt;p\u0026gt;Mandatory fields for body: sourceBuildId, destinationBuildId, destinationFilePath, destinationFileChecksum, destinationControlFileUuid, destinationControlFileChecksumPrevious API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startzsyncfileupload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startfileupload/{uploaderId} for normal (non-differential) upload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/listendiffstatus for differential upload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "commitZsyncFileUpload_1",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Hash of the zsync file",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit ZsyncFile Upload v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize}": {
      "patch": {
        "consumes": ["application/json"],
        "description": "This API is used to commit chunk that has been uploaded. By commiting the file, it means flag the file as already uploaded.\u0026lt;p\u0026gt;Mandatory fields for body: sourceBuildId, destinationBuildId, destinationFilePath, destinationFileChecksum, destinationControlFileUuid, destinationControlFileChecksumPrevious API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startzsyncfileupload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startfileupload/{uploaderId}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "commitZsyncFileUploadWithSize_1",
        "parameters": [
          {
            "description": "Block Size",
            "format": "int64",
            "in": "path",
            "name": "blockSize",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Zsync File Upload v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/current/{appId}/{platformId}": {
      "get": {
        "description": "This API is used to the current build from particular appId. This is a utility API used by BuildUtil to determine whether there\u0026#39;s an older build set as current. If it does, the BuildUtil will proceed the upload as differential upload.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Diff File Status Manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getMostCurrentBuild",
        "parameters": [
          {
            "description": "appId",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12153\u003c/td\u003e\u003ctd\u003eLatest build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get most current build",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12153": "Latest build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/diff/status/{sourceBuildId}/{destinationBuildId}/{destinationFilePath}": {
      "get": {
        "description": "This API is used to get diff status manifests.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Diff File Status Manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getDiffStatusOfFile",
        "parameters": [
          {
            "description": "Destination Build ID",
            "in": "path",
            "name": "destinationBuildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Destination File Path",
            "in": "path",
            "name": "destinationFilePath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source Build IDd",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FileDiffingStatus"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12152\u003c/td\u003e\u003ctd\u003eDiff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get diff status manifest",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12152": "Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/prezsyncupload": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to check the diff status (not yet diff\u0026#39;ed, diff\u0026#39;ed, patched) of a file before upload its control file.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startbuildupload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/startbuildupload/{sourceBuildId}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startzsyncfileupload/{fileHash}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: upload data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "preZsyncUpload",
        "parameters": [
          {
            "description": "Pre Check",
            "in": "body",
            "name": "preCheck",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreCheckUploadRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DifferentialUploadSummary"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12152\u003c/td\u003e\u003ctd\u003eDiff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Pre check differential upload",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12152": "Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/setcurrentbuild/{appId}/{version}/{platformId}": {
      "put": {
        "description": "This API is used to set current build as release version. Every build set as current will be recorded in version history as chain of history.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;//TODO previous api\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "setCurrentBuild_2",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12172\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] is not committed yet\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Set Current Build v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12123": "Platform id [{platformId}] is invalid",
          "12141": "Build not found",
          "12172": "Build [{buildId}] is not committed yet"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/startbuildupload": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start build upload for v3 upload (Differential Upload). This endpoint is the startpoint of upload.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/prezsyncupload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build id\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "startBuildUpload_3",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DifferentialBuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12130\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] buildinfo version is not V2\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Build Upload v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12130": "Build [{buildId}] buildinfo version is not V2",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/startbuildupload/{sourceBuildId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start build upload. This endpoint used for incremental build upload, where the developer update the files from existing build version (that hasn\u0026#39;t yet set as latest).\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;none\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/prezsyncupload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build id\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "startBuildUpload_4",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source Build ID",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DifferentialBuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12130\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] buildinfo version is not V2\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12147\u003c/td\u003e\u003ctd\u003eSource build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12171\u003c/td\u003e\u003ctd\u003eBuild [{buildId}] with appId [{appId}] and version [{version}] already committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Build Upload v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12130": "Build [{buildId}] buildinfo version is not V2",
          "12147": "Source build not found",
          "12171": "Build [{buildId}] with appId [{appId}] and version [{version}] already committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/startfileupload/{uploaderId}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start file upload, which in turn will response with presigned URL for upload target.\u0026lt;p\u0026gt;Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/startbuildupload in the case of normal (non-differential) upload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/startbuildupload/{sourceBuildId} in the case of normal (non-differential) incremental upload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/commitzsyncfileupload/{buildId}/{hash} in the case of differential upload\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize} to also specify the blocksize in the case of differential upload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/commitfileupload//{buildId}/{hash}\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "startFileUpload_1",
        "parameters": [
          {
            "description": "File Info",
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "The BuildUtil uploader Id. For testing purpose, use random but consistent id",
            "in": "path",
            "name": "uploaderId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start File Upload v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12173": "Upload with hash [{hash}] already complete"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/startzsyncfileupload/{fileHash}": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to start zsync control file upload, which in turn will respond with presigned url for the upload target.\u0026lt;p\u0026gt;Mandatory fields for body: sourceBuildId, destinationBuildId, destinationFilePath, destinationFileChecksum, binaryUpload{contentMd5, contentLength, hash}Previous API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/prezsyncupload\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Next API:\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;/v3/commitzsyncfileupload/{buildId}/{hash}\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize} to also specify the blocksize\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: upload data\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "startZsyncFileUpload_1",
        "parameters": [
          {
            "description": "Zsync Diff Request",
            "in": "body",
            "name": "zsyncDiffRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZsyncDiffRequest"
            }
          },
          {
            "description": "Hash of the original file (not the zsync file)",
            "in": "path",
            "name": "fileHash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12176\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] hasn't yet committed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start ZsyncFile Upload v3",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12173": "Upload with hash [{hash}] already complete",
          "12176": "Upload with hash [{hash}] hasn't yet committed"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/v3/uploadmode/{appId}/{platformId}": {
      "get": {
        "description": "This API is used to see whether BuildUtil should upload in differential mode or normal mode.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Diff File Status Manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "determineUploadMode",
        "parameters": [
          {
            "description": "appId",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadModeCheck"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12153\u003c/td\u003e\u003ctd\u003eLatest build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get differential upload activation status",
        "tags": ["Uploader V3"],
        "x-errorCodes": {
          "12153": "Latest build not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/admin/namespaces/{namespace}/validateSDKConfig": {
      "get": {
        "description": "This API is used to validate clientId and redirectUri from SDK Config.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Basic Build Manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getBuildByNamespace_1",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "ClientId",
            "in": "query",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "RedirectUri",
            "in": "query",
            "name": "redirectUri",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ClientPayload"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12131\u003c/td\u003e\u003ctd\u003eSDK Config with clientId [{clientId}] and redirectUri [{redirectUri}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12134\u003c/td\u003e\u003ctd\u003eMismatch redirect uri [{redirectUri}]. Check your client's redirect uri\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12156\u003c/td\u003e\u003ctd\u003eClient with clientId [{clientId}] can't be found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Check validity of clientId and redirectUri from SDK Config",
        "tags": ["Utility"],
        "x-errorCodes": {
          "12131": "SDK Config with clientId [{clientId}] and redirectUri [{redirectUri}] is invalid",
          "12134": "Mismatch redirect uri [{redirectUri}]. Check your client's redirect uri",
          "12156": "Client with clientId [{clientId}] can't be found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/apps/latest/byDLCAppId/{dlcAppId}": {
      "get": {
        "description": "Retrieve the list of DLC available on specific game. Use DLC\u0026#39;s appId to query.",
        "operationId": "latestBaseGameByDLC",
        "parameters": [
          {
            "description": "DLC AppId",
            "in": "path",
            "name": "dlcAppId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveBaseGameResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12135\u003c/td\u003e\u003ctd\u003eInvalid DLC with id [{id}]. It might have no link to any game. Check the gameAppId value\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Retrieve DLC by DLC AppId",
        "tags": ["DLC"],
        "x-errorCodes": {
          "12135": "Invalid DLC with id [{id}]. It might have no link to any game. Check the gameAppId value",
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/availablebuilds/{appId}": {
      "get": {
        "description": "This API is used to get simple build manifest that contains list of current build in various platform.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "getSimpleManifest",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BasicBuildManifest"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Simple build manifest",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12141": "Build not found"
        },
        "x-security": {
          "userPermissions": "login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/builds/{buildId}/blocks/urls": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to Generate Download URLs for the requested blocks inside the specified buildId.\u0026lt;br/\u0026gt;The download URL generation may returns Signed URL or Public URL, depends on service configurations.\u0026lt;br/\u0026gt;Before processing the URL generation, it will validate the user entitlement first, if not entitled then the request will be refused.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Block Download URLs\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "generateBlocksDownloadUrls",
        "parameters": [
          {
            "description": "Build ID of the blocks",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrlsRequest"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrls"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12149\u003c/td\u003e\u003ctd\u003eFile with uuid [{uuid}] not found in sourceBuildId [{buildId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003eValidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Generate Block Download URLs",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12149": "File with uuid [{uuid}] not found in sourceBuildId [{buildId}]",
          "20002": "Validation error"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/bulkCheckLatest": {
      "get": {
        "description": "This API is used to check whether supplied list of appId has valid buildmanifest and at  least one of its build set as latest.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: list of build availability\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "checkLatestBuildExistence",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Application IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": true,
            "type": "array"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BuildAvailability"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Check latest build existence",
        "tags": ["Downloader"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/diff/cache/source/{sourceBuildId}/dest/{destinationBuildId}": {
      "get": {
        "description": "This API is used to retrieve detailed diff cache.\u0026lt;br/\u0026gt;The response will contains list of diff cache files along with its download url.",
        "operationId": "retrieveCache",
        "parameters": [
          {
            "description": "DestinationBuildId",
            "in": "path",
            "name": "destinationBuildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "SourceBuildId",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDiffCacheResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12159\u003c/td\u003e\u003ctd\u003eCache not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve Diff Cache",
        "tags": ["Caching"],
        "x-errorCodes": {
          "12159": "Cache not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/diff/{sourceBuildId}/{destinationBuildId}": {
      "get": {
        "description": "This API fetch the diff status between two builds. The diff generated by diff wrapper and saved in the database. Return 404 if no diff found.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: Simple diff status containing where to fetch diff manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "fetchDiffStatus",
        "parameters": [
          {
            "description": "Destination Build ID",
            "in": "path",
            "name": "destinationBuildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source Build ID",
            "in": "path",
            "name": "sourceBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DiffStatusReport"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12148\u003c/td\u003e\u003ctd\u003eDiff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get Diff Status from Two Builds",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12148": "Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/dlc/{buildId}/compatibility": {
      "get": {
        "description": "This API is used to retrieve compatibility of specific DLC versions against the game version.",
        "operationId": "retrieveCompatibility",
        "parameters": [
          {
            "description": "Build Id",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDependencyCompatibilityResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12158\u003c/td\u003e\u003ctd\u003eDependency compatibility not found for input buildId [{id}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve DLC Compatibility",
        "tags": ["DLC"],
        "x-errorCodes": {
          "12158": "Dependency compatibility not found for input buildId [{id}]"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/dlc/{buildId}/link": {
      "get": {
        "description": "This API is used to retrieve DLC versions against the game version.",
        "operationId": "retrieveDependencies_1",
        "parameters": [
          {
            "description": "Build Id",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDependencyLinkResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12157\u003c/td\u003e\u003ctd\u003eDependency link not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve DLC Link",
        "tags": ["DLC"],
        "x-errorCodes": {
          "12157": "Dependency link not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/dlcs/latest/byGameAppId/{appId}": {
      "get": {
        "description": "Retrieve the list of DLC available on specific game. Use game\u0026#39;s appId to query.",
        "operationId": "latestDLCByAppId",
        "parameters": [
          {
            "description": "Base Game App Id",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveLatestDLCResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve DLC by Game AppId",
        "tags": ["DLC"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/drmlicense/encrypt": {
      "get": {
        "description": "This API is used to get encrypted userId and machineId for entitled user.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: data field containing encrypted userId and machineId separated by comma\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "license",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "App Id",
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Machine Id",
            "in": "query",
            "name": "machineId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EncryptedIdentity"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12124\u003c/td\u003e\u003ctd\u003eUser exceed DRM activation's daily maximum limit\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "DRM License Encryption",
        "tags": ["DRM"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12124": "User exceed DRM activation's daily maximum limit"
        },
        "x-security": {
          "userPermissions": "NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/drmlicense/retrievePublicKey": {
      "get": {
        "description": "This API is used to get public key.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: url to download the key\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "retrieveKey",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublicKeyPresignedUrl"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve Public Key",
        "tags": ["DRM"],
        "x-errorCodes": {},
        "x-security": {
          "userPermissions": "NAMESPACE:{namespace}:BUILDINFO [READ]"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/updategame/builds/{buildId}": {
      "get": {
        "deprecated": true,
        "description": "This API is used to get build manifest of release version of the application. Supply it with source buildId and BuildInfo will output release build and generate chunks difference and obsolete files list between two version. Only works for builds uploaded with BuildInfo v1 [DEPRECATED}\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateGame_2",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12143\u003c/td\u003e\u003ctd\u003eBase version build not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12144\u003c/td\u003e\u003ctd\u003eRelease version build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "\u003cs\u003eUpdate game\u003c/s\u003e",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12143": "Base version build not found",
          "12144": "Release version build not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/updategame/{appId}": {
      "get": {
        "deprecated": true,
        "description": "This API is used to get build manifest of release version of the application. \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "initialUpdateGame",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12143\u003c/td\u003e\u003ctd\u003eBase version build not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12144\u003c/td\u003e\u003ctd\u003eRelease version build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Download game",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12143": "Base version build not found",
          "12144": "Release version build not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/updategame/{appId}/{version}": {
      "get": {
        "deprecated": true,
        "description": "This API is used to get build manifest that contains file difference between requested version and release version. \u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateGame",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12143\u003c/td\u003e\u003ctd\u003eBase version build not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12144\u003c/td\u003e\u003ctd\u003eRelease version build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update game",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12143": "Base version build not found",
          "12144": "Release version build not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/v2/updategame/builds/{buildId}": {
      "get": {
        "description": "This API is used to get build manifest of release version of the application. Supply it with source buildId and BuildInfo will output release build and obsolete files list between two version. Only works for builds uploaded with BuildInfo v2\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateGameV2",
        "parameters": [
          {
            "description": "Build ID",
            "in": "path",
            "name": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12143\u003c/td\u003e\u003ctd\u003eBase version build not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12144\u003c/td\u003e\u003ctd\u003eRelease version build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update game v2",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12143": "Base version build not found",
          "12144": "Release version build not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/v2/updategame/{appId}/{platformId}": {
      "get": {
        "description": "This API is used to get build manifest of release version of the application.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "initialUpdateGame_1",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12144\u003c/td\u003e\u003ctd\u003eRelease version build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Download game v2",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12123": "Platform id [{platformId}] is invalid",
          "12144": "Release version build not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/v2/updategame/{appId}/{version}/{platformId}": {
      "get": {
        "description": "This API is used to get build manifest. The binary diff will be calculated in the client side, while obsolete file list will be generated by server side.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: build manifest\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "updateGame_1",
        "parameters": [
          {
            "description": "Application ID",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform ID",
            "in": "path",
            "name": "platformId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12123\u003c/td\u003e\u003ctd\u003ePlatform id [{platformId}] is invalid\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12103\u003c/td\u003e\u003ctd\u003eUser doesn't have entitlement for this application\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12143\u003c/td\u003e\u003ctd\u003eBase version build not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12144\u003c/td\u003e\u003ctd\u003eRelease version build not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Update game v2",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12103": "User doesn't have entitlement for this application",
          "12123": "Platform id [{platformId}] is invalid",
          "12143": "Base version build not found",
          "12144": "Release version build not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/public/namespaces/{namespace}/versionHistory": {
      "get": {
        "description": "This API is used to get version history.\u0026lt;p\u0026gt;Other detail info: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;i\u0026gt;Returns\u0026lt;/i\u0026gt;: version chain from specified build\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;",
        "operationId": "versionHistory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "AppId",
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "description": "BuildId to compare",
            "in": "query",
            "name": "comparedBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VersionChain"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12141\u003c/td\u003e\u003ctd\u003eBuild not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12145\u003c/td\u003e\u003ctd\u003eVersion history not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get version history",
        "tags": ["Downloader"],
        "x-errorCodes": {
          "12141": "Build not found",
          "12145": "Version history not found"
        },
        "x-security": {
          "userPermissions": "Login user"
        }
      }
    },
    "/buildinfo/v2/admin/namespaces/{namespace}/blocks/multipart": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to \u0026lt;b\u0026gt;start resumable multipart file upload\u0026lt;/b\u0026gt;.\u0026lt;br/\u0026gt;The service will returns the list of presigned urls that will be used to upload the Parts.\u0026lt;br/\u0026gt;If there\u0026#39;s a missing Part in the presigned urls list, it indicates that the Part already uploaded previously, so it can be skipped.\u0026lt;br/\u0026gt;The size of each Part should above or equals to 5MB, except the last Part.",
        "operationId": "startResumableMultipartFileUpload",
        "parameters": [
          {
            "description": "File Info",
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartMultipartUploadRequest"
            }
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultipartUploadSummary"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12921\u003c/td\u003e\u003ctd\u003eInvalid multipart upload parameters: [{error}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Start Resumable Multipart File Upload",
        "tags": ["Multipart Uploader"],
        "x-errorCodes": {
          "12173": "Upload with hash [{hash}] already complete",
          "12921": "Invalid multipart upload parameters: [{error}]"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [CREATE]"
        }
      }
    },
    "/buildinfo/v2/admin/namespaces/{namespace}/blocks/multipart/{hash}": {
      "delete": {
        "description": "This API is used to \u0026lt;b\u0026gt;abort resumable multipart file upload\u0026lt;/b\u0026gt;.\u0026lt;br/\u0026gt;The aborted multipart file upload cannot be continued again.",
        "operationId": "abortMultipartFileUpload_1",
        "parameters": [
          {
            "description": "Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12941\u003c/td\u003e\u003ctd\u003eMultipart uploadId for hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Abort Resumable Multipart File Upload",
        "tags": ["Multipart Uploader"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete",
          "12941": "Multipart uploadId for hash [{hash}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [DELETE]"
        }
      },
      "patch": {
        "description": "This API is used to \u0026lt;b\u0026gt;commit resumable multipart file upload\u0026lt;/b\u0026gt; to signal the upload completion.\u0026lt;br/\u0026gt;If there\u0026#39;s a missing Part that not uploaded yet, then the multipart file upload cannot be committed.",
        "operationId": "commitResumableMultipartFileUpload",
        "parameters": [
          {
            "description": "File Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12921\u003c/td\u003e\u003ctd\u003eInvalid multipart upload parameters: [{error}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12941\u003c/td\u003e\u003ctd\u003eMultipart uploadId for hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Resumable Multipart File Upload",
        "tags": ["Multipart Uploader"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete",
          "12921": "Invalid multipart upload parameters: [{error}]",
          "12941": "Multipart uploadId for hash [{hash}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    },
    "/buildinfo/v2/admin/namespaces/{namespace}/blocks/multipart/{hash}/part": {
      "post": {
        "consumes": ["application/json"],
        "description": "This API is used to \u0026lt;b\u0026gt;commit the Part of multipart upload\u0026lt;/b\u0026gt;.\u0026lt;br/\u0026gt;The committed Part will be marked as completed, so in case the multipart file upload retries, it won\u0026#39;t be included in the list of unuploaded parts.",
        "operationId": "commitResumableMultipartFileUploadPart",
        "parameters": [
          {
            "description": "Part",
            "in": "body",
            "name": "part",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipartUploadedPart"
            }
          },
          {
            "description": "Original File Hash",
            "in": "path",
            "name": "hash",
            "required": true,
            "type": "string"
          },
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultipartUploadSummary"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12921\u003c/td\u003e\u003ctd\u003eInvalid multipart upload parameters: [{error}]\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12142\u003c/td\u003e\u003ctd\u003eBlock with hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12941\u003c/td\u003e\u003ctd\u003eMultipart uploadId for hash [{hash}] not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eErrorCode\u003c/td\u003e\u003ctd\u003eErrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e12173\u003c/td\u003e\u003ctd\u003eUpload with hash [{hash}] already complete\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Commit Resumable Multipart File Upload's Part",
        "tags": ["Multipart Uploader"],
        "x-errorCodes": {
          "12142": "Block with hash [{hash}] not found",
          "12173": "Upload with hash [{hash}] already complete",
          "12921": "Invalid multipart upload parameters: [{error}]",
          "12941": "Multipart uploadId for hash [{hash}] not found"
        },
        "x-security": {
          "userPermissions": "ADMIN:NAMESPACE:{namespace}:BUILDINFO [UPDATE]"
        }
      }
    }
  },
  "definitions": {
    "BasicBuildManifest": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "appSize": {
          "format": "int64",
          "type": "integer"
        },
        "buildId": {
          "type": "string"
        },
        "displayVersion": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BinaryUpload": {
      "properties": {
        "blockSize": {
          "format": "int32",
          "type": "integer"
        },
        "contentLength": {
          "format": "int64",
          "type": "integer"
        },
        "contentMD5": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BlockData": {
      "properties": {
        "blockSize": {
          "format": "int64",
          "type": "integer"
        },
        "checksum": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BlockDownloadUrls": {
      "description": "A DTO object for block download urls",
      "properties": {
        "urls": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of block download url \u003cuuid, url\u003e",
          "type": "object"
        }
      },
      "required": ["urls"],
      "type": "object"
    },
    "BlockDownloadUrlsRequest": {
      "description": "A DTO object for creating block download urls",
      "properties": {
        "uuids": {
          "description": "List of block uuid",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": ["uuids"],
      "type": "object"
    },
    "BlockManifest": {
      "properties": {
        "blockSize": {
          "format": "int64",
          "type": "integer"
        },
        "checksum": {
          "type": "string"
        },
        "offset": {
          "format": "int64",
          "type": "integer"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildAvailability": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "available": {
          "type": "boolean",
          "x-omitempty": false
        },
        "platformId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildDeletionData": {
      "properties": {
        "buildId": {
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "deletionStatus": {
          "type": "string"
        },
        "displayVersion": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "requestedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "BuildIdManifest": {
      "properties": {
        "buildId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildIdVersion": {
      "properties": {
        "buildId": {
          "type": "string"
        },
        "createdTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "deleted": {
          "type": "boolean",
          "x-omitempty": false
        },
        "displayVersion": {
          "type": "string"
        },
        "launchArguments": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updatedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "BuildInfoPII": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "identity": {
          "$ref": "#/definitions/MachineIdentity"
        },
        "machineId": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "BuildManifest": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "appSize": {
          "format": "int64",
          "type": "integer"
        },
        "appType": {
          "type": "string"
        },
        "baseUrls": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buildId": {
          "type": "string"
        },
        "buildInfoVersion": {
          "type": "string"
        },
        "defaultLaunchProfile": {
          "$ref": "#/definitions/DefaultLaunchProfile"
        },
        "displayVersion": {
          "type": "string"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/FileManifest"
          },
          "type": "array"
        },
        "gameAppId": {
          "type": "string"
        },
        "launchArguments": {
          "type": "string"
        },
        "obsoleteFiles": {
          "items": {
            "$ref": "#/definitions/ObsoleteFileManifest"
          },
          "type": "array"
        },
        "platformId": {
          "type": "string"
        },
        "releaseNoteUrls": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BulkCalculateDiffCacheRequest": {
      "properties": {
        "diffCacheRequests": {
          "description": "diff cache request",
          "items": {
            "$ref": "#/definitions/DiffCacheRequest"
          },
          "type": "array"
        }
      },
      "required": ["diffCacheRequests"],
      "type": "object"
    },
    "CalculateDiffCacheRequest": {
      "properties": {
        "destinationBuildId": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CleanerConfigObject": {
      "properties": {
        "graceTime": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClientPayload": {
      "properties": {
        "ClientId": {
          "readOnly": true,
          "type": "string"
        },
        "Namespace": {
          "readOnly": true,
          "type": "string"
        },
        "RedirectUri": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitDiffCacheRequest": {
      "properties": {
        "destinationBuildId": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitMultipartUploadRequest": {
      "properties": {
        "parts": {
          "description": "list of uploaded part in-order",
          "items": {
            "$ref": "#/definitions/MultipartUploadedPart"
          },
          "type": "array"
        }
      },
      "required": ["parts"],
      "type": "object"
    },
    "CompatibilityObject": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationInfo": {
      "properties": {
        "entitlementValidation": {
          "description": "Entitlement validation status, true means the entitlement validation is activated in download build flow",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": ["entitlementValidation"],
      "type": "object"
    },
    "ConfigurationUpdate": {
      "description": "A DTO for update the configuration",
      "properties": {
        "entitlementValidation": {
          "description": "Entitlement validation status, true means the entitlement validation is activated in download build flow",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "CreateDependencyLinkRequest": {
      "properties": {
        "buildId": {
          "type": "string"
        },
        "dependencies": {
          "items": {
            "$ref": "#/definitions/DependencyObject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CreateDiffCacheRequest": {
      "properties": {
        "destinationBuildId": {
          "type": "string"
        },
        "diffFile": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DefaultLaunchProfile": {
      "properties": {
        "defaultClientId": {
          "type": "string"
        },
        "defaultEntryPoint": {
          "type": "string"
        },
        "defaultNamespace": {
          "type": "string"
        },
        "defaultRedirectURI": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DependencyObject": {
      "properties": {
        "compatibleBuildId": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dependencyAppId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiffCacheObject": {
      "description": "A DTO object for single diff result",
      "properties": {
        "diffFile": {
          "description": "diff file name",
          "type": "string"
        },
        "filePath": {
          "description": "file path",
          "type": "string"
        },
        "url": {
          "description": "url for the diff file",
          "type": "string"
        }
      },
      "required": ["diffFile", "filePath", "url"],
      "type": "object"
    },
    "DiffCacheRequest": {
      "properties": {
        "appId": {
          "description": "application id",
          "type": "string"
        },
        "destinationVersion": {
          "description": "destination version",
          "type": "string"
        },
        "priority": {
          "description": "set as priority so it always served first inside queue (default: false)",
          "type": "boolean",
          "x-omitempty": false
        },
        "sourceVersion": {
          "description": "source version",
          "type": "string"
        }
      },
      "required": ["appId", "destinationVersion", "sourceVersion"],
      "type": "object"
    },
    "DiffPatchRequest": {
      "properties": {
        "destinationBuildId": {
          "type": "string"
        },
        "destinationControlFileChecksum": {
          "type": "string"
        },
        "destinationControlFileUuid": {
          "type": "string"
        },
        "destinationFileChecksum": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        },
        "destinationMissingBytesFileChecksum": {
          "type": "string"
        },
        "destinationMissingBytesFileUuid": {
          "type": "string"
        },
        "diffFileUrl": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "requestType": {
          "format": "int32",
          "type": "integer"
        },
        "sourceBuildId": {
          "type": "string"
        },
        "sourceFileChecksum": {
          "type": "string"
        },
        "sourceFileUuid": {
          "type": "string"
        },
        "topicArn": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiffStatusReport": {
      "properties": {
        "available": {
          "type": "boolean",
          "x-omitempty": false
        },
        "baseUrls": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DifferentialBuildManifest": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "appSize": {
          "format": "int64",
          "type": "integer"
        },
        "baseUrls": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buildId": {
          "type": "string"
        },
        "buildInfoVersion": {
          "type": "string"
        },
        "defaultLaunchProfile": {
          "$ref": "#/definitions/DefaultLaunchProfile"
        },
        "displayVersion": {
          "type": "string"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/DifferentialFileManifest"
          },
          "type": "array"
        },
        "obsoleteFiles": {
          "items": {
            "$ref": "#/definitions/ObsoleteFileManifest"
          },
          "type": "array"
        },
        "platformId": {
          "type": "string"
        },
        "releaseNoteUrls": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DifferentialFileManifest": {
      "properties": {
        "blocks": {
          "items": {
            "$ref": "#/definitions/BlockManifest"
          },
          "type": "array"
        },
        "checksum": {
          "type": "string"
        },
        "filesize": {
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "uuid": {
          "type": "string"
        },
        "zsyncFile": {
          "$ref": "#/definitions/ZsyncFileManifest"
        }
      },
      "type": "object"
    },
    "DifferentialUploadSummary": {
      "properties": {
        "destinationFileUuid": {
          "type": "string"
        },
        "diffFileUrl": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "presignedUrl": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EncryptedIdentity": {
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ErrorEntity": {
      "properties": {
        "devStackTrace": {
          "description": "internal server error stack trace in configured environment",
          "type": "string"
        },
        "errorCode": {
          "description": "numeric error code",
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "description": "error message",
          "type": "string"
        },
        "messageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "message variables",
          "type": "object"
        }
      },
      "required": ["errorCode", "errorMessage"],
      "type": "object"
    },
    "FieldValidationError": {
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorField": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorValue": {
          "type": "string"
        },
        "messageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "FileDiffingStatus": {
      "properties": {
        "destinationBuildId": {
          "type": "string"
        },
        "destinationControlFileUuid": {
          "type": "string"
        },
        "destinationFileChecksum": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        },
        "destinationFileUuid": {
          "type": "string"
        },
        "destinationMissingBytesFileUuid": {
          "type": "string"
        },
        "diffFileUrl": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "preDiffStatus": {
          "format": "int32",
          "type": "integer"
        },
        "retry": {
          "type": "boolean",
          "x-omitempty": false
        },
        "sourceBuildId": {
          "type": "string"
        },
        "sourceFileChecksum": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FileManifest": {
      "properties": {
        "blocks": {
          "items": {
            "$ref": "#/definitions/BlockManifest"
          },
          "type": "array"
        },
        "checksum": {
          "type": "string"
        },
        "filesize": {
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "type": "string"
        },
        "uploadStatus": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "zsyncFile": {
          "$ref": "#/definitions/ZsyncFileManifest"
        }
      },
      "type": "object"
    },
    "MachineIdentity": {
      "properties": {
        "machineId": {
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MultipartUploadSummary": {
      "properties": {
        "parts": {
          "description": "List of Parts contains presigned url for part upload, make sure to upload the parts in-order",
          "items": {
            "$ref": "#/definitions/MultipartUploadUrl"
          },
          "type": "array"
        },
        "uuid": {
          "description": "block uuid",
          "type": "string"
        }
      },
      "required": ["parts", "uuid"],
      "type": "object"
    },
    "MultipartUploadUrl": {
      "properties": {
        "partNumber": {
          "description": "part number",
          "format": "int32",
          "type": "integer"
        },
        "presignedUrl": {
          "description": "presigned url for part upload",
          "type": "string"
        }
      },
      "required": ["partNumber", "presignedUrl"],
      "type": "object"
    },
    "MultipartUploadedPart": {
      "properties": {
        "etag": {
          "description": "upload etag",
          "type": "string"
        },
        "partNumber": {
          "description": "upload part number, should \u003e1",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": ["etag", "partNumber"],
      "type": "object"
    },
    "ObsoleteFileManifest": {
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PingResultResponse": {
      "properties": {
        "resp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PreCheckUploadRequest": {
      "properties": {
        "destinationBuildId": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublicKeyPresignedUrl": {
      "properties": {
        "namespace": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReleaseNoteDTO": {
      "description": "A DTO object for release note manifest",
      "properties": {
        "appId": {
          "description": "application id",
          "type": "string"
        },
        "baseUrls": {
          "description": "list of base url for release note file",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "platformId": {
          "description": "platform id",
          "type": "string"
        },
        "releaseNoteLocalizations": {
          "description": "list of release note's localizations",
          "items": {
            "$ref": "#/definitions/ReleaseNoteLocalizationDTO"
          },
          "type": "array"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      },
      "required": ["appId", "baseUrls", "namespace", "platformId", "releaseNoteLocalizations", "version"],
      "type": "object"
    },
    "ReleaseNoteLocalizationDTO": {
      "description": "A DTO object for release note localization",
      "properties": {
        "lang": {
          "description": "localization language",
          "type": "string"
        },
        "uuid": {
          "description": "localization file",
          "type": "string"
        }
      },
      "required": ["lang", "uuid"],
      "type": "object"
    },
    "ReleaseNoteManifest": {
      "description": "A DTO object for creating/updating release note manifest",
      "properties": {
        "appId": {
          "description": "application id",
          "type": "string"
        },
        "platformId": {
          "description": "platform id",
          "type": "string"
        },
        "releaseNoteLocalizations": {
          "description": "list of release note's localizations",
          "items": {
            "$ref": "#/definitions/ReleaseNoteLocalizationDTO"
          },
          "type": "array"
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      },
      "required": ["appId", "platformId", "releaseNoteLocalizations", "version"],
      "type": "object"
    },
    "RetrieveBaseGameResponse": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "baseGames": {
          "items": {
            "$ref": "#/definitions/SimpleLatestBaseGame"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RetrieveDependencyCompatibilityResponse": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "compatibilities": {
          "items": {
            "$ref": "#/definitions/CompatibilityObject"
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RetrieveDependencyLinkResponse": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "dependencies": {
          "items": {
            "$ref": "#/definitions/DependencyObject"
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RetrieveDiffCacheResponse": {
      "description": "A DTO object for diff cache response",
      "properties": {
        "baseUrls": {
          "description": "base url for summary file and diff cache files",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "diffCaches": {
          "description": "list of diff cache files",
          "items": {
            "$ref": "#/definitions/DiffCacheObject"
          },
          "type": "array"
        },
        "inProgress": {
          "description": "diff cache status",
          "type": "boolean",
          "x-omitempty": false
        },
        "summaryFile": {
          "description": "summary file that contains all diff cache result",
          "type": "string"
        }
      },
      "required": ["baseUrls", "diffCaches", "inProgress", "summaryFile"],
      "type": "object"
    },
    "RetrieveLatestDLCResponse": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SimpleLatestBaseGame": {
      "properties": {
        "latestBuildId": {
          "type": "string"
        },
        "latestVersion": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StartMultipartUploadRequest": {
      "properties": {
        "contentLength": {
          "description": "file size",
          "format": "int64",
          "type": "integer"
        },
        "hash": {
          "description": "file checksum",
          "type": "string"
        },
        "partSize": {
          "description": "part size of multipart upload, the service will returns N signed urls based on that size",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": ["contentLength", "hash", "partSize"],
      "type": "object"
    },
    "UpdateBuildMetadataRequest": {
      "properties": {
        "launchArguments": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UploadBuildManifest": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "appType": {
          "type": "string"
        },
        "defaultLaunchProfile": {
          "$ref": "#/definitions/DefaultLaunchProfile"
        },
        "displayVersion": {
          "type": "string"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/FileManifest"
          },
          "type": "array"
        },
        "gameAppId": {
          "type": "string"
        },
        "launchArguments": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UploadModeCheck": {
      "properties": {
        "buildManifest": {
          "$ref": "#/definitions/BuildManifest"
        },
        "uploadDifferentialMode": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "UploadSummary": {
      "properties": {
        "presignedUrl": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidationErrorEntity": {
      "properties": {
        "errorCode": {
          "description": "numeric error code",
          "format": "int32",
          "type": "integer"
        },
        "errorMessage": {
          "description": "error message",
          "type": "string"
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/FieldValidationError"
          },
          "type": "array"
        }
      },
      "required": ["errorCode", "errorMessage"],
      "type": "object"
    },
    "VersionChain": {
      "properties": {
        "appId": {
          "type": "string"
        },
        "comparedBuildId": {
          "type": "string"
        },
        "nextVersions": {
          "items": {
            "$ref": "#/definitions/VersionNode"
          },
          "type": "array"
        },
        "platformId": {
          "type": "string"
        },
        "previousVersions": {
          "items": {
            "$ref": "#/definitions/VersionNode"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "VersionNode": {
      "properties": {
        "buildId": {
          "type": "string"
        },
        "distance": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ZsyncDiffRequest": {
      "properties": {
        "binaryUpload": {
          "$ref": "#/definitions/BinaryUpload"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "destinationControlFileChecksum": {
          "type": "string"
        },
        "destinationControlFileUuid": {
          "type": "string"
        },
        "destinationFileChecksum": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        },
        "destinationMissingBytesFileChecksum": {
          "type": "string"
        },
        "destinationMissingBytesFileUuid": {
          "type": "string"
        },
        "diffFileUrl": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "requestType": {
          "format": "int32",
          "type": "integer"
        },
        "sourceBuildId": {
          "type": "string"
        },
        "sourceFileChecksum": {
          "type": "string"
        },
        "sourceFileUuid": {
          "type": "string"
        },
        "topicArn": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ZsyncFileManifest": {
      "properties": {
        "blockSize": {
          "format": "int32",
          "type": "integer"
        },
        "checksum": {
          "type": "string"
        },
        "fileChecksum": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "length": {
          "format": "int64",
          "type": "integer"
        },
        "modifiedTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "seqMatches": {
          "format": "int32",
          "type": "integer"
        },
        "strongsumLength": {
          "format": "int32",
          "type": "integer"
        },
        "uploadStatus": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "weaksumLength": {
          "format": "int32",
          "type": "integer"
        },
        "zsyncVersion": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "x-docs": {
    "alias": "buildinfo",
    "host": "https://development.accelbyte.io",
    "path": "/buildinfo/swagger.json"
  },
  "x-version": {
    "buildBy": "Gradle 6.9.1",
    "buildDate": "2024-05-20T01:13:39+00:00",
    "buildID": "3.28.16",
    "buildJDK": "1.8.0_232 (Eclipse OpenJ9 openj9-0.17.0)",
    "buildOS": "Linux amd64 5.10.215-203.850.amzn2.x86_64",
    "gitBranchName": "unknown",
    "gitHash": "ad04c611b6",
    "gitTag": "3.28.16",
    "name": "justice-buildinfo-service",
    "realm": "dev",
    "version": "3.28.16",
    "version-roles-seeding": "0.0.3"
  }
}
