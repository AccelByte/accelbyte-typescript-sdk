{
  "swagger": "2.0",
  "info": {
    "description": "Justice BuildInfo Service",
    "version": "3.28.5",
    "title": "justice-buildinfo-service",
    "contact": {
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io",
      "email": "engineering@accelbyte.io"
    }
  },
  "basePath": "/buildinfo",
  "tags": [
    {
      "name": "Uploader V1"
    },
    {
      "name": "Caching"
    },
    {
      "name": "DLC"
    },
    {
      "name": "Downloader"
    },
    {
      "name": "Multipart Uploader"
    },
    {
      "name": "Release Note"
    },
    {
      "name": "Uploader V2"
    },
    {
      "name": "Uploader V3"
    },
    {
      "name": "DRM"
    },
    {
      "name": "GDPR"
    },
    {
      "name": "Utility"
    }
  ],
  "paths": {
    "/admin/namespaces/{namespace}/builds/{buildId}": {
      "get": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "Get Build Manifest",
        "description": "This API is used to get build manifest.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Build Manifest</li></ul>",
        "operationId": "getBuild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Delete Build</s>",
        "description": "This API is used to delete build manifest. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=8 (DELETE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "deleteBuildManifest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/admin/namespaces/{namespace}/retrievechunkbyhash/{hash}": {
      "get": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "Retrieve Chunk by Hash",
        "description": "This API is used to retrieve chunk by hash.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: chunk data</li></ul>",
        "operationId": "retrieveChunkByHash",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockData"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/setcurrentbuild/{buildId}": {
      "put": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "Set Current Build",
        "description": "This API is used to set current build as release version.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "setCurrentBuildByBuildId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sendNotification",
            "in": "query",
            "description": "Is send latest game notification",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12172</td><td>Build [{buildId}] is not committed yet</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/builddeletion/{buildId}/retry": {
      "put": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Retry Failed Build Deletion</s>",
        "description": "This API is used to retry build deletion.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "retryBuildDeletion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12138</td><td>Build Deletion Invalid [{build}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/setcurrentbuild/{appId}/{version}": {
      "put": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Set Current Build</s>",
        "description": "This API is used to set current build as release version. [DEPRECATED] <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "setCurrentBuild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12172</td><td>Build [{buildId}] is not committed yet</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/admin/namespaces/{namespace}/builds/byAppId": {
      "get": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "Get committed builds by appId",
        "description": "This API is used to get basic build manifests. Only committed build will be retrieved.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Basic Build Manifest</li></ul>",
        "operationId": "getBuildByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "Application Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildIdVersion"
              }
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/builddeletion/{buildId}/cancel": {
      "delete": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Cancel Build Deletion</s>",
        "description": "This API is used to cancel build deletion.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=8 (DELETE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "cancelBuildDeletion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Cancel successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12138</td><td>Build Deletion Invalid [{build}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/startbuildupload/{appId}/{version}": {
      "post": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Start Build Upload</s>",
        "description": "This API is used to start build upload. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "startBuildUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildIdManifest"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/admin/namespaces/{namespace}/commitchunkupload/{hash}/{uuid}/{offset}": {
      "post": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Commit Chunk Upload</s>",
        "description": "This API is used to commit chunk that has been uploaded. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: chunk data</li></ul>",
        "operationId": "commitChunkUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/admin/namespaces/{namespace}/commitbuildmanifest": {
      "post": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Commit Build Manifest</s>",
        "description": "This API is used to commit build manifest. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "commitBuildManifest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12121</td><td>Build [{buildId}] is invalid! Blocks can't be empty</td></tr><tr><td>12122</td><td>Build [{buildId}] can't be null</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>Validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/admin/namespaces/{namespace}/buildsdeletion/byAppId": {
      "get": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "Get builds deletion by appId",
        "description": "This API is used to get build deletion. Only deleted build will be retrieved.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: List of build deletion</li></ul>",
        "operationId": "getBuildDeletionByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "Application Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "win32 win64 windows linux-amd64 darwin"
          },
          {
            "name": "deletionStatus",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-example": "0 - Requested, 1 - In Progress, 2 - Deleted, 3 - Failed "
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildDeletionData"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/builds/byNamespace": {
      "get": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "Get committed builds by namespace",
        "description": "This API is used to get basic build manifests. Only committed build will be retrieved. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Basic Build Manifest</li></ul>",
        "operationId": "getBuildByNamespace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasicBuildManifest"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/commitchunkupload/{hash}/{uuid}/{offset}/{blockSize}": {
      "post": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Commit Chunk Upload</s>",
        "description": "This API is used to commit chunk that has been uploaded. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: chunk data</li></ul>",
        "operationId": "commitChunkUploadWithSize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "blockSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/admin/namespaces/{namespace}/startchunkupload": {
      "post": {
        "tags": [
          "Uploader V1"
        ],
        "summary": "<s>Start Chunk Upload</s>",
        "description": "This API is used to start chunk upload and retrieve upload url. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: upload data</li></ul>",
        "operationId": "startChunkUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "chunkInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr><tr><td>12174</td><td>Upload with hash [{hash}] already started</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/admin/namespaces/{namespace}/diff/cache": {
      "post": {
        "tags": [
          "Caching"
        ],
        "summary": "Save Diff Cache",
        "description": "This API is used to save detailed diff cache. Only used by differ. Not to be used directly.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:DIFFCACHE\", action=1 (CREATE)</li></ul>",
        "operationId": "createCache",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateDiffCacheRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Caching"
        ],
        "summary": "Diff Cache Completion",
        "description": "This API is used to mark that the diff caching is complete and diff summary file uploaded to s3. Only used by differ. Not to be used directly.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:DIFFCACHE\", action=4 (UPDATE)</li></ul>",
        "operationId": "commitCache",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommitDiffCacheRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/diff/calculate": {
      "post": {
        "tags": [
          "Caching"
        ],
        "summary": "Dispatch Diff Caching Request",
        "description": "This API is used to dispatch diff caching request.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:DIFFCACHE\", action=1 (CREATE)</li></ul>",
        "operationId": "cachingRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CalculateDiffCacheRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful operation"
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12180</td><td>Diff cache result already exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/dlc/{buildId}/link": {
      "get": {
        "tags": [
          "DLC"
        ],
        "summary": "Retrieve DLC Link",
        "description": "This API is used to retrieve DLC versions against the game version.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li></ul>",
        "operationId": "retrieveDependencies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "description": "Build Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDependencyLinkResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12157</td><td>Dependency link not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/dlc/link": {
      "put": {
        "tags": [
          "DLC"
        ],
        "summary": "Link DLC",
        "description": "This API is used to link DLC version(s) against the game version.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li></ul>",
        "operationId": "linkDependencies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateDependencyLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/builds/{buildId}/blocks/urls": {
      "post": {
        "tags": [
          "Downloader"
        ],
        "summary": "Generate Block Download URLs",
        "description": "This API is used to Generate Download URLs for the requested blocks inside the specified buildId.<br/>The download URL generation may returns Signed URL or Public URL, depends on service configurations.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Block Download URLs</li></ul>",
        "operationId": "adminGenerateBlocksDownloadUrls",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "description": "Build ID of the blocks",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrlsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrls"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12149</td><td>File with uuid [{uuid}] not found in sourceBuildId [{buildId}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>Validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/blocks/multipart": {
      "post": {
        "tags": [
          "Multipart Uploader"
        ],
        "summary": "Start Multipart File Upload",
        "description": "This API is used to <b>start multipart file upload</b>. The service will returns the list of presigned urls that will be used to upload the Parts.<br/>Make sure to upload the Parts in-order based on the presigned urls order.The size of each Part should above or equals to 5MB, except the last one.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: multipart upload summary</li></ul>",
        "operationId": "startMultipartFileUpload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartMultipartUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultipartUploadSummary"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/blocks/multipart/{hash}": {
      "delete": {
        "tags": [
          "Multipart Uploader"
        ],
        "summary": "Abort Multipart File Upload",
        "description": "This API is used to <b>abort multipart file upload</b>. The aborted multipart file upload cannot be continued again.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=8 (DELETE)</li></ul>",
        "operationId": "abortMultipartFileUpload",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr><tr><td>12941</td><td>Multipart uploadId for hash [{}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Multipart Uploader"
        ],
        "summary": "Commit Multipart File Upload",
        "description": "This API is used to <b>commit multipart file upload</b> to signal the upload completion.<br/>The request should contains list of PartNumber along with its ETag value. The list should be in-order.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: block manifest</li></ul>",
        "operationId": "commitMultipartFileUpload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "parts",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommitMultipartUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12921</td><td>Invalid multipart upload parameters: [{}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr><tr><td>12941</td><td>Multipart uploadId for hash [{}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/v2/admin/namespaces/{namespace}/blocks/multipart/{hash}": {
      "delete": {
        "tags": [
          "Multipart Uploader"
        ],
        "summary": "Abort Resumable Multipart File Upload",
        "description": "This API is used to <b>abort resumable multipart file upload</b>.<br/>The aborted multipart file upload cannot be continued again.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=8 (DELETE)</li></ul>",
        "operationId": "abortMultipartFileUpload_1",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "description": "Hash",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr><tr><td>12941</td><td>Multipart uploadId for hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Multipart Uploader"
        ],
        "summary": "Commit Resumable Multipart File Upload",
        "description": "This API is used to <b>commit resumable multipart file upload</b> to signal the upload completion.<br/>If there's a missing Part that not uploaded yet, then the multipart file upload cannot be committed.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: block manifest</li></ul>",
        "operationId": "commitResumableMultipartFileUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "description": "File Hash",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12921</td><td>Invalid multipart upload parameters: [{error}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr><tr><td>12941</td><td>Multipart uploadId for hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/v2/admin/namespaces/{namespace}/blocks/multipart": {
      "post": {
        "tags": [
          "Multipart Uploader"
        ],
        "summary": "Start Resumable Multipart File Upload",
        "description": "This API is used to <b>start resumable multipart file upload</b>.<br/>The service will returns the list of presigned urls that will be used to upload the Parts.<br/>If there's a missing Part in the presigned urls list, it indicates that the Part already uploaded previously, so it can be skipped.<br/>The size of each Part should above or equals to 5MB, except the last Part.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: multipart upload summary</li></ul>",
        "operationId": "startResumableMultipartFileUpload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartMultipartUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultipartUploadSummary"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12921</td><td>Invalid multipart upload parameters: [{error}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/v2/admin/namespaces/{namespace}/blocks/multipart/{hash}/part": {
      "post": {
        "tags": [
          "Multipart Uploader"
        ],
        "summary": "Commit Resumable Multipart File Upload's Part",
        "description": "This API is used to <b>commit the Part of multipart upload</b>.<br/>The committed Part will be marked as completed, so in case the multipart file upload retries, it won't be included in the list of unuploaded parts.<br/><br/>Other detail info: <ul><li><i>Required permission (IAM Auth)</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: None</li></ul>",
        "operationId": "commitResumableMultipartFileUploadPart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "description": "Original File Hash",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "part",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipartUploadedPart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultipartUploadSummary"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12921</td><td>Invalid multipart upload parameters: [{error}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr><tr><td>12941</td><td>Multipart uploadId for hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/releasenote/manifest/get/{appId}/{platformId}": {
      "get": {
        "tags": [
          "Release Note"
        ],
        "summary": "Get release note manifest",
        "description": "This API is used to get release note manifest.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li></ul>",
        "operationId": "getReleaseNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "description": "App Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "path",
            "description": "Platform Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseNoteDTO"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12154</td><td>Release note not found for namespace [{namespace}], appId [{appId}], platformId [{platformId}], version [{version}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/releasenote/upload/start/{uploaderId}": {
      "post": {
        "tags": [
          "Release Note"
        ],
        "summary": "Start Release Note Upload",
        "description": "This API is used to start release note upload and get the presigned URL.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li></ul>",
        "operationId": "startReleaseNoteUpload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploaderId",
            "in": "path",
            "description": "Uploader Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/releasenote/manifest/save/{uploadMode}": {
      "post": {
        "tags": [
          "Release Note"
        ],
        "summary": "Save release note manifest",
        "description": "This API is used to save release note manifest.<p>It will update the existing release note manifest if exist (based on namespace, appId, platformId and version).<br/>Otherwise, it will create a new release note manifest.<br/><br/><b>Upload Mode for existing release note manifest:</b><br/>0 = update, will merge the old localizations with the new localizations.<br/>1 = replace, will replace the old localizations with the new localizations.<br/><br/>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li></ul>",
        "operationId": "saveReleaseNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploadMode",
            "in": "path",
            "description": "Upload Mode (0: update, 1: replace)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReleaseNoteManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12176</td><td>Upload [{type}] with hash [{hash}] hasn't yet committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>Validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/releasenote/upload/commit/{hash}": {
      "patch": {
        "tags": [
          "Release Note"
        ],
        "summary": "Commit Release Note Upload",
        "description": "This API is used to commit release note file that has been uploaded to signal completion.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li></ul>",
        "operationId": "commitReleaseNoteUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/builds/{buildId}": {
      "get": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Get Build Manifest v2",
        "description": "This API is used to get build manifest for build uploaded with BuildInfo v2.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Build Manifest</li></ul>",
        "operationId": "getBuild_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "<s>Delete Build v2</s>",
        "description": "This API is used to delete build manifest.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=8 (DELETE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "deleteBuildManifest_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12137</td><td>The Latest Build cannot be deleted [{}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Edit Launch Arguments",
        "description": "This API is used to edit build's launchArgument.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: None</li></ul>",
        "operationId": "updateBuildMetadata",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "description": "buildId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateBuildMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/setcurrentbuild/{appId}/{version}/{platformId}": {
      "put": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "<s>Set Current Build (v2)</s>",
        "description": "This API is used to set current build as release version.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "setCurrentBuild_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12172</td><td>Build [{buildId}] is not committed yet</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/commitzsyncfileupload/{buildId}/{hash}": {
      "patch": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Commit ZsyncFile Upload (v2)",
        "description": "This API is used to commit file that has been uploaded to signal completion.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: chunk data</li></ul>",
        "operationId": "commitZsyncFileUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/difftrigger/status/{value}": {
      "patch": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Toggle Diff Trigger Status",
        "description": "This API is used to toggle diff trigger status. Use 0 to turn off and 1 to turn on. Any values other than 0 will be regarded as 1.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li></ul>",
        "operationId": "toggleDiffTriggerStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "description": "Value",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/startfileupload/{uploaderId}": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Start File Upload (v2)",
        "description": "This API is used to start file upload and retrieve upload url.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: upload data</li></ul>",
        "operationId": "startFileUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploaderId",
            "in": "path",
            "description": "The build id of this file",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/commitzsyncfileupload/{buildId}/{hash}/{blockSize}": {
      "patch": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Commit Zsync File Upload v2",
        "description": "This API is used to commit chunk that has been uploaded.<p>Previous API:<ul><li>/v2/startzsyncfileupload</li></ul>Next API:<ul><li>/v2/startfileupload/{uploaderId}</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li></ul>",
        "operationId": "commitZsyncFileUploadWithSize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/diff/start/{sourceBuildId}/{destinationBuildId}": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Start Diff Upload",
        "description": "This API is used to start diff manifest upload.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: UploadSummary</li></ul>",
        "operationId": "startDiffUpload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "description": "SourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "name": "destinationBuildId",
            "in": "path",
            "description": "DestinationBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12177</td><td>Diff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/startbuildupload": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Start Build Upload v2",
        "description": "This API is used to start build upload.<p>Previous API:<ul><li>none</li></ul>Next API:<ul><li>/v2/startfileupload/{uploaderId}</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "startBuildUpload_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/startbuildupload/{sourceBuildId}": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Start Build Upload v2",
        "description": "This API is used to start incremental build upload. This endpoint used for incremental build upload, where developer update the files from existing build version (that hasn't yet set as latest).<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "startBuildUpload_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr><tr><td>12130</td><td>Build [{buildId}] buildinfo version is not V2</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12147</td><td>Source build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/commitfileupload/{buildId}/{hash}": {
      "patch": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Commit File Upload (v2)",
        "description": "This API is used to commit file that has been uploaded to signal completion.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: chunk data</li></ul>",
        "operationId": "commitFileUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/startzsyncfileupload/{fileHash}": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Start ZsyncFile Upload (v2)",
        "description": "This API is used to start zsync control file upload and retrieve upload url.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: upload data</li></ul>",
        "operationId": "startZsyncFileUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileHash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "zsyncFileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr><tr><td>12176</td><td>Upload with hash [{hash}] hasn't yet committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/diff/signedurl/{sourceBuildId}/{destinationBuildId}": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Request Presigned Url for Diff Manifest Upload",
        "description": "Use this API to get the presigned url to upload the diff manifest.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "requestPresignedUrlDiffUpload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "description": "SourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "name": "destinationBuildId",
            "in": "path",
            "description": "DestinationBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12148</td><td>Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12177</td><td>Diff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/dlc/byGameAppId": {
      "get": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Get committed DLC build by appId (v2)",
        "description": "This API is used to get basic DLC build manifests. Only committed build will be retrieved.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Basic Build Manifest</li></ul>",
        "operationId": "getDLCBuildByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "Application Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildIdVersion"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/commitdlcbuildmanifest": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Commit DLC Build Manifest (v2)",
        "description": "This API is used to commit build manifest.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "commitDLCBuildManifest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12127</td><td>Invalid endpoint, attempt to hit this endpoint with v1 behaviour</tr><tr><td>12128</td><td>Zsync file from file with UUID [{uuid}] shouldn't empty</tr><tr><td>12129</td><td>File [{filename}] with hash [{hash}] can't have empty uuid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr><tr><td>12155</td><td>Associated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/builds/byAppId": {
      "get": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Get committed builds by appId (v2)",
        "description": "This API is used to get basic build manifests. Only committed build will be retrieved.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Basic Build Manifest</li></ul>",
        "operationId": "getBuildByAppId_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "Application Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildIdVersion"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/startdlcbuildupload": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Start DLC Build Upload",
        "description": "This API is used to start DLC build upload.<p>Previous API:<ul><li>none</li></ul>Next API:<ul><li>/v2/startfileupload/{uploaderId} for normal (non-differential) upload</li><li>/v3/prezsyncupload for differential upload</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "startDLCBuildUpload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12155</td><td>Associated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/startdlcbuildupload/{sourceBuildId}": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Start DLC Build Upload",
        "description": "This API is used to start DLC build upload. This endpoint used for incremental build upload, where developer update the files from existing build version (that hasn't yet set as latest).<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "startDLCBuildUpload_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr><tr><td>12130</td><td>Build [{buildId}] buildinfo version is not V2</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12155</td><td>Associated game with appId [{appId}] and platformId [{platformId}] not found for this DLC.</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/diff/commit/{sourceBuildId}/{destinationBuildId}": {
      "patch": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Commit Diff Manifest",
        "description": "This API is used to commit diff manifest.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "commitDiffManifest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "description": "SourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "name": "destinationBuildId",
            "in": "path",
            "description": "DestinationBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12148</td><td>Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12177</td><td>Diff status and manifest from sourceBuildId [{sourceBuildId}] with destinationBuildId [{appId}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/commitbuildmanifest": {
      "post": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Commit Build Manifest (v2)",
        "description": "This API is used to commit build manifest.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "commitBuildManifest_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12127</td><td>Invalid endpoint, attempt to hit this endpoint with v1 behaviour</tr><tr><td>12128</td><td>Zsync file from file with UUID [{uuid}] shouldn't empty</tr><tr><td>12129</td><td>File [{filename}] with hash [{hash}] can't have empty uuid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v2/difftrigger/status": {
      "get": {
        "tags": [
          "Uploader V2"
        ],
        "summary": "Get Diff Trigger Status",
        "description": "This API is used to get diff trigger status.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li></ul>",
        "operationId": "getDiffTriggerStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/commitmissingbytesfileupload/{hash}": {
      "patch": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Commit Missing Bytes File Upload (v3)",
        "description": "This API is used to commit missing bytes file that has been uploaded to S3.<p>Previous API:<ul><li>/v3/startzsyncfileupload</li></ul>Next API:<ul><li>/v3/startfileupload/{uploaderId}</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: chunk data</li></ul>",
        "operationId": "commitMissingBytesFileUploadWithSize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr><tr><td>12149</td><td>File with checksum [{fileChecksum}] not found in sourceBuildId [{sourceBuildId}]</td></tr><tr><td>12152</td><td>Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/setcurrentbuild/{appId}/{version}/{platformId}": {
      "put": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Set Current Build v3",
        "description": "This API is used to set current build as release version. Every build set as current will be recorded in version history as chain of history.<p>Previous API:<ul><li>//TODO previous api</li></ul>Next API:<ul><li>none</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "setCurrentBuild_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12172</td><td>Build [{buildId}] is not committed yet</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/commitzsyncfileupload/{buildId}/{hash}": {
      "patch": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Commit ZsyncFile Upload v3",
        "description": "This API is used to commit file that has been uploaded to signal completion.<p>Mandatory fields for body: sourceBuildId, destinationBuildId, destinationFilePath, destinationFileChecksum, destinationControlFileUuid, destinationControlFileChecksumPrevious API:<ul><li>/v3/startzsyncfileupload</li></ul>Next API:<ul><li>/v3/startfileupload/{uploaderId} for normal (non-differential) upload</li><li>/v3/listendiffstatus for differential upload</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li></ul>",
        "operationId": "commitZsyncFileUpload_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "description": "Hash of the zsync file",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/startfileupload/{uploaderId}": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Start File Upload v3",
        "description": "This API is used to start file upload, which in turn will response with presigned URL for upload target.<p>Previous API:<ul><li>/v3/startbuildupload in the case of normal (non-differential) upload</li><li>/v3/startbuildupload/{sourceBuildId} in the case of normal (non-differential) incremental upload</li><li>/v3/commitzsyncfileupload/{buildId}/{hash} in the case of differential upload</li><li>/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize} to also specify the blocksize in the case of differential upload</li></ul>Next API:<ul><li>/v3/commitfileupload//{buildId}/{hash}</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li></ul>",
        "operationId": "startFileUpload_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploaderId",
            "in": "path",
            "description": "The BuildUtil uploader Id. For testing purpose, use random but consistent id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "fileInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BinaryUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize}": {
      "patch": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Commit Zsync File Upload v3",
        "description": "This API is used to commit chunk that has been uploaded. By commiting the file, it means flag the file as already uploaded.<p>Mandatory fields for body: sourceBuildId, destinationBuildId, destinationFilePath, destinationFileChecksum, destinationControlFileUuid, destinationControlFileChecksumPrevious API:<ul><li>/v3/startzsyncfileupload</li></ul>Next API:<ul><li>/v3/startfileupload/{uploaderId}</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li></ul>",
        "operationId": "commitZsyncFileUploadWithSize_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/startbuildupload": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Start Build Upload v3",
        "description": "This API is used to start build upload for v3 upload (Differential Upload). This endpoint is the startpoint of upload.<p>Previous API:<ul><li>none</li></ul>Next API:<ul><li>/v3/prezsyncupload</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "startBuildUpload_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DifferentialBuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12130</td><td>Build [{buildId}] buildinfo version is not V2</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/startbuildupload/{sourceBuildId}": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Start Build Upload v3",
        "description": "This API is used to start build upload. This endpoint used for incremental build upload, where the developer update the files from existing build version (that hasn't yet set as latest).<p>Previous API:<ul><li>none</li></ul>Next API:<ul><li>/v3/prezsyncupload</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: build id</li></ul>",
        "operationId": "startBuildUpload_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadBuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DifferentialBuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12130</td><td>Build [{buildId}] buildinfo version is not V2</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12147</td><td>Source build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/commitfileupload/{buildId}/{hash}": {
      "patch": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Commit File Upload v3",
        "description": "This API is used to commit file that has been uploaded to signal completion.<p>Previous API:<ul><li>/v3/startfileupload/{uploaderId}</li></ul>Next API:<ul><li>/v3/startzsyncfileupload/{fileHash} for non-differential (normal) upload</li><li>/v3/prezsyncupload for differential upload</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li></ul>",
        "operationId": "commitFileUpload_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12142</td><td>Block with hash [{hash}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/uploadmode/{appId}/{platformId}": {
      "get": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Get differential upload activation status",
        "description": "This API is used to see whether BuildUtil should upload in differential mode or normal mode.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Diff File Status Manifest</li></ul>",
        "operationId": "determineUploadMode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "description": "appId",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadModeCheck"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12153</td><td>Latest build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/prezsyncupload": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Pre check differential upload",
        "description": "This API is used to check the diff status (not yet diff'ed, diff'ed, patched) of a file before upload its control file.<p>Previous API:<ul><li>/v3/startbuildupload</li><li>/v3/startbuildupload/{sourceBuildId}</li></ul>Next API:<ul><li>/v3/startzsyncfileupload/{fileHash}</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: upload data</li></ul>",
        "operationId": "preZsyncUpload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "preCheck",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreCheckUploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DifferentialUploadSummary"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12152</td><td>Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/commitbuildmanifest/{sourceBuildId}": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Commit Build Manifest (v3)",
        "description": "This API is used to commit build manifest.<p>Previous API:<ul><li>/listenPatchStatus in case needs to patch file</li><li>/v3/commitzsyncfileupload/{buildId}/{hash} in case of normal non-differential upload</li><li>/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize} to also specify the blocksize in case of normal non-differential upload</li></ul>Next API:<ul><li>none</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=4 (UPDATE)</li><li><i>Returns</i>: none</li></ul>",
        "operationId": "commitBuildManifest_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "description": "sourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12121</td><td>Build [{buildId}] is invalid! Blocks can't be empty</td></tr><tr><td>12127</td><td>Invalid endpoint, attempt to hit this endpoint with v1 behaviour</tr><tr><td>12128</td><td>Zsync file from file with UUID [{uuid}] shouldn't empty!</tr><tr><td>12129</td><td>File [{filename}] with hash [{hash}] can't have empty uuid</tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12171</td><td>Build [{buildId}] with appId [{appId}] and version [{version}] already committed</td></tr><tr><td>12172</td><td>Build [{buildId}] is not committed yet</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/current/{appId}/{platformId}": {
      "get": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Get most current build",
        "description": "This API is used to the current build from particular appId. This is a utility API used by BuildUtil to determine whether there's an older build set as current. If it does, the BuildUtil will proceed the upload as differential upload.<p>Previous API:<ul><li>none</li></ul>Next API:<ul><li>none</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Diff File Status Manifest</li></ul>",
        "operationId": "getMostCurrentBuild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "description": "appId",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12153</td><td>Latest build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/startzsyncfileupload/{fileHash}": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Start ZsyncFile Upload v3",
        "description": "This API is used to start zsync control file upload, which in turn will respond with presigned url for the upload target.<p>Mandatory fields for body: sourceBuildId, destinationBuildId, destinationFilePath, destinationFileChecksum, binaryUpload{contentMd5, contentLength, hash}Previous API:<ul><li>/v3/prezsyncupload</li></ul>Next API:<ul><li>/v3/commitzsyncfileupload/{buildId}/{hash}</li><li>/v3/commitzsyncfileupload/{buildId}/{hash}/{blockSize} to also specify the blocksize</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: upload data</li></ul>",
        "operationId": "startZsyncFileUpload_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileHash",
            "in": "path",
            "description": "Hash of the original file (not the zsync file)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "zsyncDiffRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZsyncDiffRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadSummary"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12173</td><td>Upload with hash [{hash}] already complete</td></tr><tr><td>12176</td><td>Upload with hash [{hash}] hasn't yet committed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/v3/diff/status/{sourceBuildId}/{destinationBuildId}/{destinationFilePath}": {
      "get": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Get diff status manifest",
        "description": "This API is used to get diff status manifests.<p>Previous API:<ul><li>none</li></ul>Next API:<ul><li>none</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Diff File Status Manifest</li></ul>",
        "operationId": "getDiffStatusOfFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "description": "SourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "name": "destinationBuildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destinationFilePath",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FileDiffingStatus"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12152</td><td>Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}] for path [{destinationFilePath}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/drmlicense/encrypt": {
      "get": {
        "tags": [
          "DRM"
        ],
        "summary": "DRM License Encryption",
        "description": "This API is used to get encrypted userId and machineId for entitled user.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: data field containing encrypted userId and machineId separated by comma</li></ul>",
        "operationId": "license",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "App Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "machineId",
            "in": "query",
            "description": "Machine Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EncryptedIdentity"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12124</td><td>User exceed DRM activation's daily maximum limit</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/drmlicense/retrievePublicKey": {
      "get": {
        "tags": [
          "DRM"
        ],
        "summary": "Retrieve Public Key",
        "description": "This API is used to get public key.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: url to download the key</li></ul>",
        "operationId": "retrieveKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublicKeyPresignedUrl"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/listenPatchStatus": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Listen patch status",
        "description": "This API is used to listen patch status from source file and missing bytes file to destination file.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: diff status</li></ul>",
        "operationId": "listenPatchStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FileDiffingStatus"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12151</td><td>Message queue not found for source build [{sourceBuildId}] to [{destinationBuildId}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/listenDiffStatus": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Listen diff status",
        "description": "This API is used to listen diff status.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: diff status</li></ul>",
        "operationId": "listenDiffStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FileDiffingStatus"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12151</td><td>Message queue not found for source build [{sourceBuildId}] to [{destinationBuildId}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/patch/send": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Trigger patch request message",
        "description": "This API is used to send patch request to MQ.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: diff status</li></ul>",
        "operationId": "sendPatchRequestMessage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/diff/send": {
      "post": {
        "tags": [
          "Uploader V3"
        ],
        "summary": "Trigger diff request message",
        "description": "This API is used to send diff request to MQ.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=1 (CREATE)</li><li><i>Returns</i>: diff status</li></ul>",
        "operationId": "sendDiffRequestMessage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiffPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/gdpr/retrieve": {
      "get": {
        "tags": [
          "GDPR"
        ],
        "summary": "GDPR Compliant - Retrieve",
        "description": "This API is used to get all stored data that relates to supplied machineId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: list of data related to machineId</li></ul>",
        "operationId": "gdprRetrievePii",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildInfoPII"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12146</td><td>Record with userId [{userId}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/gdpr/remove": {
      "delete": {
        "tags": [
          "GDPR"
        ],
        "summary": "GDPR Compliant - Delete",
        "description": "This API is used to remove all stored data that relates to supplied machineId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=8 (DELETE)</li><li><i>Returns</i>: list of data related to machineId</li></ul>",
        "operationId": "gdprRemovePii",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildInfoPII"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12146</td><td>Record with userId [{userId}] not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/builds/{buildId}/blocks/urls": {
      "post": {
        "tags": [
          "Downloader"
        ],
        "summary": "Generate Block Download URLs",
        "description": "This API is used to Generate Download URLs for the requested blocks inside the specified buildId.<br/>The download URL generation may returns Signed URL or Public URL, depends on service configurations.<br/>Before processing the URL generation, it will validate the user entitlement first, if not entitled then the request will be refused.<br/><br/>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: Block Download URLs</li></ul>",
        "operationId": "generateBlocksDownloadUrls",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "description": "Build ID of the blocks",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrlsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockDownloadUrls"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12149</td><td>File with uuid [{uuid}] not found in sourceBuildId [{buildId}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>Validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/bulkCheckLatest": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "Check latest build existence",
        "description": "This API is used to check whether supplied list of appId has valid buildmanifest and at  least one of its build set as latest.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: list of build availability</li></ul>",
        "operationId": "checkLatestBuildExistence",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildAvailability"
              }
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/updategame/{appId}/{version}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "<s>Update game</s>",
        "description": "This API is used to get build manifest that contains file difference between requested version and release version. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: build manifest</li></ul>",
        "operationId": "updateGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12143</td><td>Base version build not found</td></tr><tr><td>12144</td><td>Release version build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/public/namespaces/{namespace}/v2/updategame/{appId}/{version}/{platformId}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "Update game v2",
        "description": "This API is used to get build manifest. The binary diff will be calculated in the client side, while obsolete file list will be generated by server side.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: build manifest</li></ul>",
        "operationId": "updateGame_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12143</td><td>Base version build not found</td></tr><tr><td>12144</td><td>Release version build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/updategame/builds/{buildId}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "<s>Update game</s>",
        "description": "This API is used to get build manifest of release version of the application. Supply it with source buildId and BuildInfo will output release build and generate chunks difference and obsolete files list between two version. Only works for builds uploaded with BuildInfo v1 [DEPRECATED}<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: build manifest</li></ul>",
        "operationId": "updateGame_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12143</td><td>Base version build not found</td></tr><tr><td>12144</td><td>Release version build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/public/namespaces/{namespace}/availablebuilds/{appId}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "Simple build manifest",
        "description": "This API is used to get simple build manifest that contains list of current build in various platform.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: build manifest</li></ul>",
        "operationId": "getSimpleManifest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasicBuildManifest"
              }
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/diff/{sourceBuildId}/{destinationBuildId}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "Get Diff Status from Two Builds",
        "description": "This API fetch the diff status between two builds. The diff generated by diff wrapper and saved in the database. Return 404 if no diff found.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: Simple diff status containing where to fetch diff manifest</li></ul>",
        "operationId": "fetchDiffStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destinationBuildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DiffStatusReport"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12148</td><td>Diff status not found for sourceBuildId [{sourceBuildId}] to destinationBuildId [{destinationBuildId}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/versionHistory": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "Get version history",
        "description": "This API is used to get version history.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: version chain from specified build</li></ul>",
        "operationId": "versionHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "AppId",
            "required": true,
            "type": "string"
          },
          {
            "name": "comparedBuildId",
            "in": "query",
            "description": "BuildId to compare",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VersionChain"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr><tr><td>12145</td><td>Version history not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/updategame/{appId}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "<s>Download game</s>",
        "description": "This API is used to get build manifest of release version of the application. [DEPRECATED]<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: build manifest</li></ul>",
        "operationId": "initialUpdateGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12143</td><td>Base version build not found</td></tr><tr><td>12144</td><td>Release version build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "deprecated": true
      }
    },
    "/public/namespaces/{namespace}/v2/updategame/{appId}/{platformId}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "Download game v2",
        "description": "This API is used to get build manifest of release version of the application.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: build manifest</li></ul>",
        "operationId": "initialUpdateGame_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "platformId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12123</td><td>Platform id [{platformId}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12144</td><td>Release version build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/v2/updategame/builds/{buildId}": {
      "get": {
        "tags": [
          "Downloader"
        ],
        "summary": "Update game v2",
        "description": "This API is used to get build manifest of release version of the application. Supply it with source buildId and BuildInfo will output release build and obsolete files list between two version. Only works for builds uploaded with BuildInfo v2<p>Other detail info: <ul><li><i>Required permission</i>: login user</li><li><i>Returns</i>: build manifest</li></ul>",
        "operationId": "updateGameV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildManifest"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12103</td><td>User doesn't have entitlement for this application</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12143</td><td>Base version build not found</td></tr><tr><td>12144</td><td>Release version build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/diff/cache/source/{sourceBuildId}/dest/{destinationBuildId}": {
      "get": {
        "tags": [
          "Caching"
        ],
        "summary": "Retrieve Diff Cache",
        "description": "This API is used to retrieve detailed diff cache.<br/>The response will contains list of diff cache files along with its download url.<br/><br/>Other detail info: <ul><li><i>Required permission</i>: login user</li></ul>",
        "operationId": "retrieveCache",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceBuildId",
            "in": "path",
            "description": "SourceBuildId",
            "required": true,
            "type": "string"
          },
          {
            "name": "destinationBuildId",
            "in": "path",
            "description": "DestinationBuildId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDiffCacheResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12159</td><td>Cache not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/dlc/{buildId}/link": {
      "get": {
        "tags": [
          "DLC"
        ],
        "summary": "Retrieve DLC Link",
        "description": "This API is used to retrieve DLC versions against the game version.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li></ul>",
        "operationId": "retrieveDependencies_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "description": "Build Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDependencyLinkResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12157</td><td>Dependency link not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/public/namespaces/{namespace}/apps/latest/byDLCAppId/{dlcAppId}": {
      "get": {
        "tags": [
          "DLC"
        ],
        "summary": "Retrieve DLC by DLC AppId",
        "description": "Retrieve the list of DLC available on specific game. Use DLC's appId to query.<p>Other detail info: <ul><li><i>Returns</i>: appId of game and list of its builds by platformId</li></ul>",
        "operationId": "latestBaseGameByDLC",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "dlcAppId",
            "in": "path",
            "description": "DLC AppId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetrieveBaseGameResponse"
              }
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12135</td><td>Invalid DLC with id [{id}]. It might have no link to any game. Check the gameAppId value</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12141</td><td>Build not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/dlcs/latest/byGameAppId/{appId}": {
      "get": {
        "tags": [
          "DLC"
        ],
        "summary": "Retrieve DLC by Game AppId",
        "description": "Retrieve the list of DLC available on specific game. Use game's appId to query.<p>Other detail info: <ul><li><i>Returns</i>: list of DLC</li></ul>",
        "operationId": "latestDLCByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "description": "Base Game App Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetrieveLatestDLCResponse"
              }
            }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/dlc/{buildId}/compatibility": {
      "get": {
        "tags": [
          "DLC"
        ],
        "summary": "Retrieve DLC Compatibility",
        "description": "This API is used to retrieve compatibility of specific DLC versions against the game version.<p>Other detail info: <ul><li><i>Required permission</i>: login user</li></ul>",
        "operationId": "retrieveCompatibility",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildId",
            "in": "path",
            "description": "Build Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveDependencyCompatibilityResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12158</td><td>Dependency compatibility not found for input buildId [{id}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/cleanerConfigurations": {
      "get": {
        "tags": [
          "Utility"
        ],
        "summary": "Get Buildinfo Cleaner Configurations",
        "description": "This API is used to retrieve grace period of buildinfo cleaner.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Buildinfo Grace Period Time</li></ul>",
        "operationId": "getBuildInfoCleanerConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CleanerConfigObject"
            }
          }
        }
      }
    },
    "/admin/namespaces/{namespace}/ping/differ": {
      "get": {
        "tags": [
          "Utility"
        ],
        "summary": "Ping Differ",
        "description": "This API is used to manually checks the readiness of differ.<p>Other detail info: <ul><li><i>Returns</i>: ping result</li></ul>",
        "operationId": "pingDiffer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PingResultResponse"
            }
          }
        }
      }
    },
    "/admin/namespaces/{namespace}/configurations": {
      "get": {
        "tags": [
          "Utility"
        ],
        "summary": "Get Configurations",
        "description": "This API is used to get the BuildInfo configurations.<br/><br/><b>1. Entitlement Validation</b><br/>Entitlement Validation is utilized in download and update game/application flow.<br/>It will check whether the user is entitled for the game/application or not through Justice Entitlement Service.<br/>If user is entitled, it will process the request, otherwise the request will rejected.<br/><br/>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: Configuration Info</li></ul>",
        "operationId": "getConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Utility"
        ],
        "summary": "Update Configurations",
        "description": "This API is used to update the BuildInfo configurations.<br/>This API support update configuration based on given data. Single request can update single field or multi fields.<br/><br/><b>1. Entitlement Validation</b><br/>Entitlement Validation is utilized in download and update game/application flow.<br/>It will check whether the user is entitled for the game/application or not through Justice Entitlement Service.<br/>If user is entitled, it will process the request, otherwise the request will rejected.<br/><br/>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: Configuration Info</li></ul>",
        "operationId": "updateConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/admin/namespaces/{namespace}/validateSDKConfig": {
      "get": {
        "tags": [
          "Utility"
        ],
        "summary": "Check validity of clientId and redirectUri from SDK Config",
        "description": "This API is used to validate clientId and redirectUri from SDK Config.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:BUILDINFO\", action=2 (READ)</li><li><i>Returns</i>: Basic Build Manifest</li></ul>",
        "operationId": "getBuildByNamespace_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "ClientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "description": "RedirectUri",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ClientPayload"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12131</td><td>SDK Config with clientId [{clientId}] and redirectUri [{redirectUri}] is invalid</td></tr><tr><td>12134</td><td>Mismatch redirect uri [{redirectUri}]. Check your client's redirect uri</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>12156</td><td>Client with clientId [{clientId}] can't be found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "BlockManifest": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "checksum": {
          "type": "string"
        },
        "blockSize": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BuildManifest": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "appSize": {
          "type": "integer",
          "format": "int64"
        },
        "baseUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "releaseNoteUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultLaunchProfile": {
          "$ref": "#/definitions/DefaultLaunchProfile"
        },
        "buildInfoVersion": {
          "type": "string"
        },
        "gameAppId": {
          "type": "string"
        },
        "appType": {
          "type": "string"
        },
        "launchArguments": {
          "type": "string"
        },
        "displayVersion": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileManifest"
          }
        },
        "obsoleteFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObsoleteFileManifest"
          }
        }
      }
    },
    "DefaultLaunchProfile": {
      "type": "object",
      "properties": {
        "defaultEntryPoint": {
          "type": "string"
        },
        "defaultClientId": {
          "type": "string"
        },
        "defaultRedirectURI": {
          "type": "string"
        },
        "defaultNamespace": {
          "type": "string"
        }
      }
    },
    "FileManifest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "filesize": {
          "type": "integer",
          "format": "int64"
        },
        "uuid": {
          "type": "string"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlockManifest"
          }
        },
        "zsyncFile": {
          "$ref": "#/definitions/ZsyncFileManifest"
        },
        "checksum": {
          "type": "string"
        },
        "uploadStatus": {
          "type": "string"
        }
      }
    },
    "ObsoleteFileManifest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "ZsyncFileManifest": {
      "type": "object",
      "properties": {
        "zsyncVersion": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "modifiedTime": {
          "type": "string",
          "format": "date-time"
        },
        "blockSize": {
          "type": "integer",
          "format": "int32"
        },
        "length": {
          "type": "integer",
          "format": "int64"
        },
        "seqMatches": {
          "type": "integer",
          "format": "int32"
        },
        "weaksumLength": {
          "type": "integer",
          "format": "int32"
        },
        "strongsumLength": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        },
        "fileChecksum": {
          "type": "string"
        },
        "checksum": {
          "type": "string"
        },
        "uploadStatus": {
          "type": "string"
        }
      }
    },
    "ErrorEntity": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "numeric error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "error message"
        },
        "messageVariables": {
          "type": "object",
          "description": "message variables",
          "additionalProperties": {
            "type": "string"
          }
        },
        "devStackTrace": {
          "type": "string",
          "description": "internal server error stack trace in configured environment"
        }
      }
    },
    "BlockData": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "checksum": {
          "type": "string"
        },
        "blockSize": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BuildIdVersion": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "launchArguments": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "displayVersion": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time"
        },
        "updatedTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BuildIdManifest": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        }
      }
    },
    "FieldValidationError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorField": {
          "type": "string"
        },
        "errorValue": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorEntity": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "numeric error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "error message"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValidationError"
          }
        }
      }
    },
    "BuildDeletionData": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "deletionStatus": {
          "type": "string"
        },
        "displayVersion": {
          "type": "string"
        },
        "requestedTime": {
          "type": "string",
          "format": "date-time"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BasicBuildManifest": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "appSize": {
          "type": "integer",
          "format": "int64"
        },
        "displayVersion": {
          "type": "string"
        }
      }
    },
    "UploadSummary": {
      "type": "object",
      "properties": {
        "presignedUrl": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "BinaryUpload": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "contentMD5": {
          "type": "string"
        },
        "contentLength": {
          "type": "integer",
          "format": "int64"
        },
        "blockSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CommitDiffCacheRequest": {
      "type": "object",
      "properties": {
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        }
      }
    },
    "CreateDiffCacheRequest": {
      "type": "object",
      "properties": {
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "diffFile": {
          "type": "string"
        }
      }
    },
    "CalculateDiffCacheRequest": {
      "type": "object",
      "properties": {
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        }
      }
    },
    "DependencyObject": {
      "type": "object",
      "properties": {
        "dependencyAppId": {
          "type": "string"
        },
        "compatibleBuildId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RetrieveDependencyLinkResponse": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyObject"
          }
        }
      }
    },
    "CreateDependencyLinkRequest": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyObject"
          }
        }
      }
    },
    "BlockDownloadUrls": {
      "type": "object",
      "required": [
        "urls"
      ],
      "properties": {
        "urls": {
          "type": "object",
          "description": "Map of block download url <uuid, url>",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "A DTO object for block download urls"
    },
    "BlockDownloadUrlsRequest": {
      "type": "object",
      "required": [
        "uuids"
      ],
      "properties": {
        "uuids": {
          "type": "array",
          "description": "List of block uuid",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "A DTO object for creating block download urls"
    },
    "MultipartUploadSummary": {
      "type": "object",
      "required": [
        "parts",
        "uuid"
      ],
      "properties": {
        "uuid": {
          "type": "string",
          "description": "block uuid"
        },
        "parts": {
          "type": "array",
          "description": "List of Parts contains presigned url for part upload, make sure to upload the parts in-order",
          "items": {
            "$ref": "#/definitions/MultipartUploadUrl"
          }
        }
      }
    },
    "MultipartUploadUrl": {
      "type": "object",
      "required": [
        "partNumber",
        "presignedUrl"
      ],
      "properties": {
        "partNumber": {
          "type": "integer",
          "format": "int32",
          "description": "part number"
        },
        "presignedUrl": {
          "type": "string",
          "description": "presigned url for part upload"
        }
      }
    },
    "StartMultipartUploadRequest": {
      "type": "object",
      "required": [
        "contentLength",
        "hash",
        "partSize"
      ],
      "properties": {
        "hash": {
          "type": "string",
          "description": "file checksum"
        },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "description": "file size"
        },
        "partSize": {
          "type": "integer",
          "format": "int32",
          "description": "part size of multipart upload, the service will returns N signed urls based on that size"
        }
      }
    },
    "CommitMultipartUploadRequest": {
      "type": "object",
      "required": [
        "parts"
      ],
      "properties": {
        "parts": {
          "type": "array",
          "description": "list of uploaded part in-order",
          "items": {
            "$ref": "#/definitions/MultipartUploadedPart"
          }
        }
      }
    },
    "MultipartUploadedPart": {
      "type": "object",
      "required": [
        "etag",
        "partNumber"
      ],
      "properties": {
        "partNumber": {
          "type": "integer",
          "format": "int32",
          "description": "upload part number, should >1"
        },
        "etag": {
          "type": "string",
          "description": "upload etag"
        }
      }
    },
    "ReleaseNoteDTO": {
      "type": "object",
      "required": [
        "appId",
        "baseUrls",
        "namespace",
        "platformId",
        "releaseNoteLocalizations",
        "version"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "description": "namespace"
        },
        "appId": {
          "type": "string",
          "description": "application id"
        },
        "platformId": {
          "type": "string",
          "description": "platform id"
        },
        "version": {
          "type": "string",
          "description": "version"
        },
        "baseUrls": {
          "type": "array",
          "description": "list of base url for release note file",
          "items": {
            "type": "string"
          }
        },
        "releaseNoteLocalizations": {
          "type": "array",
          "description": "list of release note's localizations",
          "items": {
            "$ref": "#/definitions/ReleaseNoteLocalizationDTO"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "A DTO object for release note manifest"
    },
    "ReleaseNoteLocalizationDTO": {
      "type": "object",
      "required": [
        "lang",
        "uuid"
      ],
      "properties": {
        "lang": {
          "type": "string",
          "description": "localization language"
        },
        "uuid": {
          "type": "string",
          "description": "localization file"
        }
      },
      "description": "A DTO object for release note localization"
    },
    "ReleaseNoteManifest": {
      "type": "object",
      "required": [
        "appId",
        "platformId",
        "releaseNoteLocalizations",
        "version"
      ],
      "properties": {
        "appId": {
          "type": "string",
          "description": "application id"
        },
        "platformId": {
          "type": "string",
          "description": "platform id"
        },
        "version": {
          "type": "string",
          "description": "version"
        },
        "releaseNoteLocalizations": {
          "type": "array",
          "description": "list of release note's localizations",
          "items": {
            "$ref": "#/definitions/ReleaseNoteLocalizationDTO"
          }
        }
      },
      "description": "A DTO object for creating/updating release note manifest"
    },
    "UploadBuildManifest": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "gameAppId": {
          "type": "string"
        },
        "appType": {
          "type": "string"
        },
        "defaultLaunchProfile": {
          "$ref": "#/definitions/DefaultLaunchProfile"
        },
        "launchArguments": {
          "type": "string"
        },
        "displayVersion": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileManifest"
          }
        }
      }
    },
    "UpdateBuildMetadataRequest": {
      "type": "object",
      "properties": {
        "launchArguments": {
          "type": "string"
        }
      }
    },
    "DiffPatchRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "destinationControlFileUuid": {
          "type": "string"
        },
        "destinationControlFileChecksum": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        },
        "destinationFileChecksum": {
          "type": "string"
        },
        "requestType": {
          "type": "integer",
          "format": "int32"
        },
        "destinationMissingBytesFileUuid": {
          "type": "string"
        },
        "topicArn": {
          "type": "string"
        },
        "sourceFileUuid": {
          "type": "string"
        },
        "sourceFileChecksum": {
          "type": "string"
        },
        "destinationMissingBytesFileChecksum": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "diffFileUrl": {
          "type": "string"
        }
      }
    },
    "DifferentialBuildManifest": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "appSize": {
          "type": "integer",
          "format": "int64"
        },
        "baseUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "releaseNoteUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultLaunchProfile": {
          "$ref": "#/definitions/DefaultLaunchProfile"
        },
        "buildInfoVersion": {
          "type": "string"
        },
        "displayVersion": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DifferentialFileManifest"
          }
        },
        "obsoleteFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObsoleteFileManifest"
          }
        }
      }
    },
    "DifferentialFileManifest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "filesize": {
          "type": "integer",
          "format": "int64"
        },
        "uuid": {
          "type": "string"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlockManifest"
          }
        },
        "zsyncFile": {
          "$ref": "#/definitions/ZsyncFileManifest"
        },
        "checksum": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UploadModeCheck": {
      "type": "object",
      "properties": {
        "buildManifest": {
          "$ref": "#/definitions/BuildManifest"
        },
        "uploadDifferentialMode": {
          "type": "boolean"
        }
      }
    },
    "DifferentialUploadSummary": {
      "type": "object",
      "properties": {
        "presignedUrl": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "destinationFileUuid": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "diffFileUrl": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PreCheckUploadRequest": {
      "type": "object",
      "properties": {
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        }
      }
    },
    "ZsyncDiffRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "destinationControlFileUuid": {
          "type": "string"
        },
        "destinationControlFileChecksum": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        },
        "destinationFileChecksum": {
          "type": "string"
        },
        "requestType": {
          "type": "integer",
          "format": "int32"
        },
        "destinationMissingBytesFileUuid": {
          "type": "string"
        },
        "topicArn": {
          "type": "string"
        },
        "sourceFileUuid": {
          "type": "string"
        },
        "sourceFileChecksum": {
          "type": "string"
        },
        "destinationMissingBytesFileChecksum": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "diffFileUrl": {
          "type": "string"
        },
        "binaryUpload": {
          "$ref": "#/definitions/BinaryUpload"
        }
      }
    },
    "FileDiffingStatus": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "destinationFilePath": {
          "type": "string"
        },
        "sourceFileChecksum": {
          "type": "string"
        },
        "destinationFileChecksum": {
          "type": "string"
        },
        "destinationMissingBytesFileUuid": {
          "type": "string"
        },
        "destinationControlFileUuid": {
          "type": "string"
        },
        "diffFileUuid": {
          "type": "string"
        },
        "destinationFileUuid": {
          "type": "string"
        },
        "retry": {
          "type": "boolean"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "diffFileUrl": {
          "type": "string"
        },
        "preDiffStatus": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EncryptedIdentity": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      }
    },
    "PublicKeyPresignedUrl": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "BuildInfoPII": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "machineId": {
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/MachineIdentity"
        }
      }
    },
    "MachineIdentity": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "machineId": {
          "type": "string"
        },
        "requestDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BuildAvailability": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        }
      }
    },
    "DiffStatusReport": {
      "type": "object",
      "properties": {
        "sourceBuildId": {
          "type": "string"
        },
        "destinationBuildId": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        },
        "baseUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VersionChain": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "comparedBuildId": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "previousVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionNode"
          }
        },
        "nextVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionNode"
          }
        }
      }
    },
    "VersionNode": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "distance": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DiffCacheObject": {
      "type": "object",
      "required": [
        "diffFile",
        "filePath",
        "url"
      ],
      "properties": {
        "filePath": {
          "type": "string",
          "description": "file path"
        },
        "diffFile": {
          "type": "string",
          "description": "diff file name"
        },
        "url": {
          "type": "string",
          "description": "url for the diff file"
        }
      },
      "description": "A DTO object for single diff result"
    },
    "RetrieveDiffCacheResponse": {
      "type": "object",
      "required": [
        "baseUrls",
        "diffCaches",
        "summaryFile"
      ],
      "properties": {
        "summaryFile": {
          "type": "string",
          "description": "summary file that contains all diff cache result"
        },
        "baseUrls": {
          "type": "array",
          "description": "base url for summary file and diff cache files",
          "items": {
            "type": "string"
          }
        },
        "diffCaches": {
          "type": "array",
          "description": "list of diff cache files",
          "items": {
            "$ref": "#/definitions/DiffCacheObject"
          }
        }
      },
      "description": "A DTO object for diff cache response"
    },
    "RetrieveBaseGameResponse": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "baseGames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleLatestBaseGame"
          }
        }
      }
    },
    "SimpleLatestBaseGame": {
      "type": "object",
      "properties": {
        "platformId": {
          "type": "string"
        },
        "latestBuildId": {
          "type": "string"
        },
        "latestVersion": {
          "type": "string"
        }
      }
    },
    "RetrieveLatestDLCResponse": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "CompatibilityObject": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "RetrieveDependencyCompatibilityResponse": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "buildId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "compatibilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompatibilityObject"
          }
        }
      }
    },
    "CleanerConfigObject": {
      "type": "object",
      "properties": {
        "graceTime": {
          "type": "string"
        }
      }
    },
    "PingResultResponse": {
      "type": "object",
      "properties": {
        "resp": {
          "type": "string"
        }
      }
    },
    "ConfigurationInfo": {
      "type": "object",
      "required": [
        "entitlementValidation"
      ],
      "properties": {
        "entitlementValidation": {
          "type": "boolean",
          "description": "Entitlement validation status, true means the entitlement validation is activated in download build flow"
        }
      }
    },
    "ClientPayload": {
      "type": "object",
      "properties": {
        "Namespace": {
          "type": "string",
          "readOnly": true
        },
        "ClientId": {
          "type": "string",
          "readOnly": true
        },
        "RedirectUri": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ConfigurationUpdate": {
      "type": "object",
      "properties": {
        "entitlementValidation": {
          "type": "boolean",
          "description": "Entitlement validation status, true means the entitlement validation is activated in download build flow"
        }
      },
      "description": "A DTO for update the configuration"
    }
  }
}