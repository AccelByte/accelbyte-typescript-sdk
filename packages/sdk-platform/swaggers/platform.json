{
  "swagger": "2.0",
  "info": {
    "description": "Justice Platform Service",
    "version": "4.29.0",
    "title": "justice-platform-service",
    "contact": { "name": "Engineering Team at AccelByte", "url": "https://accelbyte.io", "email": "engineering@accelbyte.io" }
  },
  "basePath": "/platform",
  "tags": [
    { "name": "Anonymization" },
    { "name": "Campaign" },
    { "name": "KeyGroup" },
    { "name": "Ticket" },
    { "name": "Item" },
    { "name": "CatalogChanges" },
    { "name": "Category" },
    { "name": "Section" },
    { "name": "Store" },
    { "name": "View" },
    { "name": "ServicePluginConfig" },
    { "name": "Currency" },
    { "name": "Entitlement" },
    { "name": "Fulfillment" },
    { "name": "FulfillmentScript" },
    { "name": "Achievement(Platform)" },
    { "name": "DLC" },
    { "name": "IAP" },
    { "name": "Session(Platform)" },
    { "name": "Invoice" },
    { "name": "Order" },
    { "name": "Order(Dedicated)" },
    { "name": "PaymentCallbackConfig" },
    { "name": "PaymentConfig" },
    { "name": "Payment" },
    { "name": "Payment(Dedicated)" },
    { "name": "PaymentAccount" },
    { "name": "PaymentStation" },
    { "name": "Revocation" },
    { "name": "Reward" },
    { "name": "Subscription" },
    { "name": "Wallet" },
    { "name": "Wallet(Deprecated)" }
  ],
  "paths": {
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/campaign": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "Anonymize campaign",
        "description": "Anonymize campaign. At current it will only anonymize redeem history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeCampaign",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/campaigns/{campaignId}": {
      "get": {
        "tags": ["Campaign"],
        "summary": "Get campaign",
        "description": "Get campaign info.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=2 (READ)</li><li><i>Returns</i>: campaign info</li></ul>",
        "operationId": "getCampaign",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CampaignInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "2" }
      },
      "put": {
        "tags": ["Campaign"],
        "summary": "Update campaign",
        "description": "Update campaign.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=4 (UPDATE)</li><li><i>Returns</i>: updated campaign</li></ul>",
        "operationId": "updateCampaign",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CampaignUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CampaignInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37171</td><td>Campaign [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/campaigns": {
      "get": {
        "tags": ["Campaign"],
        "summary": "Query campaigns",
        "description": "Query campaigns, if name is presented, it's fuzzy match.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=2 (READ) (READ)</li><li><i>Returns</i>: slice of campaigns</li></ul>",
        "operationId": "queryCampaigns",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "name", "in": "query", "required": false, "type": "string" },
          { "name": "tag", "in": "query", "required": false, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CampaignPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "2" }
      },
      "post": {
        "tags": ["Campaign"],
        "summary": "Create campaign",
        "description": "Create campaign.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=1 (CREATE)</li><li><i>Returns</i>: created campaign</li></ul>",
        "operationId": "createCampaign",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CampaignCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/CampaignInfo" } },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37171</td><td>Campaign [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/campaigns/{campaignId}/dynamic": {
      "get": {
        "tags": ["Campaign"],
        "summary": "Get campaign dynamic",
        "description": "Get campaign dynamic.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=2 (READ)</li><li><i>Returns</i>: campaign dynamic</li></ul>",
        "operationId": "getCampaignDynamic",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CampaignDynamicInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/codes/{code}/enable": {
      "put": {
        "tags": ["Campaign"],
        "summary": "Enable code",
        "description": "Enable code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=4 (UPDATE)</li><li><i>Returns</i>: enabled code</li></ul>",
        "operationId": "enableCode",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "code", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CodeInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/history": {
      "get": {
        "tags": ["Campaign"],
        "summary": "Query redeem history",
        "description": "Query redeem history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=2 (READ)</li><li><i>Returns</i>: slice of redeem history</li></ul>",
        "operationId": "queryRedeemHistory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "query", "required": false, "type": "string" },
          { "name": "code", "in": "query", "required": false, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RedeemHistoryPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/enable/bulk": {
      "put": {
        "tags": ["Campaign"],
        "summary": "Bulk enable codes",
        "description": "Bulk enable campaign codes.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=4 (UPDATE)</li><li><i>Returns</i>: the number of code actually enabled</li></ul>",
        "operationId": "bulkEnableCodes",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" },
          {
            "name": "batchNo",
            "in": "query",
            "description": "if not present will match all except 0",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkOperationResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/codes/campaigns/{campaignId}": {
      "get": {
        "tags": ["Campaign"],
        "summary": "Query codes",
        "description": "Query campaign codes.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=2 (READ) (READ)</li><li><i>Returns</i>: list of codes</li></ul>",
        "operationId": "queryCodes",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" },
          { "name": "batchNo", "in": "query", "required": false, "type": "integer", "format": "int32" },
          { "name": "code", "in": "query", "required": false, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CodeInfoPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "2" }
      },
      "post": {
        "tags": ["Campaign"],
        "summary": "Create campaign codes",
        "description": "This API is used to create campaign codes, it will increase the batch No. based on last creation.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=1 (CREATE)<li><i>Returns</i>: number of codes created</li></ul>",
        "operationId": "createCodes",
        "consumes": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CodeCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/CodeCreateResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/codes.csv": {
      "get": {
        "tags": ["Campaign"],
        "summary": "Download codes",
        "description": "Download all or a batch of campaign's codes as a csv file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=2 (READ)</li><li><i>Returns</i>: codes csv file</li></ul>",
        "operationId": "download",
        "produces": ["text/csv"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" },
          { "name": "batchNo", "in": "query", "required": false, "type": "integer", "format": "int32" }
        ],
        "responses": { "200": { "description": "Successful operation", "schema": { "type": "file" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/codes/{code}/disable": {
      "put": {
        "tags": ["Campaign"],
        "summary": "Disable code",
        "description": "Disable code.<p>Disable an active code, the code can't be disabled if it has already been redeemed.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=4 (UPDATE)</li><li><i>Returns</i>: disabled code</li></ul>",
        "operationId": "disableCode",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "code", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CodeInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr><tr><td>37176</td><td>Code [{code}] has been redeemed in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/codes/{code}": {
      "get": {
        "tags": ["Campaign"],
        "summary": "Get code info",
        "description": "Get campaign code, it will check code whether available to redeem if redeemable true.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=2 (READ) (READ)</li><li><i>Returns</i>: code info</li></ul>",
        "operationId": "getCode",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "code", "in": "path", "required": true, "type": "string" },
          { "name": "redeemable", "in": "query", "required": false, "type": "boolean", "default": false }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CodeInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/codes/campaigns/{campaignId}/disable/bulk": {
      "put": {
        "tags": ["Campaign"],
        "summary": "Bulk disable codes",
        "description": "Bulk disable codes.<p>Bulk disable campaign codes, all matched codes will be disabled except those have already been redeemed.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CAMPAIGN\", action=4 (UPDATE)</li><li><i>Returns</i>: the number of code actually disabled</li></ul>",
        "operationId": "bulkDisableCodes",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "campaignId", "in": "path", "required": true, "type": "string" },
          {
            "name": "batchNo",
            "in": "query",
            "description": "if not present will match all except 0",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkOperationResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/keygroups/{keyGroupId}": {
      "get": {
        "tags": ["KeyGroup"],
        "summary": "Get key group",
        "description": "Get key group.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=2 (READ)</li><li><i>Returns</i>: key group info</li></ul>",
        "operationId": "getKeyGroup",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "keyGroupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/KeyGroupInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "2" }
      },
      "put": {
        "tags": ["KeyGroup"],
        "summary": "Update key group",
        "description": "Update key group.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=4 (UPDATE)</li><li><i>Returns</i>: updated key group</li></ul>",
        "operationId": "updateKeyGroup",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "keyGroupId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/KeyGroupUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/KeyGroupInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37271</td><td>Key group [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/keygroups/{keyGroupId}/keys": {
      "get": {
        "tags": ["KeyGroup"],
        "summary": "List keys of a key group",
        "description": "This API is used to list keys of a key group.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=2 (READ)</li><li><i>Returns</i>: keys</li></ul>",
        "operationId": "listKeys",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "keyGroupId", "in": "path", "required": true, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["ACTIVE", "ACQUIRED"] },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/KeyPagingSliceResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "2" }
      },
      "post": {
        "tags": ["KeyGroup"],
        "summary": "Upload keys to key group",
        "description": "This API is used to upload keys with csv format to a key group.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=4 (UPDATE)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "uploadKeys",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "file", "in": "formData", "required": false, "type": "file" },
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "keyGroupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkOperationResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37221</td><td>Invalid key file</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/keygroups/{keyGroupId}/dynamic": {
      "get": {
        "tags": ["KeyGroup"],
        "summary": "Get key group dynamic",
        "description": "Get key group dynamic.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=2 (READ)</li><li><i>Returns</i>: key group info</li></ul>",
        "operationId": "getKeyGroupDynamic",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "keyGroupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/KeyGroupDynamicInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/keygroups": {
      "get": {
        "tags": ["KeyGroup"],
        "summary": "Query key groups",
        "description": "Query key groups, if name is presented, it's fuzzy match.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=2 (READ)</li><li><i>Returns</i>: slice of key group</li></ul>",
        "operationId": "queryKeyGroups",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "name", "in": "query", "required": false, "type": "string" },
          { "name": "tag", "in": "query", "required": false, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/KeyGroupPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "2" }
      },
      "post": {
        "tags": ["KeyGroup"],
        "summary": "Create key group",
        "description": "Create key group.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=1 (CREATE)</li><li><i>Returns</i>: created key group</li></ul>",
        "operationId": "createKeyGroup",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/KeyGroupCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/KeyGroupInfo" } },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37271</td><td>Key group [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/keygroups/byBoothName": {
      "get": {
        "tags": ["KeyGroup"],
        "summary": "Get key group by booth name",
        "description": "Get key group.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:KEYGROUP\", action=2 (READ)</li><li><i>Returns</i>: key group info</li></ul>",
        "operationId": "getKeyGroupByBoothName",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "boothName", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/KeyGroupInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/tickets/{boothName}/increment": {
      "put": {
        "tags": ["Ticket"],
        "summary": "Increase ticket sale",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> increase ticket(code/key) sale.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:TICKET\", action=4 (UPDATE)</li><li><i>Returns</i>: Ticket sale increment result</li></ul>",
        "operationId": "increaseTicketSale",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "boothName", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TicketSaleIncrementRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TicketSaleIncrementResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:TICKET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/tickets/{boothName}/id": {
      "get": {
        "tags": ["Ticket"],
        "summary": "Get ticket booth ID",
        "description": "Get ticket(code/key) booth ID.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:TICKET\", action=2 (READ)</li><li><i>Returns</i>: ticket booth id</li></ul>",
        "operationId": "getTicketBoothID",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "boothName", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TicketBoothID" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:TICKET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/tickets/{boothName}": {
      "get": {
        "tags": ["Ticket"],
        "summary": "Get ticket dynamic",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Get ticket(code/key) dynamic based on booth name.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:TICKET\", action=2 (READ)</li><li><i>Returns</i>: ticket dynamic</li></ul>",
        "operationId": "getTicketDynamic",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "boothName", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TicketDynamicInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:TICKET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/tickets/{boothName}/decrement": {
      "put": {
        "tags": ["Ticket"],
        "summary": "Decrease ticket sale",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Decrease ticket(code/key) sale if requested orderNo is already increased.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:TICKET\", action=4 (UPDATE)</li></ul>",
        "operationId": "decreaseTicketSale",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "boothName", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TicketSaleDecrementRequest" } }
        ],
        "responses": {
          "204": { "description": "Return item successfully" },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:TICKET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/redemption": {
      "post": {
        "tags": ["Campaign"],
        "summary": "Redeem code",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Redeem code. If the campaign which the code belongs to is INACTIVE, the code couldn't be redeemed even if its status is ACTIVE.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION\", action=1 (CREATE)</li><li><i>Returns</i>: Redeem result</li></ul>",
        "operationId": "applyUserRedemption",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/RedeemRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RedeemResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/tickets/{boothName}": {
      "post": {
        "tags": ["Ticket"],
        "summary": "Acquire ticket",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Acquire ticket(code/key) based on booth name.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET\", action=1 (CREATE)</li><li><i>Returns</i>: acquire result</li></ul>",
        "operationId": "acquireUserTicket",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "boothName", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TicketAcquireRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TicketAcquireResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37071</td><td>Insufficient ticket in booth [{boothName}] in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/app": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an app info",
        "description": "This API is used to get an app info.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: app data</li></ul>",
        "operationId": "getApp",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullAppInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      },
      "put": {
        "tags": ["Item"],
        "summary": "Update an app",
        "description": "This API is used to update an app.<p>An app update example:<p><pre><code>{\r\n  \"developer\": \"accelbyte\",\r\n  \"publisher\": \"accelbyte\",\r\n  \"websiteUrl\": \"http://accelbyte.io\",\r\n  \"forumUrl\": \"http://accelbyte.io\",\r\n  \"platforms\": \\[\"Windows(allowed values: Windows, MacOS, Linux, IOS, Android)\"\\],\r\n  \"platformRequirements\": \\{\r\n    \"Windows\": \\[\r\n      \\{\r\n        \"label\":\"minimum(can be minimum or recommended)\",\r\n        \"osVersion\":\"os version\",\r\n        \"processor\":\"processor\",\r\n        \"ram\":\"RAM\",\r\n        \"graphics\":\"graphics\",\r\n        \"directXVersion\":\"directXVersion\",\r\n        \"diskSpace\":\"diskSpace\",\r\n        \"soundCard\":\"soundCard\",\r\n        \"additionals\":\"additionals\"\r\n      \\}\r\n     \\]\r\n  \\},\r\n  \"carousel\": \\[\r\n    \\{\r\n      \"type\":\"image(allowed values: image, video)\",\r\n      \"videoSource\":\"generic(allowed values:generic, youtube, viemo)\",\r\n      \"url\":\"url\",\r\n      \"alt\":\"alternative url or text\",\r\n      \"thumbnailUrl\":\"thumbnail url\",\r\n      \"previewUrl\":\"preview url\",\r\n    \\}\r\n  \\],\r\n  \"localizations\": \\{\r\n    \"en\": \\{\r\n      \"slogan\":\"slogan\",\r\n      \"announcement\":\"announcement\",\r\n    \\}\r\n  \\},\r\n  \"primaryGenre\": \"Action\",\r\n  \"genres\": \\[\"Action\", \"Adventure\"\\],\r\n  \"players\": \\[\"Single\"\\],\r\n  \"releaseDate\": \"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated app data</li></ul>",
        "operationId": "updateApp",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AppUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullAppInfo" } },
          "404": {
            "description": "<table><tr><tdErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/publishSelected": {
      "put": {
        "tags": ["CatalogChanges"],
        "summary": "Publish selected unpublished changes",
        "description": "This API is used to publish selected unpublished changes.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: no content</li></ul>",
        "operationId": "publishSelected",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30375</td><td>Item id [{itemId}] of sku [{sku}] is duplicate with un-published deleted item in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/statistics": {
      "get": {
        "tags": ["CatalogChanges"],
        "summary": "Get catalog changes statistics",
        "description": "This API is used to query catalog changes statistics .<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: catalog changes statistics changes</li></ul>",
        "operationId": "getStatistic",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" },
          { "name": "action", "in": "query", "required": false, "type": "string", "enum": ["CREATE", "UPDATE", "DELETE"] },
          { "name": "type", "in": "query", "required": false, "type": "string", "enum": ["STORE", "CATEGORY", "ITEM", "VIEW", "SECTION"] },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "itemSku", "in": "query", "required": false, "type": "string" },
          {
            "name": "updatedAtStart",
            "in": "query",
            "description": "updated at start , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedAtEnd",
            "in": "query",
            "description": "updated at end , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CatalogChangeStatistics" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/selectAll": {
      "put": {
        "tags": ["CatalogChanges"],
        "summary": "Select all changes",
        "description": "Select all changes.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li></ul>",
        "operationId": "selectAllRecords",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/unselectAll": {
      "put": {
        "tags": ["CatalogChanges"],
        "summary": "Unselect all changes",
        "description": "Unselect all change.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li></ul>",
        "operationId": "unselectAllRecords",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/byCriteria": {
      "get": {
        "tags": ["CatalogChanges"],
        "summary": "Query catalog changes",
        "description": "This API is used to query changes .<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: the pagination of changes</li></ul>",
        "operationId": "queryChanges",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" },
          { "name": "action", "in": "query", "required": false, "type": "string", "enum": ["CREATE", "UPDATE", "DELETE"] },
          { "name": "type", "in": "query", "required": false, "type": "string", "enum": ["STORE", "CATEGORY", "ITEM", "VIEW", "SECTION"] },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "itemSku", "in": "query", "required": false, "type": "string" },
          { "name": "selected", "in": "query", "required": false, "type": "boolean" },
          {
            "name": "status",
            "in": "query",
            "description": "default is UNPUBLISHED",
            "required": false,
            "type": "string",
            "default": "UNPUBLISHED",
            "enum": ["UNPUBLISHED", "PUBLISHED"]
          },
          {
            "name": "updatedAtStart",
            "in": "query",
            "description": "updated at start , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedAtEnd",
            "in": "query",
            "description": "updated at end , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is updatedAt:desc, allow values: [createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc],and support sort group, eg: sortBy=title:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by title, make sure to include other sort such as sku or createdAt after the first sort, eg: title:asc,updatedAt:desc",
            "required": false,
            "type": "string",
            "default": "updatedAt:desc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CatalogChangePagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/{changeId}/select": {
      "put": {
        "tags": ["CatalogChanges"],
        "summary": "Select a change",
        "description": "Select a change, it will be included when partial publish.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li></ul>",
        "operationId": "selectRecord",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" },
          { "name": "changeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30041</td><td>Changelog [{changelogId}] doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/{changeId}/unselect": {
      "put": {
        "tags": ["CatalogChanges"],
        "summary": "Unselect a change",
        "description": "Unselect a change, it will not be included when partial publish.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li></ul>",
        "operationId": "unselectRecord",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" },
          { "name": "changeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30041</td><td>Changelog [{changelogId}] doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30071</td><td>Can't unselect item [{itemId}] when the item which is bound to is already selected in namespace [{namespace}]</td></tr><tr><td>30072</td><td>Can't unselect category [{categoryPath}] when item with this category is already selected in namespace [{namespace}]</td></tr><tr><td>30073</td><td>Can't unselect store change</td></tr><tr><td>30074</td><td>Can't unselect subscription's content [{itemId}] when subscription is already selected in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/catalogChanges/publishAll": {
      "put": {
        "tags": ["CatalogChanges"],
        "summary": "Publish all unpublished changes",
        "description": "This API is used to publish all unpublished changes.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: no content</li></ul>",
        "operationId": "publishAll",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/categories/{categoryPath}": {
      "get": {
        "tags": ["Category"],
        "summary": "Get category",
        "description": "This API is used to get category by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: category data</li></ul>",
        "operationId": "getCategory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullCategoryInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "2" }
      },
      "put": {
        "tags": ["Category"],
        "summary": "Update category",
        "description": "This API is used to update category. <p> The category update data is a category object, example as:<pre><code>{\r\n\t\"storeId\": \"store-id\",\r\n\t\"localizationDisplayNames\": {\"en\" : \"Games\"}\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=4 (UPDATE)</li><li><i>Returns</i>: the updated category data</li></ul>",
        "operationId": "updateCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CategoryUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullCategoryInfo" } },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "4" }
      },
      "delete": {
        "tags": ["Category"],
        "summary": "Delete category",
        "description": "This API is used to delete category by category path. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=8 (DELETE)</li><li><i>Returns</i>: the deleted category data</li></ul>",
        "operationId": "deleteCategory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullCategoryInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30272</td><td>Category [{categoryPath}] is not empty in namespace [{namespace}]</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/categories/basic": {
      "get": {
        "tags": ["Category"],
        "summary": "List categories' basic info",
        "description": "This API is used to list all categories' basic info of a store ordered by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: list of categories' paths</li></ul>",
        "operationId": "listCategoriesBasic",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/BasicCategoryInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/categories/{categoryPath}/descendants": {
      "get": {
        "tags": ["Category"],
        "summary": "Get descendant categories",
        "description": "This API is used to get descendant categories by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: list of descendant categories data</li></ul>",
        "operationId": "getDescendantCategories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/FullCategoryInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/categories/{categoryPath}/children": {
      "get": {
        "tags": ["Category"],
        "summary": "Get child categories",
        "description": "This API is used to get child categories by category path.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: list of child categories data</li></ul>",
        "operationId": "getChildCategories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/FullCategoryInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/categories": {
      "get": {
        "tags": ["Category"],
        "summary": "Get root categories",
        "description": "This API is used to get root categories.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=2 (READ)</li><li><i>Returns</i>: root category data</li></ul>",
        "operationId": "getRootCategories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/FullCategoryInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "2" }
      },
      "post": {
        "tags": ["Category"],
        "summary": "Create category",
        "description": "This API is used to create category.<p>A category is a path separated by \"/\". A category also has localized display names. Example:<p><pre><code>{\r\n\t\"categoryPath\": \"/games\",\r\n\t\"localizationDisplayNames\": \\{\"en\" : \"Games\"}\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CATEGORY\", action=1 (CREATE)</li><li><i>Returns</i>: created category data</li></ul>",
        "operationId": "createCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CategoryCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullCategoryInfo" } },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30271</td><td>Category [{categoryPath}] already exists in namespace [{namespace}]</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/items/itemId/bySkus": {
      "get": {
        "tags": ["Item"],
        "summary": "Get multiple itemId by sku",
        "description": "This API is used to get an list of itemId by list of sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "getBulkItemIdBySkus",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          {
            "name": "sku",
            "in": "query",
            "description": "list of sku",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/ItemId" } } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an item",
        "description": "This API is used to get an item.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "getItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      },
      "put": {
        "tags": ["Item"],
        "summary": "Update an item",
        "description": "This API is used to update an item.<p>An item update example:<p><pre><code>{\r\n\t\"categoryPath\": \"/games\",\r\n\t\"localizations\": \\{\r\n       \"en\": \\{\r\n           \"title\":\"required\",\r\n           \"description\":\"optional\",\r\n           \"longDescription\":\"optional\",\r\n           \"localExt\": \\{\r\n                  \"properties\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                  \\],\r\n                  \"functions\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n       \\}\r\n   \\},\r\n   \"images\": \\[\r\n     \\{\r\n           \"as\":\"optional, image for\",\r\n           \"caption\":\"optional\",\r\n           \"height\":10,\r\n           \"width\":10,\r\n           \"imageUrl\":\"http://img-url-required\",\r\n           \"smallImageUrl\":\"http://small-img-url-required\"\r\n     \\}\r\n   \\],\r\n   \"thumbnailUrl\": \"optional, thumbnail url\",\r\n   \"status\": \"ACTIVE\",\r\n   \"listable\": true,\r\n   \"purchasable\": true,\r\n   \"itemType\": \"APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])\",\r\n   \"name\": \"optional\",\r\n   \"entitlementType\": \"DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)\", \r\n   \"useCount\": 1(optional, required if the entitlement type is consumable),\r\n   \"stackable\": false,\r\n   \"appId\": \"optional, required if itemType is APP\",\r\n   \"baseAppId\": \"optional, set value of game app id if you want to link to a game\",\r\n   \"appType\": \"GAME(optional, required if itemType is APP)\",\r\n   \"seasonType\": \"PASS(optional, required if itemType is SEASON)\",\r\n   \"sku\": \"optional, commonly unique item code\",\r\n   \"targetCurrencyCode\": \"optional, required if itemType is COINS\",\r\n   \"targetNamespace\": \"optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace\",\r\n   \"regionData\": \\{\r\n       \"US(store's default region is required)\": \\[\r\n         \\{\r\n            \"price\":10,\r\n            \"discountPercentage\":0(integer, optional, range[0,100], discountedPrice = price\\*((100 - discountPercentage) \\* 0.01),\r\n              if it is not 0, will use it to calculate discounted price),\r\n            \"discountAmount\":0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            \"currencyCode\":\"code(required, example: USD)\",\r\n            \"currencyNamespace\":\"test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)\",\r\n            \"trialPrice\":5(required while fixedTrialCycles set, should >=0 and <= price, will same as price if not present),\r\n            \"purchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"expireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountPurchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountExpireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\r\n         \\}\r\n       \\]\r\n   \\},\r\n   \"itemIds\": \\[\r\n       \"itemId\"\r\n   \\],\r\n   \"itemQty\": \\{\r\n       \"itemId\":1\r\n   \\},\r\n   \"recurring\": \\{\r\n       \"cycle\":\"MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])\",\r\n       \"fixedFreeDays\":0(integer, fixed free days, 0 means not set),\r\n       \"fixedTrialCycles\":0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       \"graceDays\":7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   \"tags\": \\[\r\n       \"exampleTag24\"\r\n   \\],\r\n   \"features\": \\[\r\n       \"feature\"\r\n   \\],\r\n   \"clazz\": \"weapon\",\r\n   \"boothName\": \"C_campaign1\",\r\n   \"displayOrder\": 1000,\r\n   \"ext\": \\{\r\n       \"properties\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\],\r\n       \"functions\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\]\r\n   \\},\r\n   \"maxCountPerUser\": 1(integer, optional, -1 means UNLIMITED),\r\n   \"maxCount\": 1(integer, optional, -1 means UNLIMITED, new value should >= old value if both old value and new value is\r\n   limited, unset when item type is CODE)\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item data</li></ul>",
        "operationId": "updateItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20024</td><td>unsupported operation</td></tr><tr><td>30301</td><td>Unsupported Item Type [{itemType}] for box item [{itemId}] with expiration</td></tr><tr><td>30322</td><td>Bundle item [{itemId}] can't be bundled</td></tr><tr><td>30325</td><td>Code item [{itemId}] can't be bundled</td></tr><tr><td>30326</td><td>Subscription item [{itemId}] can't be bundled</td></tr><tr><td>30329</td><td>Invalid bundled item [{itemId}] quantity</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30321</td><td>Invalid item discount amount</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30323</td><td>Target namespace is required</td></tr><tr><td>30327</td><td>Invalid item trial price</td></tr><tr><td>30330</td><td>Invalid item region price currency namespace [{namespace}]</td></tr><tr><td>30332</td><td>Invalid option box item [{itemId}] quantity</td></tr><tr><td>30333</td><td>Item [{itemId}] item type [{itemType}] can't be bundled into option box</td></tr><tr><td>30334</td><td>Option box item [{itemId}] can't be bundled</td></tr><tr><td>30337</td><td>Invalid loot box item [{itemId}] quantity</td></tr><tr><td>30338</td><td>Item [{itemId}] item type [{itemType}] can't be bundled into loot box</td></tr><tr><td>30339</td><td>Loot box item [{itemId}] can't be bundled</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30371</td><td>Item maxCount not allow reduce</td></tr><tr><td>30372</td><td>ItemType is not updatable</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30374</td><td>Item sku [{sku}] already exists in namespace [{namespace}]</td></tr><tr><td>30376</td><td>Publisher namespace don’t allow sellback item</td></tr><tr><td>30377</td><td>This item type [{itemType}] don’t allow sellback</td></tr><tr><td>30378</td><td>Sale price don’t allow real currency [{currencyCode}]</td></tr><tr><td>30379</td><td>Item sku is not updatable</td></tr><tr><td>30380</td><td>Box item [{itemId}] duration and end date can’t be set at the same time</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      },
      "delete": {
        "tags": ["Item"],
        "summary": "Delete an item",
        "description": "This API is used to delete an item permanently.<p>force: the default value should be: false. When the value is: <li><i>false:<i>only the items in the draft store that have never been published yet can be removed.</li><li><i>true:<i>the item in the draft store(even been published before) can be removed.</li>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "force", "in": "query", "description": "default is false", "required": false, "type": "boolean", "default": false }
        ],
        "responses": {
          "204": { "description": "Delete item successfully" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30335</td><td>Item [{itemId}] can't be deleted in non-forced mode if item has been published</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/items/bySku": {
      "get": {
        "tags": ["Item"],
        "summary": "Get item by sku",
        "description": "This API is used to get the item by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the item with sku</li></ul>",
        "operationId": "getItemBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/bySku/locale": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an item by sku in locale",
        "description": "This API is used to get an item by sku in specific locale. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "getLocaleItemBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          {
            "name": "populateBundle",
            "in": "query",
            "description": "whether populate bundled items if it's a bundle",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PopulatedItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/return": {
      "put": {
        "tags": ["Item"],
        "summary": "Return item",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This api is used for returning a published item while the item is maxCount limited, it will increase the sale available count if orderNo already acquired.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li></ul>",
        "operationId": "returnItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemReturnRequest" } }
        ],
        "responses": {
          "204": { "description": "Return item successfully" },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/features/{feature}": {
      "put": {
        "tags": ["Item"],
        "summary": "Feature an item",
        "description": "Add a feature to an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "featureItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "feature", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      },
      "delete": {
        "tags": ["Item"],
        "summary": "Defeature an item",
        "description": "Remove a feature from an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "defeatureItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "feature", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/purchase/condition": {
      "put": {
        "tags": ["Item"],
        "summary": "Update item purchase condition",
        "description": "This API is used to update item purchase condition",
        "operationId": "updateItemPurchaseCondition",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PurchaseConditionUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30331</td><td>Invalid purchase condition</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/items/itemId/bySku": {
      "get": {
        "tags": ["Item"],
        "summary": "Get itemId by sku",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to get the itemId by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the itemId with sku</li></ul>",
        "operationId": "getItemIdBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemId" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/byAppId": {
      "get": {
        "tags": ["Item"],
        "summary": "Get item by appId",
        "description": "This API is used to get the item by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the item with that appId</li></ul>",
        "operationId": "getItemByAppId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "appId", "in": "query", "required": true, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30342</td><td>Item of appId [{appId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/uncategorized": {
      "get": {
        "tags": ["Item"],
        "summary": "Query uncategorized items",
        "description": "This API is used to query uncategorized items within a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of uncategorized items</li></ul>",
        "operationId": "queryUncategorizedItems",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "tags": ["Item"],
        "summary": "Query items by criteria",
        "description": "This API is used to query items by criteria within a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "queryItems",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "categoryPath", "in": "query", "description": "category path", "required": false, "type": "string" },
          {
            "name": "includeSubCategoryItem",
            "in": "query",
            "description": "default is false, only available when search by category path, it will return all of the items(includes sub category path) under this category path",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "appType", "in": "query", "required": false, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "baseAppId", "in": "query", "required": false, "type": "string" },
          {
            "name": "tags",
            "in": "query",
            "description": "tags, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "features",
            "in": "query",
            "description": "features, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          { "name": "region", "in": "query", "description": "exist in region", "required": false, "type": "string" },
          {
            "name": "availableDate",
            "in": "query",
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z , filter date include(purchaseAt, expireAt)",
            "required": false,
            "type": "string"
          },
          { "name": "targetNamespace", "in": "query", "description": "targetNamespace", "required": false, "type": "string" },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc,displayOrder:asc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/acquire": {
      "put": {
        "tags": ["Item"],
        "summary": "Acquire item",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This api is used for acquiring a published item while the item is maxCount limited, it will decrease the sale available count.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: acquire result</li></ul>",
        "operationId": "acquireItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemAcquireRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemAcquireResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/items/search": {
      "get": {
        "tags": ["Item"],
        "summary": "Search items by keyword",
        "description": "This API is used to search items by keyword in title, description and long description within a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)<li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "searchItems",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": true, "type": "string" },
          { "name": "keyword", "in": "query", "required": true, "type": "string" },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,createdAt:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc,createdAt:asc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/enable": {
      "put": {
        "tags": ["Item"],
        "summary": "Enable an item",
        "description": "Enable an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "enableItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/items/locale/byIds": {
      "get": {
        "tags": ["Item"],
        "summary": "Bulk get locale items",
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of items info</li></ul>",
        "operationId": "bulkGetLocaleItems",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "itemIds", "in": "query", "description": "commas separated item ids", "required": true, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/ItemInfo" } } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/dynamic": {
      "get": {
        "tags": ["Item"],
        "summary": "Get item dynamic data",
        "description": "Get item dynamic data for published item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item dynamic data</li></ul>",
        "operationId": "getItemDynamicData",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemDynamicDataInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/regiondata": {
      "put": {
        "tags": ["Item"],
        "summary": "Update item's region data in bulk",
        "description": "This API is used to update region data of items in bulk <br />Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li></ul>",
        "operationId": "bulkUpdateRegionData",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/BulkRegionDataChangeRequest" } }
        ],
        "responses": {
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30321</td><td>Invalid item discount amount</td></tr><tr><td>30327</td><td>Invalid item trial price</td></tr><tr><td>30330</td><td>Invalid item region price currency namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/items": {
      "post": {
        "tags": ["Item"],
        "summary": "Create an Item",
        "description": "This API is used to create an item. APP item only can created in publisher namespace.<p>An item create example:<p><pre><code>{\r\n   \"categoryPath\": \"/games\",\r\n   \"localizations\": \\{\r\n       \"en\": \\{\r\n           \"title\":\"required\",\r\n           \"description\":\"optional\",\r\n           \"longDescription\":\"optional\",\r\n           \"localExt\": \\{\r\n                  \"properties\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                  \\],\r\n                  \"functions\":\\[\r\n                                   \\{\r\n                                       \"key1\":\"value1\",\r\n                                       \"key2\":\"value2\"\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n        \\}\r\n   \\},\r\n   \"images\": \\[\r\n     \\{\r\n           \"as\":\"optional, image for\",\r\n           \"caption\":\"optional\",\r\n           \"height\":10,\r\n           \"width\":10,\r\n           \"imageUrl\":\"http://img-url-required\",\r\n           \"smallImageUrl\":\"http://small-img-url-required\"\r\n     \\}\r\n   \\],\r\n   \"thumbnailUrl\": \"optional, thumbnail url\",\r\n   \"status\": \"ACTIVE\",\r\n   \"listable\": true,\r\n   \"purchasable\": true,\r\n   \"itemType\": \"APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])\",\r\n   \"name\": \"required, also will be used as entitlement name\",\r\n   \"entitlementType\": \"DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)\", \r\n   \"useCount\": 1(optional, required if the entitlement type is consumable),\r\n   \"stackable\": false,\r\n   \"appId\": \"optional, required if itemType is APP\",\r\n   \"appType\": \"GAME(optional, required if itemType is APP)\",\r\n   \"seasonType\": \"PASS(optional, required if itemType is SEASON)\",\r\n   \"baseAppId\": \"optional, set value of game app id if you want to link to a game\",\r\n   \"targetCurrencyCode\": \"optional, required if itemType is COINS\",\r\n   \"targetNamespace\": \"optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace\",\r\n   \"sku\": \"optional, commonly unique item code\",\r\n   \"regionData\": \\{\r\n       \"US(store's default region is required)\": \\[\r\n         \\{\r\n            \"price\":10,\r\n            \"discountPercentage\": 0(integer, optional, range[0,100], discountedPrice = price  \\* ((100 - discountPercentage) \\* 0.01),\r\n              will use it to calculate discounted price if it is not 0),\r\n            \"discountAmount\":0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            \"currencyCode\":\"code(required, example: USD)\",\r\n            \"currencyNamespace\":\"test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)\",\r\n            \"trialPrice\":5(required while fixedTrialCycles set, should >=0 and <= price, will same as price if not present),\r\n            \"purchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"expireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountPurchaseAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\r\n            \"discountExpireAt\":\"optional yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\r\n         \\}\r\n       \\]\r\n   \\},\r\n   \"itemIds\": \\[\r\n       \"itemId\"\r\n   \\],\r\n   \"itemQty\": \\{\r\n       \"itemId\":1\r\n   \\},\r\n   \"recurring\": \\{\r\n       \"cycle\":\"MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])\",\r\n       \"fixedFreeDays\":0(integer, fixed free days, 0 means not set),\r\n       \"fixedTrialCycles\":0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       \"graceDays\":7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   \"tags\": \\[\r\n       \"exampleTag24\"\r\n   \\],\r\n   \"features\": \\[\r\n       \"feature\"\r\n   \\],\r\n   \"clazz\": \"weapon\",\r\n   \"boothName\": \"C_campaign1\",\r\n   \"displayOrder\": 1000,\r\n   \"ext\": \\{\r\n       \"properties\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\],\r\n       \"functions\":\\[\r\n           \\{\r\n               \"key1\":\"value1\",\r\n               \"key2\":\"value2\"\r\n           \\}\r\n       \\]\r\n   \\},\r\n   \"maxCountPerUser\": 1(integer, optional, -1 means UNLIMITED),\r\n   \"maxCount\": 1(integer, optional, -1 means UNLIMITED, unset when itemType is CODE)\r\n}</code></pre>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=1 (CREATE)</li><li><i>Returns</i>: created item data</li></ul>",
        "operationId": "createItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20024</td><td>unsupported operation</td></tr><tr><td>30301</td><td>Unsupported Item Type [{itemType}] for box item [{itemId}] with expiration</td></tr><tr><td>30322</td><td>Bundle item [{itemId}] can't be bundled</td></tr><tr><td>30325</td><td>Code item [{itemId}] can't be bundled</td></tr><tr><td>30326</td><td>Subscription item [{itemId}] can't be bundled</td></tr><tr><td>30329</td><td>Invalid bundled item [{itemId}] quantity</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30321</td><td>Invalid item discount amount</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30323</td><td>Target namespace is required</td></tr><tr><td>30327</td><td>Invalid item trial price</td></tr><tr><td>30330</td><td>Invalid item region price currency namespace [{namespace}]</td></tr><tr><td>30332</td><td>Invalid option box item [{itemId}] quantity</td></tr><tr><td>30333</td><td>Item [{itemId}] item type [{itemType}] can't be bundled into option box</td></tr><tr><td>30334</td><td>Option box item [{itemId}] can't be bundled</td></tr><tr><td>30337</td><td>Invalid loot box item [{itemId}] quantity</td></tr><tr><td>30338</td><td>Item [{itemId}] item type [{itemType}] can't be bundled into loot box</td></tr><tr><td>30339</td><td>Loot box item [{itemId}] can't be bundled</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30373</td><td>ItemType [{itemType}] is not allowed in namespace [{namespace}]</td></tr><tr><td>30376</td><td>Publisher namespace don’t allow sellback item</td></tr><tr><td>30377</td><td>This item type [{itemType}] don’t allow sellback</td></tr><tr><td>30378</td><td>Sale price don’t allow real currency [{currencyCode}]</td></tr><tr><td>30380</td><td>Box item [{itemId}] duration and end date can’t be set at the same time</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "1" }
      },
      "put": {
        "tags": ["Item"],
        "summary": "Sync an in game item",
        "description": "This API is used to sync an in game item in game namespace to publisher namespace, at current BUNDLE can't be synced.<p>The synced item has an additional field targetItemId besides targetNamespace, mostly this item should not modified manually again. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "syncInGameItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/InGameItemSync" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30324</td><td>Invalid namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30373</td><td>ItemType [{itemType}] is not allowed in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/locale": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an item in locale",
        "description": "This API is used to get an item in specific locale. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "getLocaleItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          {
            "name": "populateBundle",
            "in": "query",
            "description": "whether populate bundled items if it's a bundle",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PopulatedItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/predicate/types": {
      "get": {
        "tags": ["Item"],
        "summary": "Get available predicate types",
        "description": "Get available predicate types.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:ITEM, action=2 (READ)</li><li><i>Returns</i>: available predicate types</li></ul>",
        "operationId": "getAvailablePredicateTypes",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/AvailablePredicate" } }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/byFeatures/basic": {
      "get": {
        "tags": ["Item"],
        "summary": "List basic items by features",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to list basic items by features.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of basic items</li></ul>",
        "operationId": "listBasicItemsByFeatures",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "features",
            "in": "query",
            "description": "features",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/BasicItem" } } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/purchase/conditions/validate": {
      "post": {
        "tags": ["Item"],
        "summary": "Validate user purchase condition",
        "description": "This API is used to validate user purchase condition",
        "operationId": "validateItemPurchaseCondition",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemPurchaseConditionValidateRequest" } }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/ItemPurchaseConditionValidateResult" } }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/items/{itemId}/disable": {
      "put": {
        "tags": ["Item"],
        "summary": "Disable an item",
        "description": "Disable an item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=4 (UPDATE)</li><li><i>Returns</i>: updated item</li></ul>",
        "operationId": "disableItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "4" }
      }
    },
    "/admin/items/configs": {
      "get": {
        "tags": ["Item"],
        "summary": "Get all item type configs",
        "description": "This API is used to get all item type configs.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:ITEM:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "listItemTypeConfigs",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/ItemTypeConfigInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:ITEM:CONFIG", "action": "2" }
      },
      "post": {
        "tags": ["Item"],
        "summary": "Create an Item Type Config",
        "description": "This API is used to create an item type config.<p><li><i>Required permission</i>: resource=\"ADMIN:ITEM:CONFIG\", action=1 (CREATE)</li><li><i>Returns</i>: item type config data</li></ul>",
        "operationId": "createItemTypeConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemTypeConfigCreate" } }],
        "responses": {
          "201": { "description": "item type config created" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30336</td><td>Item type [{itemType}] does not support</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30371</td><td>Item type config for type [{itemType}] and clazz [{clazz}] already exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:ITEM:CONFIG", "action": "1" }
      }
    },
    "/admin/items/configs/search": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an item type config",
        "description": "This API is used to get an item type config.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:ITEM:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: item type config data</li></ul>",
        "operationId": "searchItemTypeConfig",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "clazz", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemTypeConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30541</td><td>Item type config [{id}] doesn't exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:ITEM:CONFIG", "action": "2" }
      }
    },
    "/admin/items/configs/{id}": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an item type config",
        "description": "This API is used to get an item type config.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:ITEM:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: item type config data</li></ul>",
        "operationId": "getItemTypeConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "id", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemTypeConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30541</td><td>Item type config [{id}] doesn't exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:ITEM:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["Item"],
        "summary": "Update an Item Type Config",
        "description": "This API is used to update an item type config.<p><li><i>Required permission</i>: resource=\"ADMIN:ITEM:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: item type config data</li></ul>",
        "operationId": "updateItemTypeConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemTypeConfigUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemTypeConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30541</td><td>Item type config [{id}] doesn't exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30371</td><td>Item type config for type [{itemType}] and clazz [{clazz}] already exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:ITEM:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["Item"],
        "summary": "Delete an item type config",
        "description": "This API is used to delete an item type config permanently.Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:ITEM:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteItemTypeConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "id", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "204": { "description": "Delete item successfully" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30541</td><td>Item type config [{id}] doesn't exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:ITEM:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/sections/{sectionId}": {
      "get": {
        "tags": ["Section"],
        "summary": "Get a section",
        "description": "This API is used to get a section.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: section data</li></ul>",
        "operationId": "getSection",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "sectionId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullSectionInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30741</td><td>Section [{sectionId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      },
      "put": {
        "tags": ["Section"],
        "summary": "Update s section",
        "description": "This API is used to update s section.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated section data</li></ul>",
        "operationId": "updateSection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "sectionId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/SectionUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullSectionInfo" } },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20027</td><td>Invalid time range</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30023</td><td>Catalog plugin grpc server address required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30641</td><td>View [{viewId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30741</td><td>Section [{sectionId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      },
      "delete": {
        "tags": ["Section"],
        "summary": "Delete a section",
        "description": "This API is used to delete s section.</b><p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteSection",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "sectionId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "Delete section successfully" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30741</td><td>Section [{sectionId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/sections/purge/expired": {
      "delete": {
        "tags": ["Section"],
        "summary": "purge expired section",
        "description": "This API is used to purge expired section.</b><p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=8 (DELETE)</li></ul>",
        "operationId": "purgeExpiredSection",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "purge expired section successfully" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/sections": {
      "get": {
        "tags": ["Section"],
        "summary": "List sections",
        "description": "This API is used to query sections.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: paginated sections</li></ul>",
        "operationId": "querySections",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "viewId", "in": "query", "required": false, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          {
            "name": "start",
            "in": "query",
            "description": "section active range time start , using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "section active range time end, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          { "name": "limit", "in": "query", "description": "limit", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SectionPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      },
      "post": {
        "tags": ["Section"],
        "summary": "Create a section",
        "description": "This API is used to create a section.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: created a section</li></ul>",
        "operationId": "createSection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/SectionCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullSectionInfo" } },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20027</td><td>Invalid time range</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30023</td><td>Catalog plugin grpc server address required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30641</td><td>View [{viewId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/stores/published/backup": {
      "get": {
        "tags": ["Store"],
        "summary": "Get a published store's backup",
        "description": "This API is used to get a store's backup. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: store backup info</li></ul>",
        "operationId": "getPublishedStoreBackup",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreBackupInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30143</td><td>Published store [{storeId}] backup doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}": {
      "get": {
        "tags": ["Store"],
        "summary": "Get a store",
        "description": "This API is used to get a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: store data</li></ul>",
        "operationId": "getStore",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      },
      "put": {
        "tags": ["Store"],
        "summary": "Update a store",
        "description": "This API is used to Update a store basic info.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated store data</li></ul>",
        "operationId": "updateStore",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/StoreUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30171</td><td>Store [{store}] can't change default language to [{language}]</td></tr><tr><td>30172</td><td>Store [{store}] can't change default region to [{region}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      },
      "delete": {
        "tags": ["Store"],
        "summary": "Delete a store",
        "description": "This API is used to delete a store. Only non published store can be deleted.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=8 (DELETE)</li><li><i>Returns</i>: store</li></ul>",
        "operationId": "deleteStore",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/stores": {
      "get": {
        "tags": ["Store"],
        "summary": "List stores",
        "description": "This API is used to list stores in a namespace.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: the list of stores</li></ul>",
        "operationId": "listStores",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/StoreInfo" } } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      },
      "post": {
        "tags": ["Store"],
        "summary": "Create a store",
        "description": "This API is used to create a non published store in a namespace.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: created store data</li></ul>",
        "operationId": "createStore",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/StoreCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30174</td><td>Draft store already exists in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/stores/published": {
      "get": {
        "tags": ["Store"],
        "summary": "Get published store",
        "description": "This API is used to get a published store basic info, exclude category and item information.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: store data</li></ul>",
        "operationId": "getPublishedStore",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      },
      "delete": {
        "tags": ["Store"],
        "summary": "Delete published store",
        "description": "This API is used to delete published store including category and items before release to public.<p><b>Warning: Please do not use this API once published to public user.</b><p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=8 (DELETE)</li></ul>",
        "operationId": "deletePublishedStore",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/clone": {
      "put": {
        "tags": ["Store"],
        "summary": "Clone a store",
        "description": "This API is used to clone a store. Usually clone a draft store to published store because published store can't directly edit content.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: clone store info</li></ul>",
        "operationId": "cloneStore",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" },
          { "name": "targetStoreId", "in": "query", "description": "default is published store", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/stores/published/rollback": {
      "put": {
        "tags": ["Store"],
        "summary": "Rollback a published store",
        "description": "This API is used to rollback a published store. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated store info</li></ul>",
        "operationId": "rollbackPublishedStore",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30143</td><td>Published store [{storeId}] backup doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/stores/{storeId}/export": {
      "get": {
        "tags": ["Store"],
        "summary": "Export a store",
        "description": "This API is used to export a store.<p>This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/export to export store.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li></ul>",
        "operationId": "exportStore",
        "produces": ["application/zip"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Successful operation", "schema": { "type": "file" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/stores/import": {
      "put": {
        "tags": ["Store"],
        "summary": "Import a store",
        "description": "This API is used to import a store.<p>This api has been deprecated, pls use /v2/admin/namespaces/{namespace}/stores/import to import store.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li></ul>",
        "operationId": "importStore",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "file", "in": "formData", "required": false, "type": "file" },
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "storeId",
            "in": "query",
            "description": "default we will use published store id,and will create published store if it dose not exist",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/StoreInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30121</td><td>Store data is invalid</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>30122</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30375</td><td>Item id [{itemId}] of sku [{sku}] is duplicate with un-published deleted item in namespace [{namespace}]</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/views/{viewId}": {
      "get": {
        "tags": ["View"],
        "summary": "Get a view",
        "description": "This API is used to get a view.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: view data</li></ul>",
        "operationId": "getView",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "viewId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullViewInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30641</td><td>View [{viewId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      },
      "put": {
        "tags": ["View"],
        "summary": "Update a view",
        "description": "This API is used to update a view.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li><li><i>Returns</i>: updated view data</li></ul>",
        "operationId": "updateView",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "viewId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ViewUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullViewInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30641</td><td>View [{viewId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      },
      "delete": {
        "tags": ["View"],
        "summary": "Delete a view",
        "description": "This API is used to delete a view.It will also delete all the related sections</b><p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteView",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "viewId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "Delete view successfully" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30641</td><td>View [{viewId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/views": {
      "get": {
        "tags": ["View"],
        "summary": "List all views",
        "description": "This API is used to list all views.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li><li><i>Returns</i>: the list of views</li></ul>",
        "operationId": "listViews",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/ListViewInfo" } }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      },
      "post": {
        "tags": ["View"],
        "summary": "Create a view",
        "description": "This API is used to create a view.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=1 (CREATE)</li><li><i>Returns</i>: created a view</li></ul>",
        "operationId": "createView",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ViewCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullViewInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "1" }
      }
    },
    "/public/namespaces/{namespace}/items/{itemId}/app/locale": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an app in locale",
        "description": "This API is used to get an app in locale. If app not exist in specific region, default region app will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store app)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store app)</li><li><i>Returns</i>: app data</li></ul>",
        "operationId": "publicGetApp",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/AppInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/{categoryPath}/children": {
      "get": {
        "tags": ["Category"],
        "summary": "Get Child Categories",
        "description": "This API is used to get child categories by category path.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Returns</i>: list of child categories data</li></ul>",
        "operationId": "publicGetChildCategories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/CategoryInfo" } } }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/{categoryPath}": {
      "get": {
        "tags": ["Category"],
        "summary": "Get Category",
        "description": "This API is used to get category by category path.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1 (CREATE)(user with this permission can view draft store category)</li><li><i>Returns</i>: category data</li></ul>",
        "operationId": "publicGetCategory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CategoryInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/categories": {
      "get": {
        "tags": ["Category"],
        "summary": "Get Root Categories",
        "description": "This API is used to get root categories.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Returns</i>: root category data</li></ul>",
        "operationId": "publicGetRootCategories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/CategoryInfo" } } }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/{categoryPath}/descendants": {
      "get": {
        "tags": ["Category"],
        "summary": "Get Descendant Categories",
        "description": "This API is used to get descendant categories by category path.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store category)</li><li><i>Returns</i>: list of descendant categories data</li></ul>",
        "operationId": "publicGetDescendantCategories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "categoryPath", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/CategoryInfo" } } }
        }
      }
    },
    "/public/namespaces/{namespace}/categories/download": {
      "get": {
        "tags": ["Category"],
        "summary": "Download store's structured categories",
        "description": "This API is used to download store's structured categories.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store content)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store content)</li><li><i>Returns</i>: structured categories</li></ul>",
        "operationId": "downloadCategories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/HierarchicalCategoryInfo" } }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/items/bySku": {
      "get": {
        "tags": ["Item"],
        "summary": "Get item by sku",
        "description": "This API is used to get the item by sku.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the item with sku</li></ul>",
        "operationId": "publicGetItemBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/items/search": {
      "get": {
        "tags": ["Item"],
        "summary": "Search items by keyword",
        "description": "This API is used to search items by keyword in title, description and long description, It's language constrained, also if item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "publicSearchItems",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": true, "type": "string" },
          { "name": "keyword", "in": "query", "required": true, "type": "string" },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          { "name": "limit", "in": "query", "description": "limit", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/items/byAppId": {
      "get": {
        "tags": ["Item"],
        "summary": "Get item by appId",
        "description": "This API is used to get item by appId.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the item with that appId</li></ul>",
        "operationId": "publicGetItemByAppId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "appId", "in": "query", "required": true, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30342</td><td>Item of appId [{appId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/items/{itemId}/locale": {
      "get": {
        "tags": ["Item"],
        "summary": "Get an item in locale",
        "description": "This API is used to get an item in locale. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: item data</li></ul>",
        "operationId": "publicGetItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          {
            "name": "populateBundle",
            "in": "query",
            "description": "whether populate bundled items if it's a bundle",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PopulatedItemInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "tags": ["Item"],
        "summary": "Query items by criteria",
        "description": "This API is used to query items by criteria within a store. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store item)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "publicQueryItems",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "categoryPath", "in": "query", "description": "category path", "required": false, "type": "string" },
          {
            "name": "includeSubCategoryItem",
            "in": "query",
            "description": "default is false, only available when search by category path, it will return all of the items(includes sub category path) under this category path",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "appType", "in": "query", "required": false, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "baseAppId", "in": "query", "required": false, "type": "string" },
          {
            "name": "tags",
            "in": "query",
            "description": "tags, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "features",
            "in": "query",
            "description": "features, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique value for example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc,displayOrder:asc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/items/{itemId}/dynamic": {
      "get": {
        "tags": ["Item"],
        "summary": "Get item dynamic data",
        "description": "Get item dynamic data for a published item.<br>Other detail info: <ul><li><i>Returns</i>: item dynamic data</li></ul>",
        "operationId": "publicGetItemDynamicData",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ItemDynamicDataInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/items/purchase/conditions/validate": {
      "post": {
        "tags": ["Item"],
        "summary": "Validate user item purchase condition",
        "description": "This API is used to validate user item purchase condition",
        "operationId": "publicValidateItemPurchaseCondition",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ItemPurchaseConditionValidateRequest" } }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/ItemPurchaseConditionValidateResult" } }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/items/locale/byIds": {
      "get": {
        "tags": ["Item"],
        "summary": "Bulk get locale items",
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store items)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store items)</li><li><i>Returns</i>: the list of items info</li></ul>",
        "operationId": "publicBulkGetItems",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "itemIds", "in": "query", "description": "commas separated item ids", "required": true, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/ItemInfo" } } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/stores": {
      "get": {
        "tags": ["Store"],
        "summary": "List all stores",
        "description": "This API is used to list all stores in a namespace.<p>Other detail info: <ul><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store)</li><li><i>Returns</i>: the list of stores</li></ul>",
        "operationId": "publicListStores",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/StoreInfo" } } }
        }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/sections": {
      "get": {
        "tags": ["Section"],
        "summary": "List active section contents",
        "description": "This API is used to list active section contents.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:USER:{userId}:STORE, action=2 (READ)</li><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store sections)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store sections)</li><li><i>Returns</i>: active section contents</li></ul>",
        "operationId": "publicListActiveSections",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "viewId", "in": "query", "required": false, "type": "string" },
          { "name": "region", "in": "query", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/SectionInfo" } } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:STORE", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/views": {
      "get": {
        "tags": ["View"],
        "summary": "Get all views",
        "description": "This API is used to get all views.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:USER:{userId}:STORE, action=2 (READ)</li><li><i>Optional permission</i>: resource=\"PREVIEW\", action=1(CREATE) (user with this permission can view draft store views)</li><li><i>Optional permission</i>: resource=\"SANDBOX\", action=1(CREATE) (user with this permission can view draft store views)</li><li><i>Returns</i>: all views</li></ul>",
        "operationId": "publicListViews",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "language", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/ViewInfo" } } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:STORE", "action": "2" }
      }
    },
    "/v2/admin/namespaces/{namespace}/items/byCriteria": {
      "get": {
        "tags": ["Item"],
        "summary": "Query items by criteria",
        "description": "This API is used to query items by criteria within a store.<p>The behaviour for itemStatus query parameter:<li>TRUE: Show only ACTIVE items</li><li>FALSE: Show only INACTIVE items</li><li>Not provided: show both ACTIVE and INACTIVE items</li>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ITEM\", action=2 (READ)</li><li><i>Returns</i>: the list of items</li></ul>",
        "operationId": "queryItems_1",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "query", "description": "default is published store id", "required": false, "type": "string" },
          { "name": "categoryPath", "in": "query", "description": "category path", "required": false, "type": "string" },
          {
            "name": "includeSubCategoryItem",
            "in": "query",
            "description": "default is false, only available when search by category path, it will return all of the items(includes sub category path) under this category path",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "appType", "in": "query", "required": false, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "baseAppId", "in": "query", "required": false, "type": "string" },
          {
            "name": "tags",
            "in": "query",
            "description": "tags, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "features",
            "in": "query",
            "description": "features, separate multiple value by commas parameter",
            "required": false,
            "type": "string"
          },
          { "name": "itemStatus", "in": "query", "required": false, "type": "string", "enum": ["ACTIVE", "INACTIVE"] },
          { "name": "region", "in": "query", "description": "exist in region", "required": false, "type": "string" },
          {
            "name": "availableDate",
            "in": "query",
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z , filter date include(purchaseAt, expireAt)",
            "required": false,
            "type": "string"
          },
          { "name": "targetNamespace", "in": "query", "description": "targetNamespace", "required": false, "type": "string" },
          { "name": "itemName", "in": "query", "description": "itemName, fuzzy matching", "required": false, "type": "string" },
          { "name": "sectionExclusive", "in": "query", "required": false, "type": "boolean" },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "required": false,
            "type": "string",
            "default": "name:asc,displayOrder:asc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FullItemPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ITEM", "action": "2" }
      }
    },
    "/v2/admin/namespaces/{namespace}/stores/{storeId}/export": {
      "post": {
        "tags": ["Store"],
        "summary": "Export a store",
        "description": "This API is used to export a whole or partial store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=2 (READ)</li></ul>",
        "operationId": "exportStore_1",
        "produces": ["application/zip"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "storeId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ExportStoreRequest" } }
        ],
        "responses": {
          "200": { "description": "Successful operation", "schema": { "type": "file" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "2" }
      }
    },
    "/v2/admin/namespaces/{namespace}/stores/import": {
      "put": {
        "tags": ["Store"],
        "summary": "Import a store",
        "description": "This API is used to import a store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:STORE\", action=4 (UPDATE)</li></ul>",
        "operationId": "importStore_1",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "file", "in": "formData", "required": false, "type": "file" },
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "storeId",
            "in": "query",
            "description": "default we will use published store id,and will create published store if it dose not exist",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ImportStoreResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30121</td><td>Store data is invalid</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:STORE", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/configs/servicePlugin": {
      "get": {
        "tags": ["ServicePluginConfig"],
        "summary": "Get service plugin config",
        "description": "Get service plugin config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=<b>ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN</b>, action=2 <b>(READ)</b></li></ul>",
        "operationId": "getServicePluginConfig",
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ServicePluginConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN", "action": "2" }
      },
      "put": {
        "tags": ["ServicePluginConfig"],
        "summary": "Update service plugin config service",
        "description": "Update catalog config. Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN, action=4 (UPDATE)</li><li><i>Returns</i>: updated service plugin config</li></ul>",
        "operationId": "updateServicePluginConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ServicePluginConfigUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ServicePluginConfigInfo" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN", "action": "4" }
      },
      "delete": {
        "tags": ["ServicePluginConfig"],
        "summary": "Delete service plugin config",
        "description": "Delete service plugin config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN, action=8 (DELETE)</li></ul>",
        "operationId": "deleteServicePluginConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CONFIG:SERVICEPLUGIN", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/currencies": {
      "get": {
        "tags": ["Currency"],
        "summary": "List currencies",
        "description": "List currencies of a namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=2 (READ)</li><li><i>Returns</i>: Currency List</li></ul>",
        "operationId": "listCurrencies",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          {
            "name": "currencyType",
            "in": "query",
            "description": "currencyType",
            "required": false,
            "type": "string",
            "enum": ["REAL", "VIRTUAL"]
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/CurrencyInfo" } } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY", "action": "2" }
      },
      "post": {
        "tags": ["Currency"],
        "summary": "Create a currency",
        "description": "Create a currency.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=1 (CREATE)</li><li><i>Returns</i>: created currency</li></ul>",
        "operationId": "createCurrency",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CurrencyCreate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CurrencyInfo" } },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36171</td><td>Currency [{currencyCode}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/currencies/{currencyCode}/summary": {
      "get": {
        "tags": ["Currency"],
        "summary": "Get currency summary",
        "description": "Get currency summary by code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=2 (READ)</li><li><i>Returns</i>: simplified Currency</li></ul>",
        "operationId": "getCurrencySummary",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "description": "currencyCode", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CurrencySummary" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/currencies/{currencyCode}": {
      "put": {
        "tags": ["Currency"],
        "summary": "Update a currency",
        "description": "Update a currency by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=4 (UPDATE)</li><li><i>Returns</i>: updated currency</li></ul>",
        "operationId": "updateCurrency",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "description": "currencyCode", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CurrencyUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CurrencyInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY", "action": "4" }
      },
      "delete": {
        "tags": ["Currency"],
        "summary": "Delete a currency",
        "description": "Delete a currency by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=8 (DELETE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "deleteCurrency",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "description": "currencyCode", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CurrencyInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/currencies/{currencyCode}/config": {
      "get": {
        "tags": ["Currency"],
        "summary": "Get currency config",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Get currency config by code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:CURRENCY\", action=2 (READ)</li><li><i>Returns</i>: simplified Currency</li></ul>",
        "operationId": "getCurrencyConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "description": "currencyCode", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/CurrencyConfig" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/currencies": {
      "get": {
        "tags": ["Currency"],
        "summary": "list currencies",
        "description": "List currencies of a namespace.<br>Other detail info: <ul><li><i>Returns</i>: Currency List</li></ul>",
        "operationId": "publicListCurrencies",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          {
            "name": "currencyType",
            "in": "query",
            "description": "currencyType",
            "required": false,
            "type": "string",
            "enum": ["REAL", "VIRTUAL"]
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/CurrencyInfo" } } }
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/entitlements": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize entitlement",
        "description": "Anonymize entitlement. At current it will only anonymize entitlement, entitlement history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeEntitlement",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/entitlements/{entitlementId}": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get entitlement",
        "description": "Get entitlement.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "getEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/entitlements/grant": {
      "post": {
        "tags": ["Entitlement"],
        "summary": "Grant entitlements to different users",
        "description": "Grant entitlements to multiple users, skipped granting will be treated as fail.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk grant entitlements result</li></ul>",
        "operationId": "grantEntitlements",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/BulkEntitlementGrantRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkEntitlementGrantResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/entitlements": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Query entitlements",
        "description": "Query entitlements.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement list</li></ul>",
        "operationId": "queryEntitlements",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "query", "required": false, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          },
          { "name": "appType", "in": "query", "required": false, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "entitlementName", "in": "query", "required": false, "type": "string" },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/entitlements/byItemIds": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Query entitlements by Item Ids",
        "description": "Query entitlements by Item Ids.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement list</li></ul>",
        "operationId": "queryEntitlements_1",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/entitlements/revoke": {
      "post": {
        "tags": ["Entitlement"],
        "summary": "Revoke entitlements by Ids",
        "description": "Revoke entitlements, skipped revocation will be treated as fail.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk revoke entitlements result</li></ul>",
        "operationId": "revokeEntitlements",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "type": "array", "items": { "type": "string" } } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkEntitlementRevokeResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/history": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement history",
        "description": "Get user entitlement histories.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: list of entitlement history</li></ul>",
        "operationId": "getUserEntitlementHistories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/EntitlementHistoryInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/byItemIds": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlements by itemIds",
        "description": "Get user entitlements by itemIds.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserActiveEntitlementsByItemIds",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "ids", "in": "query", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/EntitlementInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/bySku": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement by sku",
        "description": "Get user entitlement by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserEntitlementBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31143</td><td>Entitlement with sku [{sku}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Query user entitlements",
        "description": "Query entitlements for a specific user.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement list</li></ul>",
        "operationId": "queryUserEntitlements",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          },
          { "name": "appType", "in": "query", "required": false, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "entitlementName", "in": "query", "required": false, "type": "string" },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          {
            "name": "features",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      },
      "post": {
        "tags": ["Entitlement"],
        "summary": "Grant user entitlement",
        "description": "Grant user entitlement.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=1 (CREATE)</li><li><i>Returns</i>: granted entitlement</li></ul>",
        "operationId": "grantUserEntitlement",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": { "type": "array", "items": { "$ref": "#/definitions/EntitlementGrant" } }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/StackableEntitlementInfo" } }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/revoke": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Revoke all entitlements of a user (This API is for testing purpose only)",
        "description": "Revoke all entitlements of a user (This API is for testing purpose only)<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: revoked entitlements count</li></ul>",
        "operationId": "revokeAllEntitlements",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkOperationResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/revokeByUseCount": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Revoke specified use count of user entitlement",
        "description": "Revoke specified use count of user entitlement.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: revoke entitlement</li></ul>",
        "operationId": "revokeUseCount",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/RevokeUseCountRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/revoke/byIds": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Revoke user's entitlements by ids",
        "description": "Revoke user's entitlements by ids.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: revoke entitlements count</li></ul>",
        "operationId": "revokeUserEntitlements",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "entitlementIds",
            "in": "query",
            "description": "separate multiple value by commas parameter.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkOperationResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement",
        "description": "Get user entitlement.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "getUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      },
      "put": {
        "tags": ["Entitlement"],
        "summary": "Update user entitlement",
        "description": "Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: updated entitlement</li></ul>",
        "operationId": "updateUserEntitlement",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EntitlementUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/bySku": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement ownership by sku",
        "description": "Get user entitlement ownership by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserEntitlementOwnershipBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TimedOwnership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement ownership by itemId",
        "description": "Get user entitlement ownership by itemId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserEntitlementOwnershipByItemId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TimedOwnership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/byAppId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user app entitlement by appId",
        "description": "Get user app entitlement by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserAppEntitlementByAppId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "appId", "in": "query", "required": true, "type": "string" },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/AppEntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31142</td><td>Entitlement with appId [{appId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/byAppId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user app entitlement ownership by appId",
        "description": "Get user app entitlement ownership by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserAppEntitlementOwnershipByAppId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "appId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Ownership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/disable": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Disable user entitlement",
        "description": "Disable user entitlement if entitlement, only active entitlement can be disable, disabled entitlement can't consume.<br><b>Like revoke, it will lose the entitlement ownership, except disabled entitlement can enable.</b><br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: disable entitlement</li></ul>",
        "operationId": "disableUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/byItemId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement by itemId",
        "description": "Get user entitlement by itemId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserEntitlementByItemId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31144</td><td>Entitlement with itemId [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/decrement": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Consume user entitlement",
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: consumed entitlement</li></ul>",
        "operationId": "consumeUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EntitlementDecrement" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementDecrementResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31123</td><td>Unable to acquire box item, box item [{itemId}] expired</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31173</td><td>Entitlement [{entitlementId}] is not consumable</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>31178</td><td>Entitlement [{entitlementId}] out of time range</td></tr><tr><td>31180</td><td>Duplicate request id: [{requestId}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/enable": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Enable user entitlement",
        "description": "Enable user entitlement.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: enable entitlement</li></ul>",
        "operationId": "enableUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr><tr><td>31179</td><td>Duplicate entitlement exists</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/byAppType": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Query app entitlements by appType",
        "description": "Query app entitlements by appType.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2<li><i>Returns</i>: app entitlement pagination</li></ul>",
        "operationId": "queryUserEntitlementsByAppType",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "appType", "in": "query", "required": true, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "activeOnly", "in": "query", "required": false, "type": "boolean", "default": true },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/AppEntitlementPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/anyOf": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Exists any user active entitlement",
        "description": "Exists any user active entitlement of specified items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "existsAnyUserActiveEntitlementByItemIds",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "itemIds",
            "in": "query",
            "required": true,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Ownership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemIds": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement ownership by itemIds",
        "description": "Get user entitlement ownership by itemIds.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "getUserEntitlementOwnershipByItemIds",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "ids", "in": "query", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/EntitlementOwnership" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/sell": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Sell user entitlement",
        "description": "Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT, action=4 (UPDATE)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "sellUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EntitlementSoldRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementSoldResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>31178</td><td>Entitlement [{entitlementId}] out of time range</td></tr><tr><td>31180</td><td>Duplicate request id: [{requestId}]</td></tr><tr><td>31181</td><td>Entitlement [{entitlementId}] is not sellable</td></tr><tr><td>31182</td><td>Entitlement [{entitlementId}] already sold</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/ownership/any": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Exists any user active entitlement",
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "existsAnyUserActiveEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "skus", "in": "query", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Ownership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/revoke": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Revoke user entitlement",
        "description": "Revoke user entitlement.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: revoke entitlement</li></ul>",
        "operationId": "revokeUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownership/byAppId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get my app entitlement ownership by appId",
        "description": "Get my app entitlement ownership by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Path's namespace</i> : <ul><li>can be filled with <b>publisher namespace</b> in order to get <b>publisher namespace app entitlement ownership</b></li></ul></li></ul>",
        "operationId": "publicGetMyAppEntitlementOwnershipByAppId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "appId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Ownership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownership/any": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Exists any my active entitlement",
        "description": "Exists any my active entitlement of specified itemIds, skus and appIds<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicExistsAnyMyActiveEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "skus", "in": "query", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Ownership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownership/bySku": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get my entitlement ownership by sku",
        "description": "Get my entitlement ownership by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Path's namespace</i> : <ul><li>can be filled with <b>publisher namespace</b> in order to get <b>publisher namespace entitlement ownership by sku</b></li><li>can be filled with <b>game namespace</b> in order to get <b>game namespace entitlement ownership by sku</b></li></ul></li></ul>",
        "operationId": "publicGetMyEntitlementOwnershipBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TimedOwnership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownership/byItemId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get my entitlement ownership by itemId",
        "description": "Get my entitlement ownership by itemId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li><li><i>Path's namespace</i> : <ul><li>can be filled with <b>publisher namespace</b> in order to get <b>publisher namespace entitlement ownership by sku</b></li><li>can be filled with <b>game namespace</b> in order to get <b>game namespace entitlement ownership by sku</b></li></ul></li></ul>",
        "operationId": "publicGetMyEntitlementOwnershipByItemId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TimedOwnership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/me/entitlements/ownershipToken": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Gets an entitlement ownership token",
        "description": "Gets an entitlement ownership token of specified itemIds, skus and appIds<p>The decoded ownership token header like below:<p><pre><code>{\r\n  \"kid\": \"9fd4cd5f991cebe3323605cd12d3b8bfdfc73fa4\",\r\n  \"typ\": \"JWT\",\r\n  \"alg\": \"RS256\"\r\n}\r\n</code></pre>That you can get the jwks by api <baseUrl>/platform/jwks, if the configured private key is same as IAM, <p>you can also get jwks from IAM endpoint. <p>The decoded ownership token payload like below:<p><pre><code>{\r\n \"namespace\": \"accelbyte\",\r\n \"entitlements\": [\r\n  {\r\n    \"itemId\": \"4c1296291f604c199f7bb7f0ee02e5f8\",\r\n    \"appType\": null,\r\n    \"appId\": null,\r\n    \"namespace\": \"accelbyte\",\r\n    \"itemNamespace\": \"accelbyte\",\r\n    \"sku\": \"prime-plus\"\r\n  },\r\n  {\r\n    \"itemId\": \"e8f4974cf45c4e1f8d4f0c6990c518bd\",\r\n    \"appType\": \"GAME\",\r\n    \"appId\": \"omeganebula\",\r\n    \"namespace\": \"accelbyte\",\r\n    \"itemNamespace\": \"accelbyte\",\r\n    \"sku\": \"APPG005ON\"\r\n  }\r\n ],\r\n\"sub\": \"66459eb6a4e44e6fb0040bd20c1079a5\",\r\n\"exp\": 1619624360,\r\n\"iat\": 1619624060\r\n}\r\n</code></pre><b>if there's no active entitlement for the specific params, the entitlements section will be omitted</b>.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetEntitlementOwnershipToken",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "skus", "in": "query", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OwnershipToken" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/any": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Exists any user active entitlement",
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicExistsAnyUserActiveEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "itemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "skus", "in": "query", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Ownership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement ownership by itemId",
        "description": "Get user entitlement ownership by itemId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserEntitlementOwnershipByItemId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TimedOwnership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/byAppId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user app entitlement by appId",
        "description": "Get user app entitlement by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserAppEntitlementByAppId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "appId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/AppEntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31142</td><td>Entitlement with appId [{appId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/sell": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Sell user entitlement",
        "description": "Sell user entitlement. If the entitlement is consumable, useCount is 0, the status will be CONSUMED. If the entitlement is durable, the status will be SOLD. Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "publicSellUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EntitlementSoldRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementSoldResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>31178</td><td>Entitlement [{entitlementId}] out of time range</td></tr><tr><td>31180</td><td>Duplicate request id: [{requestId}]</td></tr><tr><td>31181</td><td>Entitlement [{entitlementId}] is not sellable</td></tr><tr><td>31182</td><td>Entitlement [{entitlementId}] already sold</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/bySku": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement ownership by sku",
        "description": "Get user entitlement ownership by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserEntitlementOwnershipBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TimedOwnership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/byItemIds": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement ownership by itemIds",
        "description": "Get user entitlement ownership by itemIds.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserEntitlementOwnershipByItemIds",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "ids", "in": "query", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/EntitlementOwnership" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Query user entitlements",
        "description": "Query user entitlements for a specific user.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement list</li></ul>",
        "operationId": "publicQueryUserEntitlements",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          },
          { "name": "appType", "in": "query", "required": false, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "entitlementName", "in": "query", "required": false, "type": "string" },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "features",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/byItemId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement by itemId",
        "description": "Get user entitlement by itemId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserEntitlementByItemId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31144</td><td>Entitlement with itemId [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement",
        "description": "Get user entitlement.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: entitlement</li></ul>",
        "operationId": "publicGetUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/byAppId": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user app entitlement ownership by appId",
        "description": "Get user app entitlement ownership by appId.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserAppEntitlementOwnershipByAppId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "appId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Ownership" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/bySku": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Get user entitlement by sku",
        "description": "Get user entitlement by sku.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li></ul>",
        "operationId": "publicGetUserEntitlementBySku",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "sku", "in": "query", "required": true, "type": "string" },
          {
            "name": "entitlementClazz",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31143</td><td>Entitlement with sku [{sku}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/byAppType": {
      "get": {
        "tags": ["Entitlement"],
        "summary": "Query app entitlements by appType",
        "description": "Query app entitlements by appType.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=2 (READ)</li><li><i>Returns</i>: app entitlement pagination</li></ul>",
        "operationId": "publicQueryUserEntitlementsByAppType",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "appType", "in": "query", "required": true, "type": "string", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/AppEntitlementPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/entitlements/{entitlementId}/decrement": {
      "put": {
        "tags": ["Entitlement"],
        "summary": "Consume user entitlement",
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED. Client should pass item id in options if entitlement clazz is OPTIONBOX<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: consumed entitlement</li></ul>",
        "operationId": "publicConsumeUserEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "entitlementId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EntitlementDecrement" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EntitlementDecrementResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31121</td><td>OptionBox entitlement [{entitlementId}] use count is not 1</td></tr><tr><td>31122</td><td>OptionBox entitlement [{entitlementId}] options size is not 1</td></tr><tr><td>31123</td><td>Unable to acquire box item, box item [{itemId}] expired</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr><tr><td>31145</td><td>Option [{option}] doesn't exist in OptionBox entitlement [{entitlementId}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31173</td><td>Entitlement [{entitlementId}] is not consumable</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>31178</td><td>Entitlement [{entitlementId}] out of time range</td></tr><tr><td>31180</td><td>Duplicate request id: [{requestId}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/fulfillment": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize fulfillment",
        "description": "Anonymize fulfillment. At current it will only anonymize fulfillment history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeFulfillment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/fulfillment/history": {
      "get": {
        "tags": ["Fulfillment"],
        "summary": "Query fulfillment histories",
        "description": "Query fulfillment histories in a namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:FULFILLMENT\", action=2 (READ)</li><li><i>Returns</i>: query fulfillment history</li></ul>",
        "operationId": "queryFulfillmentHistories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["SUCCESS", "FAIL"] },
          { "name": "userId", "in": "query", "required": false, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentHistoryPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:FULFILLMENT", "action": "2" }
      }
    },
    "/admin/fulfillment/scripts/{id}": {
      "get": {
        "tags": ["FulfillmentScript"],
        "summary": "Get fulfillment script by id",
        "description": "Get fulfillment script by id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:FULFILLMENT\", action=2 (READ)</li><li><i>Returns</i>: get fulfillment script</li></ul>",
        "operationId": "getFulfillmentScript",
        "produces": ["application/json"],
        "parameters": [{ "name": "id", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentScriptInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>38141</td><td>Fulfillment script does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:FULFILLMENT", "action": "2" }
      },
      "post": {
        "tags": ["FulfillmentScript"],
        "summary": "Create fulfillment script",
        "description": "Create fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:FULFILLMENT\", action=1 (CREATE)</li></ul>Fulfillment scripts are used for adding custom fulfillment logic based on <b>ITEM_TYPE</b>: [MEDIA,INGAMEITEM] for now, and the custom scripts only cover grantDays.<br>Example for grantDays: <br><code>order && ((order.currency && order.currency.currencyCode) == 'LP' || order.isFree) ? 30 : -1</code><br>",
        "operationId": "createFulfillmentScript",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/FulfillmentScriptCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentScriptInfo" } },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>38171</td><td>Fulfillment script already exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:FULFILLMENT", "action": "1" }
      },
      "delete": {
        "tags": ["FulfillmentScript"],
        "summary": "Delete fulfillment script",
        "description": "Delete fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:FULFILLMENT\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteFulfillmentScript",
        "parameters": [{ "name": "id", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "delete fulfillment script successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:FULFILLMENT", "action": "8" }
      },
      "patch": {
        "tags": ["FulfillmentScript"],
        "summary": "Update fulfillment script",
        "description": "Update fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:FULFILLMENT\", action=4 (UPDATE)</li></ul>",
        "operationId": "updateFulfillmentScript",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/FulfillmentScriptUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentScriptInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>38141</td><td>Fulfillment script does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:FULFILLMENT", "action": "4" }
      }
    },
    "/admin/fulfillment/scripts/tests/eval": {
      "post": {
        "tags": ["FulfillmentScript"],
        "summary": "Test eval fulfillment script",
        "description": "<b>[TEST FACILITY ONLY]</b>Test eval fulfillment script.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:FULFILLMENT\", action=2 (READ)</li></ul>",
        "operationId": "testFulfillmentScriptEval",
        "parameters": [
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/FulfillmentScriptEvalTestRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentScriptEvalTestResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:FULFILLMENT", "action": "2" }
      }
    },
    "/admin/fulfillment/scripts": {
      "get": {
        "tags": ["FulfillmentScript"],
        "summary": "List all fulfillment scripts",
        "description": "List all fulfillment scripts.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:FULFILLMENT\", action=2 (READ)</li></ul>",
        "operationId": "listFulfillmentScripts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/FulfillmentScriptInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:FULFILLMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/fulfillment/code": {
      "post": {
        "tags": ["Fulfillment"],
        "summary": "Redeem campaign code",
        "description": "Redeem campaign code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\", action=1 (CREATED)</li><li><i>Returns</i>: fulfillment result</li></ul>",
        "operationId": "redeemCode",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/FulfillCodeRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr><tr><td>20006</td><td>optimistic lock</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/fulfillment/rewards": {
      "post": {
        "tags": ["Fulfillment"],
        "summary": "Fulfill rewards",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Fulfill rewards.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\", action=1 (CREATED)</li><li><i>Returns</i>: fulfillment result</li></ul>",
        "operationId": "fulfillRewards",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/RewardsRequest" } }
        ],
        "responses": {
          "204": { "description": "fulfill successfully" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/fulfillment": {
      "post": {
        "tags": ["Fulfillment"],
        "summary": "Fulfill item",
        "description": "Fulfill item.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\", action=1 (CREATED)</li><li><i>Returns</i>: fulfillment result</li></ul>",
        "operationId": "fulfillItem",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/FulfillmentRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT", "action": "1" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/fulfillment/code": {
      "post": {
        "tags": ["Fulfillment"],
        "summary": "Redeem campaign code",
        "description": "Redeem campaign code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT\", action=1 (CREATED)</li><li><i>Returns</i>: fulfillment result</li></ul>",
        "operationId": "publicRedeemCode",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/FulfillCodeRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/FulfillmentResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr><tr><td>20006</td><td>optimistic lock</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/achievement/xbl": {
      "get": {
        "tags": ["Achievement(Platform)"],
        "summary": "Get xbox live user achievements.",
        "description": "This API is used to get xbox live user achievements(Only for test).<p>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT, action=2 (READ)</li></ul>",
        "operationId": "getXblUserAchievements",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "xboxUserId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "$ref": "#/definitions/XblUserAchievements" } },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT", "action": "2" }
      },
      "put": {
        "tags": ["Achievement(Platform)"],
        "summary": "Update xbox live achievements.",
        "description": "This API is used to update xbox live achievements.<p>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT, action=4 (UPDATE)</li></ul>",
        "operationId": "updateXblUserAchievement",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XblAchievementUpdateRequest" } }
        ],
        "responses": {
          "204": { "description": "Update xbox achievements success" },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/achievement/steam": {
      "put": {
        "tags": ["Achievement(Platform)"],
        "summary": "Unlock steam achievement.",
        "description": "This API is used to unlock steam achievement.<p>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT, action=4 (UPDATE)</li></ul>",
        "operationId": "unlockSteamUserAchievement",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/SteamAchievementUpdateRequest" } }
        ],
        "responses": {
          "204": { "description": "Unlock steam achievements success" },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39244</td><td>Steam config does not exist</td></tr><tr><td>39245</td><td>Steam app id does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ACHIEVEMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/dlc/config/platformMap": {
      "get": {
        "tags": ["DLC"],
        "summary": "Get Platform DLC config",
        "description": "Get Platform DLC config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=<b>\"ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\"</b>, action=2 <b>(READ)</b></li></ul>",
        "operationId": "getPlatformDLCConfig",
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformDLCConfigInfo" } },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39341</td><td>Platform DLC config cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["DLC"],
        "summary": "Update Platform DLC config",
        "description": "Update Platform DLC config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated Platform DLC config</li></ul>",
        "operationId": "updatePlatformDLCConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PlatformDLCConfigUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformDLCConfigInfo" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["DLC"],
        "summary": "delete a Platform DLC config",
        "description": "delete a Platform DLC config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=<b>\"ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\"</b>, action=8 <b>(DELETE)</b></li></ul>",
        "operationId": "deletePlatformDLCConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace, only accept alphabet and numeric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/dlc/config/item": {
      "get": {
        "tags": ["DLC"],
        "summary": "Get DLC item config",
        "description": "Get DLC item config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=<b>\"ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\"</b>, action=2 <b>(READ)</b></li></ul>",
        "operationId": "getDLCItemConfig",
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/DLCItemConfigInfo" } },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39341</td><td>DLC item config cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["DLC"],
        "summary": "Update DLC item config",
        "description": "Update DLC item config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated DLC item config</li></ul>",
        "operationId": "updateDLCItemConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/DLCItemConfigUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/DLCItemConfigInfo" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39471</td><td>Duplicated dlc reward id [{dlcRewardId}] in namespace [{namespace}] </td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["DLC"],
        "summary": "delete a DLC item config",
        "description": "delete a DLC item config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=<b>\"ADMIN:NAMESPACE:{namespace}:DLC:CONFIG\"</b>, action=8 <b>(DELETE)</b></li></ul>",
        "operationId": "deleteDLCItemConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace, only accept alphabet and numeric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/xbl/cert": {
      "put": {
        "tags": ["IAP"],
        "summary": "Upload xbl business partner cert file",
        "description": "Upload xbl business partner cert file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated xbl iap config</li></ul>",
        "operationId": "updateXblBPCertFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "file", "in": "formData", "required": false, "type": "file" },
          { "name": "password", "in": "formData", "required": false, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/XblIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/twitch": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get twitch iap config",
        "description": "Get twitch iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: twitch iap config</li></ul>",
        "operationId": "getTwitchIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TwitchIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update twitch iap config",
        "description": "Update twitch iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated twitch iap config</li></ul>",
        "operationId": "updateTwitchIAPConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TwitchIAPConfigRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TwitchIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "Delete twitch iap config",
        "description": "Delete twitch iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteTwitchIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/epicgames": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get epicgames iap config",
        "description": "Get epic games iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: epic games iap config</li></ul>",
        "operationId": "getEpicGamesIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EpicGamesIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update epic games iap config",
        "description": "Update epic games iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated epic games iap config</li></ul>",
        "operationId": "updateEpicGamesIAPConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EpicGamesIAPConfigRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/EpicGamesIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "Delete epic games iap config",
        "description": "Delete epic games iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteEpicGamesIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/item": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get iap item config",
        "description": "Get iap item config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=<b>\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\"</b>, action=2 <b>(READ)</b></li></ul>",
        "operationId": "getIAPItemConfig",
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/IAPItemConfigInfo" } },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39341</td><td>IAP item config cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update iap item config",
        "description": "Update iap item config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated iap item config</li></ul>",
        "operationId": "updateIAPItemConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/IAPItemConfigUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/IAPItemConfigInfo" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39175</td><td>Duplicate IAP item mapping, IAPType: [{iapType}] and id: [{iapId}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "delete a iap item config",
        "description": "delete a iap item config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=<b>\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\"</b>, action=8 <b>(DELETE)</b></li></ul>",
        "operationId": "deleteIAPItemConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace, only accept alphabet and numeric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/xbl": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get xbox iap config",
        "description": "Get xbox iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: xbox iap config</li></ul>",
        "operationId": "getXblIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/XblIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update xbl iap config",
        "description": "Update xbl iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated xbl iap config</li></ul>",
        "operationId": "updateXblIAPConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XblIAPConfigRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/XblIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "Delete xbl iap config",
        "description": "Delete xbl iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteXblAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/apple": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get apple iap config",
        "description": "Get apple iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: apple iap config</li></ul>",
        "operationId": "getAppleIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/AppleIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update apple iap config",
        "description": "Update apple iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated apple iap config</li></ul>",
        "operationId": "updateAppleIAPConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AppleIAPConfigRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/AppleIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "Delete apple iap config",
        "description": "Delete apple iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteAppleIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/playstation": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get playstation iap config",
        "description": "Get playstation iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: playstation iap config</li></ul>",
        "operationId": "getPlayStationIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlayStationIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update playstation iap config",
        "description": "Update playstation iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated playstation iap config</li></ul>",
        "operationId": "updatePlaystationIAPConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PlaystationIAPConfigRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlayStationIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "Delete playstation iap config",
        "description": "Delete playstation iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deletePlaystationIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/google": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get google iap config",
        "description": "Get google iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: google iap config</li></ul>",
        "operationId": "getGoogleIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/GoogleIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update google iap config",
        "description": "Update google iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated google iap config</li></ul>",
        "operationId": "updateGoogleIAPConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/GoogleIAPConfigRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/GoogleIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "Delete google iap config",
        "description": "Delete google iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteGoogleIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/google/cert": {
      "put": {
        "tags": ["IAP"],
        "summary": "Upload google play p12 file",
        "description": "Upload google play p12 file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated google iap config</li></ul>",
        "operationId": "updateGoogleP12File",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "file", "in": "formData", "required": false, "type": "file" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/GoogleIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/iap/config/steam": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get steam iap config",
        "description": "Get steam iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: steam iap config</li></ul>",
        "operationId": "getSteamIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SteamIAPConfig" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["IAP"],
        "summary": "Update steam iap config",
        "description": "Update steam iap config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated steam iap config</li></ul>",
        "operationId": "updateSteamIAPConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/SteamIAPConfigRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SteamIAPConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["IAP"],
        "summary": "Delete steam iap config",
        "description": "Delete steam iap config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:IAP:CONFIG\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteSteamIAPConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/iap/consume/history": {
      "get": {
        "tags": ["IAP"],
        "summary": "Query IAP consume history",
        "description": "Query IAP consume history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=2 (READ)</li><li><i>Returns</i>: paginated iap consume history</li></ul>",
        "operationId": "queryUserIAPConsumeHistory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APPLE", "GOOGLE", "PLAYSTATION", "STEAM", "XBOX", "STADIA", "EPICGAMES", "TWITCH"]
          },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["PENDING", "FAIL", "SUCCESS"] },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/IAPConsumeHistoryPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/integrations": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize integrations",
        "description": "Anonymize integrations. At current it will only anonymize iap histories.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeIntegration",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/dlc": {
      "get": {
        "tags": ["DLC"],
        "summary": "Get user dlc by platform",
        "description": "Get user dlc by platform.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=2 (READ)</li><li><i>Returns</i>: user dlc</li></ul>",
        "operationId": "getUserDLCByPlatform",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "type", "in": "query", "required": true, "type": "string", "enum": ["PSN", "STEAM", "XBOX", "EPICGAMES"] }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/UserDLC" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/dlc/records": {
      "get": {
        "tags": ["DLC"],
        "summary": "Get user dlc records",
        "description": "Get user dlc records.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=2 (READ)</li><li><i>Returns</i>: user dlc</li></ul>",
        "operationId": "getUserDLC",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "type", "in": "query", "required": false, "type": "string", "enum": ["PSN", "STEAM", "XBOX", "EPICGAMES"] }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/UserDLCRecord" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/iap/mock/receipt": {
      "put": {
        "tags": ["IAP"],
        "summary": "Mock fulfill iap item.",
        "description": "<b>[TEST FACILITY ONLY] Forbidden in live environment. </b> Mock fulfill iap item without validate receipt.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "mockFulfillIAPItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/MockIAPReceipt" } }
        ],
        "responses": {
          "204": { "description": "Fulfill item successfully" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/iap/all": {
      "get": {
        "tags": ["IAP"],
        "summary": "Query all user IAP orders",
        "description": "Query all user IAP orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=2 (READ)</li><li><i>Returns</i>: list of iap orders</li></ul>",
        "operationId": "queryAllUserIAPOrders",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/IAPOrderPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/iap": {
      "get": {
        "tags": ["IAP"],
        "summary": "Query IAP orders",
        "description": "Query IAP orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP\", action=2 (READ)</li><li><i>Returns</i>: paginated iap orders</li></ul>",
        "operationId": "queryUserIAPOrders",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APPLE", "GOOGLE", "PLAYSTATION", "STEAM", "XBOX", "STADIA", "EPICGAMES", "TWITCH"]
          },
          { "name": "productId", "in": "query", "required": false, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["VERIFIED", "FULFILLED", "FAILED"] },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/IAPOrderPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/session/xbl": {
      "put": {
        "tags": ["Session(Platform)"],
        "summary": "Register/Update a session",
        "description": "This API is used to register/update a session on xbox.<p>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:INTEGRATION, action=4 (UPDATE)</li></ul>",
        "operationId": "registerXblSessions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XblUserSessionRequest" } }
        ],
        "responses": {
          "200": { "description": "OK", "schema": { "type": "object", "additionalProperties": { "type": "object" } } },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:INTEGRATION", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/iap/item/mapping": {
      "get": {
        "tags": ["IAP"],
        "summary": "Get iap item mapping",
        "description": "Get iap item mapping.<br>Other detail info: <ul></ul>",
        "operationId": "getIAPItemMapping",
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APPLE", "GOOGLE", "PLAYSTATION", "STEAM", "XBOX", "STADIA", "EPICGAMES", "TWITCH"]
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/IAPItemMappingInfo" } },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39341</td><td>IAP item config cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }]
      }
    },
    "/public/namespaces/{namespace}/users/me/iap/twitch/sync": {
      "put": {
        "tags": ["IAP"],
        "summary": "Sync my game twitch drops entitlements.",
        "description": "Sync my game twitch drops entitlements.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:IAP, action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncTwitchDropsEntitlement",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TwitchSyncRequest" } }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/TwitchSyncResult" } }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/dlc/steam/sync": {
      "put": {
        "tags": ["DLC"],
        "summary": "Sync steam dlc.",
        "description": "Sync steam dlc.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncSteamDLC",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/SteamDLCSyncRequest" } }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39124</td><td>IAP request platform [{platformId}] user id is not linked with current user</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/dlc/xbl/sync": {
      "put": {
        "tags": ["DLC"],
        "summary": "Sync Xbox dlc items.",
        "description": "Sync Xbox inventory's dlc items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncXboxDLC",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XblDLCSyncRequest" } }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/dlc/psn/sync": {
      "put": {
        "tags": ["DLC"],
        "summary": "Synchronize with dlc entitlements in PSN Store.",
        "description": "Synchronize with dlc entitlements in PSN Store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)</li><li><i>Returns</i>: result of synchronization</li></ul>",
        "operationId": "publicSyncPsnDlcInventory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PlayStationDLCSyncRequest" } }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr><tr><td>39127</td><td>Invalid service label [{serviceLabel}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/dlc/epicgames/sync": {
      "put": {
        "tags": ["DLC"],
        "summary": "Sync epic games dlc items",
        "description": "Sync epic games dlc items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncEpicGameDLC",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EpicGamesDLCSyncRequest" } }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/dlc/psn/sync/multiServiceLabels": {
      "put": {
        "tags": ["DLC"],
        "summary": "Synchronize with dlc entitlements in PSN Store with multiple service labels.",
        "description": "Synchronize with dlc entitlements in PSN Store with multiple service labels.<p>Other detail info: <ul><li><i>Required permission</i>: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)</li><li><i>Returns</i>: result of synchronization</li></ul>",
        "operationId": "publicSyncPsnDlcInventoryWithMultipleServiceLabels",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PlayStationDLCSyncMultiServiceLabelsRequest" }
          }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr><tr><td>39127</td><td>Invalid service label [{serviceLabel}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/steam/sync": {
      "put": {
        "tags": ["IAP"],
        "summary": "Sync steam inventory.",
        "description": "Sync steam inventory's items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncSteamInventory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/SteamSyncRequest" } }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39123</td><td>IAP request is not in valid application</td></tr><tr><td>39124</td><td>IAP request platform [{platformId}] user id is not linked with current user</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/apple/receipt": {
      "put": {
        "tags": ["IAP"],
        "summary": "Fulfill apple iap item.",
        "description": "Verify apple iap receipt and fulfill item.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "publicFulfillAppleIAPItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AppleIAPReceipt" } }
        ],
        "responses": {
          "204": { "description": "Fulfill item successfully" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39121</td><td>Apple iap receipt verify failed with status code [{statusCode}]</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39141</td><td>Apple iap receipt of transaction [{transactionId}] for productId [{}] does not exist</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39171</td><td>The bundle id in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/psn/sync/multiServiceLabels": {
      "put": {
        "tags": ["IAP"],
        "summary": "Synchronize with entitlements in PSN Store with multiple service labels.",
        "description": "Synchronize with entitlements in PSN Store with multiple service labels.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: result of synchronization</li></ul>",
        "operationId": "publicReconcilePlayStationStoreWithMultipleServiceLabels",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/PlayStationMultiServiceLabelsReconcileRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/PlayStationReconcileResult" } }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr><tr><td>39127</td><td>Invalid service label [{serviceLabel}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/psn/sync": {
      "put": {
        "tags": ["IAP"],
        "summary": "Synchronize with entitlements in PSN Store.",
        "description": "Synchronize with entitlements in PSN Store.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: result of synchronization</li></ul>",
        "operationId": "publicReconcilePlayStationStore",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PlayStationReconcileRequest" } }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/PlayStationReconcileResult" } }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr><tr><td>39127</td><td>Invalid service label [{serviceLabel}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/twitch/sync": {
      "put": {
        "tags": ["IAP"],
        "summary": "Sync twitch drops entitlements.",
        "description": "Sync twitch drops entitlements.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncTwitchDropsEntitlement_1",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TwitchSyncRequest" } }
        ],
        "responses": {
          "204": { "description": "Sync Successful" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/google/receipt": {
      "put": {
        "tags": ["IAP"],
        "summary": "Fulfill google iap item.",
        "description": "Verify google iap receipt and fulfill item.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "publicFulfillGoogleIAPItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/GoogleIAPReceipt" } }
        ],
        "responses": {
          "200": { "description": "Successful operation", "schema": { "$ref": "#/definitions/GoogleReceiptResolveResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39122</td><td>Google iap receipt is invalid with status code [{statusCode}] and error message [{message}]</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39172</td><td>The order id in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>39173</td><td>The purchase status of google play order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>39174</td><td>The google iap purchase time of order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/xbl/sync": {
      "put": {
        "tags": ["IAP"],
        "summary": "Sync Xbox inventory.",
        "description": "Sync Xbox inventory's items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncXboxInventory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XblReconcileRequest" } }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/XblReconcileResult" } }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/iap/epicgames/sync": {
      "put": {
        "tags": ["IAP"],
        "summary": "Sync epic games inventory.",
        "description": "Sync epic games inventory's items.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:IAP\", action=4 (UPDATE)</li><li><i>Returns</i>: </li></ul>",
        "operationId": "syncEpicGamesInventory",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EpicGamesReconcileRequest" } }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/EpicGamesReconcileResult" } }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39125</td><td>Invalid platform [{platformId}] user token</td></tr><tr><td>39126</td><td>User id [{}] in namespace [{}] doesn't link platform [{}]</td></tr>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/invoice/summary": {
      "get": {
        "tags": ["Invoice"],
        "summary": "Generate invoice summary",
        "description": "Generate invoice summary.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: query orders</li></ul>",
        "operationId": "generateInvoiceSummary",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          { "name": "itemId", "in": "query", "required": false, "type": "string" },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "feature", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/InvoiceSummary" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/invoice/details.csv": {
      "get": {
        "tags": ["Invoice"],
        "summary": "Download invoice details",
        "description": "Download invoice details as a csv file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: invoice details csv file</li></ul>",
        "operationId": "downloadInvoiceDetails",
        "produces": ["text/csv"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          { "name": "itemId", "in": "query", "required": false, "type": "string" },
          {
            "name": "itemType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
          },
          { "name": "feature", "in": "query", "required": false, "type": "string" }
        ],
        "responses": { "200": { "description": "Successful operation", "schema": { "type": "file" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/orders": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize order",
        "description": "Anonymize order. At current it will only anonymize order, order history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/orders/stats": {
      "get": {
        "tags": ["Order"],
        "summary": "Get Order Statistics",
        "description": "Get Order Statistics.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order statistics</li></ul>",
        "operationId": "getOrderStatistics",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderStatistics" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/orders/{orderNo}/refund": {
      "put": {
        "tags": ["Order"],
        "summary": "Refund order",
        "description": "Refund order by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=4 (UPDATE)</li></ul>",
        "operationId": "refundOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/OrderRefundCreate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32171</td><td>Order [{orderNo}] is not refundable</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ORDER", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/orders": {
      "get": {
        "tags": ["Order"],
        "summary": "Query orders",
        "description": "Query orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: query orders</li></ul>",
        "operationId": "queryOrders",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "CHARGED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "FULFILLED",
              "FULFILL_FAILED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "CLOSED",
              "DELETED"
            ]
          },
          {
            "name": "orderNos",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": false,
            "type": "string"
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is createdTime:desc, support sort group, e.g. sortBy=status:asc,createdTime:desc",
            "required": false,
            "type": "string",
            "default": "createdTime:desc"
          },
          {
            "name": "withTotal",
            "in": "query",
            "description": "return total in slice result when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderPagingResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/orders/{orderNo}": {
      "get": {
        "tags": ["Order"],
        "summary": "Get order",
        "description": "Get order by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order instance</li></ul>",
        "operationId": "getOrder",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:ORDER", "action": "2" }
      }
    },
    "/admin/orders": {
      "get": {
        "tags": ["Order(Dedicated)"],
        "summary": "Sync orders",
        "description": "Sync orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:ORDER\", action=2 (READ)</li><li><i>Returns</i>: sync orders</li></ul>",
        "operationId": "syncOrders",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          { "name": "nextEvaluatedKey", "in": "query", "required": false, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderSyncResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/receipt.pdf": {
      "get": {
        "tags": ["Order"],
        "summary": "Download user order receipt",
        "description": "Download user order receipt by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order receipt pdf</li></ul>",
        "operationId": "downloadUserOrderReceipt",
        "produces": ["application/pdf"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Successful operation", "schema": { "type": "file" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32173</td><td>Receipt of order [{orderNo}] is not downloadable</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/history": {
      "get": {
        "tags": ["Order"],
        "summary": "Get user order histories",
        "description": "Get user order history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order history</li></ul>",
        "operationId": "getUserOrderHistories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/OrderHistoryInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders": {
      "get": {
        "tags": ["Order"],
        "summary": "Query user orders",
        "description": "Query user orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "queryUserOrders",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "CHARGED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "FULFILLED",
              "FULFILL_FAILED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "CLOSED",
              "DELETED"
            ]
          },
          { "name": "itemId", "in": "query", "required": false, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      },
      "post": {
        "tags": ["Order"],
        "summary": "Admin Create an order",
        "description": "Admin Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=1 (CREATE)</li><li>It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT</li><li>sandbox default value is <b>false</b></li><li>platform default value is <b>Other</b></li><li><i>Returns</i>: created order</li></ul>",
        "operationId": "adminCreateUserOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AdminOrderCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32121</td><td>Order price mismatch</td></tr><tr><td>32122</td><td>Item type [{itemType}] does not support</td></tr><tr><td>32123</td><td>Item is not purchasable</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr><tr><td>32126</td><td>Section ID is required for placing this order</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>32124</td><td>Invalid currency namespace</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>49147</td><td>Published season does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32175</td><td>Exceed item [{itemId}] max count [{maxCount}] per user</td></tr><tr><td>32176</td><td>Exceed item [{itemId}] max count [{maxCount}]</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr><tr><td>49183</td><td>Pass item does not match published season pass</td></tr><tr><td>49184</td><td>Tier item does not match published season tier</td></tr><tr><td>49185</td><td>Season has not started</td></tr><tr><td>49186</td><td>Pass already owned</td></tr><tr><td>49187</td><td>Exceed max tier count</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/countOfItem": {
      "get": {
        "tags": ["Order"],
        "summary": "Get the count of purchased item",
        "description": "This API is used to get the count of purchased item which is the order target.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: Item purchased count</li></ul>",
        "operationId": "countOfPurchasedItem",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PurchasedItemCount" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}": {
      "get": {
        "tags": ["Order"],
        "summary": "Get an order",
        "description": "Get an order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "getUserOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      },
      "put": {
        "tags": ["Order"],
        "summary": "Update order status",
        "description": "Update order status.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: updated order</li></ul>",
        "operationId": "updateUserOrderStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/OrderUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/fulfill": {
      "put": {
        "tags": ["Order"],
        "summary": "Fulfill an order",
        "description": "Fulfill an order if the order is charged but fulfill failed.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: fulfilled order</li></ul>",
        "operationId": "fulfillUserOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32172</td><td>Invalid order status [{status}] for order [{orderNo}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/notifications": {
      "post": {
        "tags": ["Order"],
        "summary": "Web hook for payment notification",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used as a web hook for payment notification from justice payment service.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: Process result</li></ul>",
        "operationId": "processUserOrderNotification",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TradeNotification" } }
        ],
        "responses": { "204": { "description": "process successfully" }, "400": { "description": "process failed" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/orders/{orderNo}/grant": {
      "get": {
        "tags": ["Order"],
        "summary": "Get user order grant",
        "description": "Get user order grant that fulfilled by this order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order grant</li></ul>",
        "operationId": "getUserOrderGrant",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderGrantInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders": {
      "get": {
        "tags": ["Order"],
        "summary": "Query user orders",
        "description": "Query user orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "publicQueryUserOrders",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": false, "type": "string" },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "CHARGED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "FULFILLED",
              "FULFILL_FAILED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "CLOSED",
              "DELETED"
            ]
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      },
      "post": {
        "tags": ["Order"],
        "summary": "Create an order",
        "description": "Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=1 (CREATE)</li><li><i>Optional permission(user with this permission will create sandbox order)</i>: resource=\"SANDBOX\", action=1 (CREATE)</li><li>It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT</li><li><i>Returns</i>: created order</li></ul>",
        "operationId": "publicCreateUserOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/OrderCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32121</td><td>Order price mismatch</td></tr><tr><td>32122</td><td>Item type [{itemType}] does not support</td></tr><tr><td>32123</td><td>Item is not purchasable</td></tr><tr><td>32125</td><td>The user does not meet the purchase conditions</td></tr><tr><td>32126</td><td>Section ID is required for placing this order</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>49147</td><td>Published season does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32175</td><td>Exceed item [{itemId}] max count [{maxCount}] per user</td></tr><tr><td>32176</td><td>Exceed item [{itemId}] max count [{maxCount}]</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr><tr><td>49183</td><td>Pass item does not match published season pass</td></tr><tr><td>49184</td><td>Tier item does not match published season tier</td></tr><tr><td>49185</td><td>Season has not started</td></tr><tr><td>49186</td><td>Pass already owned</td></tr><tr><td>49187</td><td>Exceed max tier count</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "1" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}": {
      "get": {
        "tags": ["Order"],
        "summary": "Get user order",
        "description": "Get user order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order</li></ul>",
        "operationId": "publicGetUserOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/receipt.pdf": {
      "get": {
        "tags": ["Order"],
        "summary": "Download user order receipt",
        "description": "Download user order receipt by orderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: order receipt pdf</li></ul>",
        "operationId": "publicDownloadUserOrderReceipt",
        "produces": ["application/pdf"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Successful operation", "schema": { "type": "file" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32173</td><td>Receipt of order [{orderNo}] is not downloadable</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/cancel": {
      "put": {
        "tags": ["Order"],
        "summary": "Cancel user order",
        "description": "Cancel user order.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=4 (UPDATE)</li><li><i>Returns</i>: cancelled order</li></ul>",
        "operationId": "publicCancelUserOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/OrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32177</td><td>Order [{orderNo}] is not cancelable</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/orders/{orderNo}/history": {
      "get": {
        "tags": ["Order"],
        "summary": "Get user order histories",
        "description": "Get user order histories.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:ORDER\", action=2 (READ)</li><li><i>Returns</i>: get order history</li></ul>",
        "operationId": "publicGetUserOrderHistories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "orderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/OrderHistoryInfo" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/payment": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize payment",
        "description": "Anonymize payment. At current it will only anonymize payment order, payment order history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizePayment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/payment/config/callback": {
      "get": {
        "tags": ["PaymentCallbackConfig"],
        "summary": "Get payment callback configuration",
        "description": "Get payment callback configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: Payment callback config</li></ul>",
        "operationId": "getPaymentCallbackConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentCallbackConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33243</td><td>Payment callback config for [{namespace}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["PaymentCallbackConfig"],
        "summary": "Update payment callback configuration",
        "description": "Update payment callback configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: Payment callback config</li></ul>",
        "operationId": "updatePaymentCallbackConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentCallbackConfigUpdate" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentCallbackConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/checkoutconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update checkout.com config",
        "description": "Update checkout.com config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateCheckoutConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "validate", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CheckoutConfig" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/matched": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Debug matched payment merchant config(internal)",
        "description": "Debug matched payment merchant config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment merchant config info</li></ul>",
        "operationId": "debugMatchedPaymentMerchantConfig",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "query", "description": "namespace", "required": false, "type": "string", "default": "*" },
          { "name": "region", "in": "query", "description": "region", "required": false, "type": "string", "default": "*" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/checkoutconfig/test": {
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Test checkout.com configuration",
        "description": "Test checkout.com configuration. <h4>Check List:</h4> <ul><li>publicKey</li><li>secretKey</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testCheckoutConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CheckoutConfig" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/adyenconfig/test": {
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Test adyen configuration",
        "description": "Test adyen configuration. <h4>Check List:</h4> <ul><li>apiKey</li><li>merchantAccount</li></ul><h4>Non-check list:</h4><ul><li>notificationHmacKey</li><li>notificationUsername</li><li>notificationPassword</li><li>liveEndpointUrlPrefix</li><li>allowedPaymentMethods</li><li>blockedPaymentMethods</li><li>settings</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testAdyenConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AdyenConfig" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Get payment merchant config",
        "description": "Get payment merchant config by id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment merchant config info</li></ul>",
        "operationId": "getPaymentMerchantConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "id", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/{id}/stripeconfig/test": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Test stripe configuration by id",
        "description": "Test stripe configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testStripeConfigById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/stripeconfig/test": {
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Test stripe configuration",
        "description": "Test stripe configuration. <h4>Check List:</h4> <ul><li>secretKey</li><li>allowedPaymentMethodTypes</li></ul><h4>Non-check list:</h4><ul><li>publishableKey</li><li>webhookSecret</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testStripeConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/StripeConfig" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/wxpayconfig/test": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Test wxPay configuration by id",
        "description": "Test WxPay configuration in payment merchant config. Reference: <a href=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\">WxPay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test WxPay config</li></ul>",
        "operationId": "testWxPayConfigById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "name": "id", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/{id}/stripeconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update stripe config",
        "description": "Update stripe config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateStripeConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "validate", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/StripeConfig" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/adyenconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update adyen config",
        "description": "Update adyen config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateAdyenConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "validate", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AdyenConfig" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/checkoutconfig/test": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Test checkout.com configuration by id",
        "description": "Test checkout.com configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testCheckoutConfigById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/{id}/alipayconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update alipay configuration",
        "description": "Update alipay configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateAliPayConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "validate", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AliPayConfig" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/wxpayconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update wxpay configuration",
        "description": "Update wxpay configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateWxPayConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "validate", "in": "query", "required": false, "type": "boolean", "default": false },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/WxPayConfigRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/paypalconfig/test": {
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Test PayPal configuration",
        "description": "Test PayPal configuration. <h4>Check List:</h4> <ul><li>clientID</li><li>clientSecret</li></ul><h4>Non-check list:</h4><ul><li>webHookId</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testPayPalConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PayPalConfig" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/alipayconfig/test": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Test Alipay configuration by id",
        "description": "Test AliPay configuration in payment merchant config. Reference: <a href=\"https://docs.open.alipay.com/270/alipay.trade.page.pay\">Alipay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test alipay config</li></ul>",
        "operationId": "testAliPayConfigById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/{id}/adyenconfig/test": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Test adyen configuration by id",
        "description": "Test adyen configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test adyen config</li></ul>",
        "operationId": "testAdyenConfigById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/{id}/xsollaconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update xsolla configuration",
        "description": "Update xsolla configuration. Reference: <a href=\"https://developers.xsolla.com/?#simple-checkout\">Xsolla Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateXsollaConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "validate", "in": "query", "required": false, "type": "boolean", "default": false },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XsollaConfig" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/paypalconfig/test": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Test PayPal configuration by id",
        "description": "Test PayPal configuration in payment merchant config. Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testPayPalConfigById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>33045</td><td>errors.net.accelbyte.platform.payment.payment_merchant_config_not_found</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/merchant/xsollaconfig/test": {
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Test xsolla configuration",
        "description": "Check xsolla configuration, Reference: <a href=\"https://developers.xsolla.com/?#simple-checkout\">Xsolla Document</a>.<h4>Check List:</h4> <ul><li>merchantId</li><li>projectId</li><li>apiKey</li></ul><h4>Non-check list:</h4><ul><li>projectSecretKey</li></ul>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testXsollaConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XsollaConfig" } }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/wxpayconfig/cert": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Upload wxpay cert file",
        "description": "Upload wxpay cert file.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateWxPayConfigCert",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "file", "in": "formData", "required": false, "type": "file" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/wxpayconfig/test": {
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Test wxPay configuration",
        "description": "Test WxPay configuration. Reference: <a href=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1\">WxPay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test WxPay config</li></ul>",
        "operationId": "testWxPayConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/WxPayConfigRequest" } }],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/alipayconfig/test": {
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Test Alipay configuration",
        "description": "Test AliPay configuration.Reference: <a href=\"https://docs.open.alipay.com/270/alipay.trade.page.pay\">Alipay Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: test result</li></ul>",
        "operationId": "testAliPayConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/AliPayConfig" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/xsollauiconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update xsolla UI configuration",
        "description": "Update xsolla UI configuration.Reference: <a href=\"https://developers.xsolla.com/api.html#ui-integrations\">Xsolla Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updateXsollaUIConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/XsollaPaywallConfigRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/paypalconfig": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update PayPal config",
        "description": "Update PayPal config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: updated payment merchant config</li></ul>",
        "operationId": "updatePayPalConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          { "name": "validate", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": true },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PayPalConfig" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentMerchantConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/payment/config/merchant/{id}/xsollaconfig/test": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Test xsolla configuration by id",
        "description": "Test xsolla configuration in payment merchant config. Reference: <a href=\"https://developers.xsolla.com/?#simple-checkout\">Xsolla Document</a>.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: test xsolla config</li></ul>",
        "operationId": "testXsollaConfigById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "name": "id", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TestResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/payment/notifications": {
      "get": {
        "tags": ["Payment"],
        "summary": "Query payment notifications",
        "description": "Query payment notifications.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION\", action=2 (READ)</li><li><i>Returns</i>: Payment notifications</li></ul>",
        "operationId": "queryPaymentNotifications",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "query", "required": false, "type": "string" },
          { "name": "externalId", "in": "query", "required": false, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["PROCESSED", "ERROR", "WARN", "IGNORED"] },
          { "name": "notificationType", "in": "query", "required": false, "type": "string" },
          {
            "name": "notificationSource",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "required": false,
            "type": "string"
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentNotificationPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get payment order",
        "description": "Get payment order by paymentOrderNo.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: payment order instance</li></ul>",
        "operationId": "getPaymentOrder",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "2" }
      },
      "put": {
        "tags": ["Payment"],
        "summary": "Charge payment order without payment flow",
        "description": "<b>[TEST FACILITY ONLY] Forbidden in live environment. </b> Charge payment order without payment flow for unpaid payment order, usually for test usage to simulate real currency payment process.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: payment order instance</li></ul>",
        "operationId": "chargePaymentOrder",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentOrderChargeRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/byExtTxId": {
      "get": {
        "tags": ["Payment"],
        "summary": "List external order No by external transaction id",
        "description": "List external order No by external transaction id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: payment orders</li></ul>",
        "operationId": "listExtOrderNoByExtTxId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "extTxId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "type": "array", "items": { "type": "string" } } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/simulate-notification": {
      "put": {
        "tags": ["Payment"],
        "summary": "Simulate payment notification",
        "description": "<b>[TEST FACILITY ONLY] Forbidden in live environment. </b> Simulate payment notification on sandbox payment order, usually for test usage to simulate real currency payment notification.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=4 (UPDATE)</li><li><i>Returns</i>: notification process result</li></ul>",
        "operationId": "simulatePaymentOrderNotification",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentOrderNotifySimulation" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/NotificationProcessResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/status": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get payment order charge status",
        "description": "Get payment order charge status.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: payment order charge status</li></ul>",
        "operationId": "getPaymentOrderChargeStatus",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderChargeStatus" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders": {
      "get": {
        "tags": ["Payment"],
        "summary": "Query payment orders",
        "description": "Query payment orders.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: query payment orders</li></ul>",
        "operationId": "queryPaymentOrders",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INIT",
              "AUTHORISED",
              "AUTHORISE_FAILED",
              "CHARGED",
              "CHARGE_FAILED",
              "NOTIFICATION_OF_CHARGEBACK",
              "REQUEST_FOR_INFORMATION",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "REFUNDING",
              "REFUNDED",
              "REFUND_FAILED",
              "DELETED"
            ]
          },
          { "name": "channel", "in": "query", "required": false, "type": "string", "enum": ["EXTERNAL", "INTERNAL"] },
          { "name": "extTxId", "in": "query", "required": false, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "2" }
      },
      "post": {
        "tags": ["Payment(Dedicated)"],
        "summary": "Create payment order by dedicated server",
        "description": "<p>This API is used to create payment order from non justice service. e.g. from dedicated server, the result contains the payment station url.</p><p><strong>Path Parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that payment order resides in, should be publisher namespace if it's a Steam like platform that share <br>payment config cross namespaces, otherwise it's the game namespace</td></tr></table><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>extOrderNo</td><td>String</td><td>Yes</td><td>External order number, it should be unique in invoker order system</td></tr><tr><td>sku</td><td>String</td><td>No</td><td>Item identity</td></tr><tr><td>targetNamespace</td><td>String</td><td>Yes</td><td>The game namespace</td></tr><tr><td>targetUserId</td><td>String</td><td>Yes</td><td>User id for the order owner in game namespace</td></tr><tr><td>extUserId</td><td>String</td><td>No</td><td>External user id, can be user character id </td></tr><tr><td>price</td><td>int</td><td>Yes</td><td>price which should be greater than 0</td></tr><tr><td>title</td><td>String</td><td>Yes</td><td>Item title</td></tr><tr><td>description</td><td>String</td><td>Yes</td><td>Item description</td></tr><tr><td>currencyCode</td><td>String</td><td>No</td><td>Currency code, default is USD</td></tr><tr><td>currencyNamespace</td><td>String</td><td>No</td><td>Currency namespace, default is publisher namespace</td></tr><tr><td>region</td><td>String</td><td>No</td><td>Country of the user, will get from user info if not present</td></tr><tr><td>language</td><td>String</td><td>No</td><td>Language of the user</td></tr><tr><td>sandbox</td><td>Boolean</td><td>No</td><td>set to true will create sandbox order that not real paid for xsolla/alipay and will not validate <br>price for wxpay.</td></tr><tr><td>returnUrl</td><td>String</td><td>No</td><td>customized return url for redirect once payment finished, leave unset to use configuration in <br>namespace</td></tr><tr><td>notifyUrl</td><td>String</td><td>No</td><td>customized notify url for payment web hook, leave unset to use configuration in namespace</td></tr><tr><td>customParameters</td><td>String</td><td>No</td><td>Custom parameters</td></tr></table></pre><p><strong>Request Body Example:</strong></p><pre><code style='overflow: auto'>{\r\n           \"extOrderNo\": \"123456789\",\n           \"sku\": \"sku\",\n           \"targetNamespace\": \"game1\",\n           \"targetUserId\": \"94451623768940d58416ca33ca767ec3\",\n           \"extUserId\": \"678\",\n           \"title\": \"Frostmourne\",\n           \"description\\\": \"Here was power. Here was despair\",\n           \"price\": 100,\n           \"region\": \"CN\", \n           \"language\": \"zh-CN\", \n           \"currencyCode\": \"USD\",\n           \"currencyNamespace\": \"accelbyte\"\r\n}</pre></code><h4>Payment Notification:</h4><p>After user complete the payment, it will send notification to configured web hook, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval</p><p><strong>Payment notification parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>payload</td><td>String</td><td>Yes</td><td>Payment notification payload in json string </td></tr><tr><td>sign</td><td>String</td><td>Yes</td><td>sha1 hex signature for payload and private key</td></tr></table></pre><p><strong>Payment notification parameter Example:</strong></p><pre><code style='overflow: auto'>{\r\n       \"payload\": \"{\n           \\\"type\\\": \\\"payment\\\",\n           \\\"nonceStr\\\": \\\"34c1dcf3eb58455eb161465bbfc0b590\\\",\n           \\\"paymentOrderNo\\\": \\\"18081239088\\\",\n           \\\"namespace\\\": \\\"accelbyte\\\",\n           \\\"targetNamespace\\\": \\\"game1\\\",\n           \\\"targetUserId\\\": \\\"94451623768940d58416ca33ca767ec3\\\",\n           \\\"extOrderNo\\\": \\\"123456789\\\",\n           \\\"sku\\\": \\\"sku\\\",\n           \\\"extUserId\\\": \\\"678\\\",\n           \\\"price\\\": 100,\n           \\\"paymentProvider\\\": \\\"XSOLLA\\\",\n           \\\"vat\\\": 0,\n           \\\"salesTax\\\": 0,\n           \\\"paymentProviderFee\\\": 0,\n           \\\"paymentMethodFee\\\": 0,\n           \\\"currency\\\": {\n                   \\\"currencyCode\\\": \\\"USD\\\",\n                   \\\"currencySymbol\\\": \\\"$\\\",\n                   \\\"currencyType\\\": \\\"REAL\\\",\n                   \\\"namespace\\\": \\\"accelbyte\\\",\n                   \\\"decimals\\\": 2\n               },\n           \\\"status\\\": \\\"CHARGED\\\",\n           \\\"createdTime\\\": \\\"2018-07-28T00:39:16.274Z\\\",\n           \\\"chargedTime\\\": \\\"2018-07-28T00:39:16.274Z\\\"\n       }\",\r\n       \"sign\":\"e31fb92516cc9faaf50ad70343e1293acec6f3d5\"\r\n}</pre></code><p><strong>Payment notification payload parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>type</td><td>String</td><td>Yes</td><td>Notification type: 'payment'</td></tr><tr><td>paymentOrderNo</td><td>String</td><td>Yes</td><td>Payment system generated order number</td></tr><tr><td>extOrderNo</td><td>String</td><td>No</td><td>External order number that passed by invoker</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that related payment order resides in</td></tr><tr><td>targetNamespace</td><td>String</td><td>Yes</td><td>The game namespace</td></tr><tr><td>targetUserId</td><td>String</td><td>Yes</td><td>The user id in game namespace</td></tr><tr><td>sku</td><td>String</td><td>No</td><td>Item identify, it will return if pass it when create payment</td></tr><tr><td>extUserId</td><td>String</td><td>No</td><td>External user id, can be character id, it will return if pass it when create payment</td></tr><tr><td>price</td><td>int</td><td>Yes</td><td>Price of item</td></tr><tr><td>paymentProvider</td><td>String</td><td>Yes</td><td>Payment provider, allowed values: xsolla/alipay/wxpay/wallet</td></tr><tr><td>vat</td><td>int</td><td>Yes</td><td>Payment order VAT</td></tr><tr><td>salesTax</td><td>int</td><td>Yes</td><td>Payment order sales tax</td></tr><tr><td>paymentProviderFee</td><td>int</td><td>Yes</td><td>Payment provider fee</td></tr><tr><td>paymentMethodFee</td><td>int</td><td>Yes</td><td>Payment method fee</td></tr><tr><td>currency</td><td>Map</td><td>Yes</td><td>Payment order currency info</td></tr><tr><td>status</td><td>String</td><td>Yes</td><td>Payment order status</td></tr><tr><td>statusReason</td><td>String</td><td>No</td><td>Payment order status reason</td></tr><tr><td>createdTime</td><td>Datetime</td><td>No</td><td>The time of the order created</td></tr><tr><td>chargedTime</td><td>Datetime</td><td>No</td><td>The time of the order charged</td></tr><tr><td>customParameters</td><td>Map</td><td>No</td><td>custom parameters, will return if pass it when create payment</td></tr><tr><td>nonceStr</td><td>String</td><td>Yes</td><td>Random string, max length is 32, can be timestamp or uuid</td></tr></table></pre><p><strong>Currency info parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>currencyCode</td><td>String</td><td>Yes</td><td>Currency Code</td></tr><tr><td>currencySymbol</td><td>String</td><td>Yes</td><td>Currency Symbol</td></tr><tr><td>currencyType</td><td>String</td><td>Yes</td><td>Currency type(REAL/VIRTUAL)</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Currency namespace</td></tr><tr><td>decimals</td><td>int</td><td>Yes</td><td>Currency decimals</td></tr></table></pre><h4>Encryption Rule:</h4><p>Concat payload json string and private key and then do sha1Hex.</p><h4>Other detail info:</h4> <ul><li><i>Token type</i>: client token</li><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=1 (CREATE)</li><li><i>Optional permission(user with this permission will create sandbox order)</i>: resource=\"SANDBOX\", action=1 (CREATE)</li><li>It will be forbidden while the target user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT</li><li><b>cross namespace allowed</b></li><li><i>Returns</i>: created payment order info</li></ul>",
        "operationId": "createPaymentOrderByDedicated",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/ExternalPaymentOrderCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderCreateResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33121</td><td>Recurring payment failed with code: [{errorCode}] and message: [{errorMessage}] by provider: [{provider}]</td></tr><tr><td>33122</td><td>Subscription not match when create payment order</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>33145</td><td>Recurring token not found</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr><tr><td>33173</td><td>ExtOrderNo [{extOrderNo}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "1" }
      }
    },
    "/admin/payment/orders": {
      "get": {
        "tags": ["Payment(Dedicated)"],
        "summary": "Sync payment orders",
        "description": "Sync payment orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT\", action=2 (READ)</li><li><i>Returns</i>: sync payment orders</li></ul>",
        "operationId": "syncPaymentOrders",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "required": true,
            "type": "string"
          },
          { "name": "nextEvaluatedKey", "in": "query", "required": false, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderSyncResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT", "action": "2" }
      }
    },
    "/admin/payment/config/provider": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Query payment provider config",
        "description": "Query payment provider config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider config list</li></ul>",
        "operationId": "queryPaymentProviderConfig",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "query", "description": "namespace", "required": false, "type": "string" },
          { "name": "region", "in": "query", "description": "region", "required": false, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentProviderConfigPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      },
      "post": {
        "tags": ["PaymentConfig"],
        "summary": "Create payment provider config",
        "description": "Create payment provider config.<br><pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>namespace, * indicates all namespace</td></tr><tr><td>region</td><td>String</td><td>Yes</td><td>region, * indicates all regions</td></tr><tr><td>aggregate</td><td>String</td><td>No</td><td>aggregate payment provider, such as XSOLLA, ADYEN, STRIPE</td></tr><tr><td>specials</td><td>List</td><td>No</td><td>special payment provider, such as ALIPAY, WXPAY</td></tr></table></pre>payment provider applied has priority: <ol><li>namespace and region match</li><li>namespace matches and region is *</li><li>region matches and namespace is *</li><li>namespace and region are *</li></ol>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=1 (CREATE)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "createPaymentProviderConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentProviderConfigEdit" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentProviderConfigInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33271</td><td>Payment provider config for namespace [{namespace}] and region [{region}] already exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "1" }
      }
    },
    "/admin/payment/config/provider/aggregate": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Get aggregate payment providers",
        "description": "Get aggregate payment providers, such as XSOLLA, ADYEN.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider list</li></ul>",
        "operationId": "getAggregatePaymentProviders",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"] }
            }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/provider/matched": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Debug matched payment provider config(internal)",
        "description": "Debug matched payment provider config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "debugMatchedPaymentProviderConfig",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "query", "description": "namespace", "required": false, "type": "string", "default": "*" },
          { "name": "region", "in": "query", "description": "region", "required": false, "type": "string", "default": "*" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentProviderConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/provider/special": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Get special payment providers",
        "description": "Get special payment providers, such as ALIPAY, WXPAY.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider list</li></ul>",
        "operationId": "getSpecialPaymentProviders",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"] }
            }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      }
    },
    "/admin/payment/config/provider/{id}": {
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update payment provider config",
        "description": "Update payment provider config.<br><pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>namespace, * indicates all namespace</td></tr><tr><td>region</td><td>String</td><td>Yes</td><td>region, * indicates all regions</td></tr><tr><td>aggregate</td><td>String</td><td>No</td><td>aggregate payment provider, such as XSOLLA, ADYEN, STRIPE</td></tr><tr><td>specials</td><td>List</td><td>No</td><td>special payment provider, such as ALIPAY, WXPAY</td></tr></table></pre>payment provider applied has priority: <ol><li>namespace and region match</li><li>namespace matches and region is *</li><li>region matches and namespace is *</li><li>namespace and region are *</li></ol>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "updatePaymentProviderConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "id", "in": "path", "description": "id", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentProviderConfigEdit" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentProviderConfigInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33271</td><td>Payment provider config for namespace [{namespace}] and region [{region}] already exists</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      },
      "delete": {
        "tags": ["PaymentConfig"],
        "summary": "Delete payment provider config",
        "description": "Delete payment provider config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=8 (DELETE)</li><li><i>Returns</i>: payment provider config</li></ul>",
        "operationId": "deletePaymentProviderConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "id", "in": "path", "description": "id", "required": true, "type": "string" }],
        "responses": {
          "204": { "description": "Delete successfully" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "8" }
      }
    },
    "/admin/payment/config/tax": {
      "get": {
        "tags": ["PaymentConfig"],
        "summary": "Get payment global tax config",
        "description": "Get payment global tax config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: payment provider list</li></ul>",
        "operationId": "getPaymentTaxConfig",
        "produces": ["application/json"],
        "parameters": [],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentTaxConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["PaymentConfig"],
        "summary": "Update payment global tax config",
        "description": "Update payment tax config.<br><pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>taxJarEnabled</td><td>Boolean</td><td>false</td></tr><tr><td>taxJarApiToken</td><td>String</td><td>false</td><td>required, when taxJarEnabled is true and there is no existing token</td></tr><tr><td>sandboxTaxJarApiToken</td><td>String</td><td>false</td><td>optional</td></tr><tr><td>taxJarProductCodesMapping</td><td>Map</td><td>No</td><td>key is item type(APP|COINS|INGAMEITEM|BUNDLE|CODE|SUBSCRIPTION) and value is product tax code: https://developers.taxjar.com/api/reference/?ruby#get-list-tax-categories</td></tr></table></pre></ol>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:PAYMENT:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: payment global tax config</li></ul>",
        "operationId": "updatePaymentTaxConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentTaxConfigEdit" } }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentTaxConfigInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:PAYMENT:CONFIG", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/payment/orders": {
      "post": {
        "tags": ["Payment"],
        "summary": "Create payment order",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to create payment order from justice service. The result contains the payment station url.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT\", action=1 (CREATE)</li><li>It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT</li><li><i>Returns</i>: created order</li></ul>",
        "operationId": "createUserPaymentOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentOrderCreate" } }
        ],
        "responses": {
          "201": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33121</td><td>Recurring payment failed with code: [{errorCode}] and message: [{errorMessage}] by provider: [{provider}]</td></tr><tr><td>33122</td><td>Subscription not match when create payment order</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>33145</td><td>Recurring token not found</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/payment/orders/{paymentOrderNo}/refund": {
      "put": {
        "tags": ["Payment"],
        "summary": "Refund payment order",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used to refund order by paymentOrderNo from justice service.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT\", action=4 (UPDATE)</li></ul>",
        "operationId": "refundUserPaymentOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentOrderRefund" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33172</td><td>Payment order [{paymentOrderNo}] is not refundable</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/payment/orders/{paymentOrderNo}/refund": {
      "put": {
        "tags": ["Payment(Dedicated)"],
        "summary": "Refund payment order by dedicated server",
        "description": "<p>This API is used to refund payment order by paymentOrderNo from non justice service. e.g. dedicated server. <ul><li>if the status field of response json is \"REFUNDED\", usually wallet paid, it indicates payment order already refunded</li><li>if the status field of response json is \"REFUNDING\", usually real money paid, platform will send notification to registered notify url once refund successfully</li> </ul></p><p><strong>Path Parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that payment order resides in</td></tr><tr><td>paymentOrderNo</td><td>String</td><td>Yes</td><td>Payment order number</td></tr></table></pre><p><strong>Request Body Parameters:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>description</td><td>String</td><td>Yes</td><td>Refund description</td></tr></table></pre><p><strong>Request Body Example:</strong></p><pre><code style='overflow: auto'>{\r\n           \"description\": \"Repeated item.\"\r\n}</pre></code><h4>Refund Notification:</h4><p>It will send notification to configured web hook after refund successfully, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval</p><p><strong>Refund notification parameter:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>payload</td><td>String</td><td>Yes</td><td>Refund notification payload in json string </td></tr><tr><td>sign</td><td>String</td><td>Yes</td><td>sha1 hex signature for payload and private key</td></tr></table></pre><p><strong>Refund notification Example:</strong></p><pre><code style='overflow: auto'>{\r\n       \"payload\": \"{\n           \\\"type\\\": \\\"payment\\\",\n           \\\"nonceStr\\\": \\\"34c1dcf3eb58455eb161465bbfc0b590\\\",\n           \\\"paymentOrderNo\\\": \\\"18081239088\\\",\n           \\\"namespace\\\": \\\"accelbyte\\\",\n           \\\"targetNamespace\\\": \\\"game1\\\",\n           \\\"targetUserId\\\": \\\"94451623768940d58416ca33ca767ec3\\\",\n           \\\"extOrderNo\\\": \\\"123456789\\\",\n           \\\"sku\\\": \\\"sku\\\",\n           \\\"extUserId\\\": \\\"678\\\",\n           \\\"price\\\": 100,\n           \\\"paymentProvider\\\": \\\"XSOLLA\\\",\n           \\\"vat\\\": 0,\n           \\\"salesTax\\\": 0,\n           \\\"paymentProviderFee\\\": 0,\n           \\\"paymentMethodFee\\\": 0,\n           \\\"currency\\\": {\n                   \\\"currencyCode\\\": \\\"USD\\\",\n                   \\\"currencySymbol\\\": \\\"$\\\",\n                   \\\"currencyType\\\": \\\"REAL\\\",\n                   \\\"namespace\\\": \\\"accelbyte\\\",\n                   \\\"decimals\\\": 2\n               },\n           \\\"status\\\": \\\"REFUNDED\\\",\n           \\\"createdTime\\\": \\\"2018-07-28T00:39:16.274Z\\\",\n           \\\"chargedTime\\\": \\\"2018-07-28T00:39:16.274Z\\\",\n           \\\"refundedTime\\\": \\\"2018-07-28T00:39:16.274Z\\\"\n       }\",\r\n       \"sign\":\"e31fb92516cc9faaf50ad70343e1293acec6f3d5\"\r\n}</pre></code><p><strong>Refund notification payload parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>type</td><td>String</td><td>Yes</td><td>Notification type: 'payment'</td></tr><tr><td>paymentOrderNo</td><td>String</td><td>Yes</td><td>Payment system generated order number</td></tr><tr><td>extOrderNo</td><td>String</td><td>No</td><td>External order number that passed by invoker</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Namespace that related payment order resides in</td></tr><tr><td>targetNamespace</td><td>String</td><td>Yes</td><td>The game namespace</td></tr><tr><td>targetUserId</td><td>String</td><td>Yes</td><td>The user id in game namespace</td></tr><tr><td>sku</td><td>String</td><td>No</td><td>Item identify, it will return if pass it when create payment</td></tr><tr><td>extUserId</td><td>String</td><td>No</td><td>External user id, can be character id, it will return if pass it when create payment</td></tr><tr><td>price</td><td>int</td><td>Yes</td><td>Price of item</td></tr><tr><td>paymentProvider</td><td>String</td><td>Yes</td><td>Payment provider: xsolla/alipay/wxpay/wallet</td></tr><tr><td>vat</td><td>int</td><td>Yes</td><td>Payment order VAT</td></tr><tr><td>salesTax</td><td>int</td><td>Yes</td><td>Payment order sales tax</td></tr><tr><td>paymentProviderFee</td><td>int</td><td>Yes</td><td>Payment provider fee</td></tr><tr><td>paymentMethodFee</td><td>int</td><td>Yes</td><td>Payment method fee</td></tr><tr><td>currency</td><td>Map</td><td>Yes</td><td>Payment order currency info</td></tr><tr><td>status</td><td>String</td><td>Yes</td><td>Payment order status</td></tr><tr><td>statusReason</td><td>String</td><td>No</td><td>Payment order refund status reason</td></tr><tr><td>createdTime</td><td>Datetime</td><td>No</td><td>The time of the order created</td></tr><tr><td>chargedTime</td><td>Datetime</td><td>No</td><td>The time of the order charged</td></tr><tr><td>refundedTime</td><td>Datetime</td><td>No</td><td>The time of the order refunded</td></tr><tr><td>customParameters</td><td>Map</td><td>No</td><td>custom parameters, will return if pass it when create payment</td></tr><tr><td>nonceStr</td><td>String</td><td>Yes</td><td>Random string, max length is 32, </td></tr></table></pre><p><strong>Currency info parameter list:</strong></p><pre><table><tr><td>Parameter</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>currencyCode</td><td>String</td><td>Yes</td><td>Currency Code</td></tr><tr><td>currencySymbol</td><td>String</td><td>Yes</td><td>Currency Symbol</td></tr><tr><td>currencyType</td><td>String</td><td>Yes</td><td>Currency type(REAL/VIRTUAL)</td></tr><tr><td>namespace</td><td>String</td><td>Yes</td><td>Currency namespace</td></tr><tr><td>decimals</td><td>int</td><td>Yes</td><td>Currency decimals</td></tr></table></pre><h4>Encryption Rule:</h4><p>Concat payload json string and private key and then do sha1Hex.</p><h4>Other detail info:</h4> <ul><li><i>Token type</i>: client token</li><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:PAYMENT\", action=4 (UPDATE)</li><li><b>cross namespace allowed</b></li></ul>",
        "operationId": "refundPaymentOrderByDedicated",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentOrderRefund" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderRefundResult" } },
          "204": { "description": "Refund successfully" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33172</td><td>Payment order [{paymentOrderNo}] is not refundable</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/payment/accounts": {
      "get": {
        "tags": ["PaymentAccount"],
        "summary": "Get payment accounts",
        "description": "Get payment accounts.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT\", action=2 (READ)</li><li><i>Returns</i>: Payment account list</li></ul>",
        "operationId": "publicGetPaymentAccounts",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/PaymentAccount" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/payment/accounts/{type}/{id}": {
      "delete": {
        "tags": ["PaymentAccount"],
        "summary": "Delete payment account",
        "description": "Delete payment account.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT\", action=8 (DELETE)</li><li><i>Returns</i>:</li></ul>",
        "operationId": "publicDeletePaymentAccount",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          {
            "name": "type",
            "in": "path",
            "description": "payment account type",
            "required": true,
            "type": "string",
            "enum": ["card", "paypal"]
          },
          { "name": "id", "in": "path", "description": "payment account id", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "delete a payment account successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT", "action": "8" }
      }
    },
    "/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/status": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "Check payment order paid status",
        "description": "Check payment order paid status.<br>Other detail info: <ul><li><i>Returns</i>: Payment order paid result</li></ul>",
        "operationId": "publicCheckPaymentOrderPaidStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderPaidResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/tax": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "get tax result of a payment order",
        "description": "Check and get a payment order's should pay tax.<br>Other detail info: <ul><li><i>Returns</i>: tax result</li></ul>",
        "operationId": "getPaymentTaxValue",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "paymentProvider",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
          },
          { "name": "paymentOrderNo", "in": "query", "required": true, "type": "string" },
          { "name": "zipCode", "in": "query", "required": false, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/TaxResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33123</td><td>Invalid zipcode</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/pay": {
      "post": {
        "tags": ["PaymentStation"],
        "summary": "Do payment",
        "description": "Do payment(For now, this only support checkout.com).<br>Other detail info: <ul><li><i>Returns</i>: Payment process result</li></ul>",
        "operationId": "pay",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "payment provider",
            "required": false,
            "type": "string",
            "default": "CHECKOUT",
            "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
          },
          { "name": "zipCode", "in": "query", "description": "zip code", "required": false, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentToken" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentProcessResult" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/publicconfig": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "Get payment provider public config",
        "description": "Get payment provider public config, at current only Strip provide public config.<br>Other detail info: <ul><li><i>Returns</i>: Public config</li></ul>",
        "operationId": "getPaymentPublicConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "paymentProvider",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
          },
          { "name": "region", "in": "query", "required": true, "type": "string" },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": false }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "type": "object", "additionalProperties": { "type": "object" } } }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/returnurl": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "Normalize payment return url",
        "description": "Normalize payment return url for payment provider<br>Payment response: <table><tr><td>Field</td><td>Type</td><td>Required</td><td>Description</td></tr><tr><td>orderNo</td><td>String</td><td>Yes</td><td>order no</td></tr><tr><td>paymentStatus</td><td>String</td><td>Yes</td><td><ul><li>DONE: The payment was successfully completed.</li><li>CANCELLED: The payment was cancelled by the shopper before completion, or the shopper returned to the merchant's site before completing the transaction.</li><li>PENDING: Inform the shopper that you've received their order, and are waiting for the payment to be completed.\n\nWhen the shopper has completed the payment you will receive a successful AUTHORISATION.</li><li>RECEIVED: Inform the shopper that you've received their order, and are waiting for the payment to clear.</li><li>UNKNOWN: An error occurred during the payment processing.</li><li>FAILED: Shopper paid failed because of various reasons.</li></ul></td></tr><tr><td>reason</td><td>String</td><td>No</td><td>payment status reason</td></tr></table>Other detail info: <ul><li><i>xsolla</i>: parameters 'user_id', 'foreinginvoice', 'invoice_id' and 'status' will be automatically added to the link</li><li><i>adyen</i>: https://docs.adyen.com/developers/checkout/web-sdk</li></ul>",
        "operationId": "publicNormalizePaymentReturnUrl",
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "returnUrl", "in": "query", "required": true, "type": "string" },
          { "name": "orderNo", "in": "query", "description": "Platform order no", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "query", "description": "Platform payment order no", "required": true, "type": "string" },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "Platform payment provider",
            "required": true,
            "type": "string",
            "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
          },
          { "name": "user_id", "in": "query", "required": false, "type": "string" },
          { "name": "foreinginvoice", "in": "query", "required": false, "type": "string" },
          { "name": "invoice_id", "in": "query", "required": false, "type": "string" },
          { "name": "status", "in": "query", "description": "paypal and xsolla will return this", "required": false, "type": "string" },
          { "name": "type", "in": "query", "required": false, "type": "string" },
          { "name": "token", "in": "query", "description": "PayPal token", "required": false, "type": "string" },
          { "name": "PayerID", "in": "query", "description": "PayPal payer id", "required": false, "type": "string" },
          {
            "name": "resultCode",
            "in": "query",
            "description": "adyen redirect resultCode from checkout sdk",
            "required": false,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "query",
            "description": "adyen redirect session data for checkout sdk",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionId",
            "in": "query",
            "description": "adyen redirect session Id for drop in",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectResult",
            "in": "query",
            "description": "adyen redirect session data for drop in",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "no content.(if query param 'returnUrl' is empty)" },
          "307": {
            "description": "successful operation.(if query param 'returnUrl' is not empty)",
            "headers": { "Location": { "type": "string", "format": "uri", "description": "The Location header" } }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/methods": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "Get payment methods",
        "description": "Get payment methods.<br>Other detail info: <ul><li><i>Returns</i>: Payment method list</li></ul>",
        "operationId": "publicGetPaymentMethods",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/PaymentMethod" } }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/orders/{paymentOrderNo}/info": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "Get payment order info",
        "description": "Get payment order info.<br>Other detail info: <ul><li><i>Returns</i>: Payment order details</li></ul>",
        "operationId": "publicGetUnpaidPaymentOrder",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "paymentOrderNo", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentOrderDetails" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/public/namespaces/{namespace}/payment/qrcode": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "Get qrcode",
        "description": "Get qrcode.<br>Other detail info: <ul><li><i>Returns</i>: QRCode image stream</li></ul>",
        "operationId": "publicGetQRCode",
        "produces": ["image/png"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "code", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "Successful operation", "schema": { "type": "string", "format": "binary" } } }
      }
    },
    "/public/namespaces/{namespace}/payment/customization": {
      "get": {
        "tags": ["PaymentStation"],
        "summary": "Get payment provider customization",
        "description": "Get payment provider customization, at current only Adyen provide customization. This api has been deprecated, pls use /public/namespaces/{namespace}/payment/publicconfig to get adyen config<br>Other detail info: <ul><li><i>Returns</i>: customization</li></ul>",
        "operationId": "getPaymentCustomization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "name": "paymentProvider",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
          },
          { "name": "region", "in": "query", "required": true, "type": "string" },
          { "name": "sandbox", "in": "query", "required": false, "type": "boolean", "default": false }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Customization" } } },
        "deprecated": true
      }
    },
    "/public/namespaces/{namespace}/payment/link": {
      "post": {
        "tags": ["PaymentStation"],
        "summary": "Get payment url",
        "description": "Get payment url.<br>Other detail info: <ul><li><i>Returns</i>: Get payment link</li></ul>",
        "operationId": "publicGetPaymentUrl",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentUrlCreate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PaymentUrl" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33321</td><td>Payment provider [{paymentProvider}] not support currency [{currency}]</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr><tr><td>33332</td><td>Amount too small, please contact administrator</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/revocation": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize revocation",
        "description": "Anonymize revocation. At current it will only anonymize revocation history.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION, action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeRevocation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/revocation/config": {
      "get": {
        "tags": ["Revocation"],
        "summary": "Get revocation configuration",
        "description": "Get revocation configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=2 (READ)</li><li><i>Returns</i>: Revocation config</li></ul>",
        "operationId": "getRevocationConfig",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RevocationConfigInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33243</td><td>Payment callback config for [{namespace}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION", "action": "2" }
      },
      "put": {
        "tags": ["Revocation"],
        "summary": "Update revocation configuration",
        "description": "Update revocation configuration.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=4 (UPDATE)</li><li><i>Returns</i>: Revocation config</li></ul>",
        "operationId": "updateRevocationConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/RevocationConfigUpdate" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RevocationConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION", "action": "4" }
      },
      "delete": {
        "tags": ["Revocation"],
        "summary": "Delete revocation config",
        "description": "Delete revocation config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=8 (DELETE)</li></ul>",
        "operationId": "deleteRevocationConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "required": true, "type": "string" }],
        "responses": { "204": { "description": "Delete successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/revocation/history": {
      "get": {
        "tags": ["Revocation"],
        "summary": "Query revocation histories",
        "description": "Query revocation histories in a namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:REVOCATION, action=2 (READ)</li><li><i>Returns</i>: query revocation history</li></ul>",
        "operationId": "queryRevocationHistories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["SUCCESS", "FAIL"] },
          { "name": "userId", "in": "query", "required": false, "type": "string" },
          { "name": "source", "in": "query", "required": false, "type": "string", "enum": ["DLC", "ORDER", "OTHER"] },
          { "name": "transactionId", "in": "query", "required": false, "type": "string" },
          {
            "name": "startTime",
            "in": "query",
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZ",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZ",
            "required": false,
            "type": "string"
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RevocationHistoryPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REVOCATION", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/revocation": {
      "put": {
        "tags": ["Revocation"],
        "summary": "Do revocation.",
        "description": "Do revocation.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:USER:{userId}:REVOCATION, action=4 (UPDATE)</li><li><i>Returns</i>: revocation results</li></ul>",
        "operationId": "doRevocation",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/RevocationRequest" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RevocationResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REVOCATION", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/rewards/export": {
      "get": {
        "tags": ["Reward"],
        "summary": "Export all reward configurations",
        "description": "Export reward configurations for a given namespace into file. At current, only JSON file is supported.<p>Other detail info:<ul><li><i>*Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li></ul>",
        "operationId": "exportRewards",
        "produces": ["application/json"],
        "parameters": [{ "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" }],
        "responses": { "200": { "description": "successful export of reward configs", "schema": { "type": "file" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/rewards/{rewardId}": {
      "get": {
        "tags": ["Reward"],
        "summary": "Get a reward",
        "description": "This API is used to get reward by reward Id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: reward instance</li></ul>",
        "operationId": "getReward",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "rewardId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "2" }
      },
      "put": {
        "tags": ["Reward"],
        "summary": "Update a reward",
        "description": "This API is used to update a reward.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=4 (UPDATE)</li><li><i>Returns</i>: reward instance</li></ul>",
        "operationId": "updateReward",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "rewardId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/RewardUpdate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34023</td><td>Reward Item [{itemId}] with item type [{itemType}] is not supported for duration or endDate</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr><tr><td>34042</td><td>Reward item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34072</td><td>Duplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]</td></tr><tr><td>34074</td><td>Reward Item [{itemId}] duration and end date can’t be set at the same time</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "4" }
      },
      "delete": {
        "tags": ["Reward"],
        "summary": "Delete a reward",
        "description": "This API is used to delete a reward by reward Id. <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=8 (DELETE)</li><li><i>Returns</i>: the deleted reward data</li></ul>",
        "operationId": "deleteReward",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "rewardId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/rewards/import": {
      "post": {
        "tags": ["Reward"],
        "summary": "Import reward configurations",
        "description": "Import reward configurations for a given namespace from file. At current, only JSON file is supported.<p>Other detail info:<ul><li><i>*Required permission*: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=1 (CREATE)</li></ul>",
        "operationId": "importRewards",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "file", "in": "formData", "required": false, "type": "file" },
          { "name": "replaceExisting", "in": "query", "description": "replaceExisting", "required": true, "type": "boolean" }
        ],
        "responses": {
          "200": { "description": "successful import of reward configs" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34021</td><td>Reward data for namespace [{namespace}] is invalid</td></tr><tr><td>34023</td><td>Reward Item [{itemId}] with item type [{itemType}] is not supported for duration or endDate</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34074</td><td>Reward Item [{itemId}] duration and end date can’t be set at the same time</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/rewards/{rewardId}/record": {
      "delete": {
        "tags": ["Reward"],
        "summary": "Delete a reward condition record",
        "description": "<b>[TEST FACILITY ONLY] Forbidden in live environment. </b> This API is used to delete a reward condition record by reward Id and condition Name (optional). <p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=8 (DELETE)</li><li><i>Returns</i>: 204 No Content </li></ul>",
        "operationId": "deleteRewardConditionRecord",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "rewardId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/DeleteRewardConditionRequest" } }
        ],
        "responses": { "204": { "description": "Delete reward success" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/rewards": {
      "post": {
        "tags": ["Reward"],
        "summary": "Create a reward",
        "description": "This API is used to create a reward.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=1 (CREATE)</li><li><i>Returns</i>: created reward data</li></ul>",
        "operationId": "createReward",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/RewardCreate" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34023</td><td>Reward Item [{itemId}] with item type [{itemType}] is not supported for duration or endDate</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34071</td><td>Reward with code [{rewardCode}] already exists in namespace [{namespace}]</td></tr><tr><td>34072</td><td>Duplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]</td></tr><tr><td>34074</td><td>Reward Item [{itemId}] duration and end date can’t be set at the same time</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34042</td><td>Reward item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/rewards/byCriteria": {
      "get": {
        "tags": ["Reward"],
        "summary": "Query rewards by criteria",
        "description": "This API is used to query rewards by criteria.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: the list of rewards</li></ul>",
        "operationId": "queryRewards",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "eventTopic", "in": "query", "required": false, "type": "string" },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is namespace:asc,rewardCode:asc, allow values: [namespace, namespace:asc, namespace:desc, rewardCode, rewardCode:asc, rewardCode:desc, createdAt:asc, createdAt:desc],and support sort group, eg: sortBy=namespace:asc,rewardCode:asc",
            "required": false,
            "type": "string",
            "default": "namespace:asc,rewardCode:asc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardPagingSlicedResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/rewards/{rewardId}/match": {
      "put": {
        "tags": ["Reward"],
        "summary": "Check if event payload match reward condition",
        "description": "<b>[TEST FACILITY ONLY] Forbidden in live environment. </b>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: match result</li></ul>",
        "operationId": "checkEventCondition",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "rewardId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/EventPayload" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ConditionMatchResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:REWARD", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/rewards/byCode": {
      "get": {
        "tags": ["Reward"],
        "summary": "Get a reward by code",
        "description": "This API is used to get reward by reward code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: reward instance</li></ul>",
        "operationId": "getRewardByCode",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "rewardCode", "in": "query", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34043</td><td>Reward with code [{rewardCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:REWARD", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/rewards/{rewardId}": {
      "get": {
        "tags": ["Reward"],
        "summary": "Get a reward",
        "description": "This API is used to get reward by reward Id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: reward instance</li></ul>",
        "operationId": "getReward_1",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "rewardId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:REWARD", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/rewards/byCriteria": {
      "get": {
        "tags": ["Reward"],
        "summary": "Query rewards by criteria",
        "description": "This API is used to query rewards by criteria.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:REWARD\", action=2 (READ)</li><li><i>Returns</i>: the list of rewards</li></ul>",
        "operationId": "queryRewards_1",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "eventTopic", "in": "query", "description": "event topic", "required": false, "type": "string" },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "default is namespace:asc,rewardCode:asc, allow values: [namespace, namespace:asc, namespace:desc, rewardCode, rewardCode:asc, rewardCode:desc],and support sort group, eg: sortBy=namespace:asc,rewardCode:asc",
            "required": false,
            "type": "string",
            "default": "namespace:asc,rewardCode:asc"
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RewardPagingSlicedResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:REWARD", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/subscriptions": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize subscription",
        "description": "Anonymize subscription. At current it will anonymize subscription, billing history and subscription activity.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/subscriptions/{subscriptionId}/recurring": {
      "put": {
        "tags": ["Subscription"],
        "summary": "Recurring charge subscription",
        "description": "<b>[TEST FACILITY ONLY] Forbidden in live environment. </b> Recurring charge subscription, it will trigger recurring charge if the USER subscription status is ACTIVE, nextBillingDate is before now and no fail recurring charge within X(default 12) hours.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION\", action=4 (UPDATE)</li><li><i>Returns</i>: recurring charge result</li></ul>",
        "operationId": "recurringChargeSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/RecurringChargeResult" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/subscriptions": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Query subscriptions",
        "description": "Query subscriptions.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: paginated subscriptions</li></ul>",
        "operationId": "querySubscriptions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "query", "required": false, "type": "string" },
          { "name": "itemId", "in": "query", "required": false, "type": "string" },
          { "name": "sku", "in": "query", "required": false, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["INIT", "ACTIVE", "CANCELLED", "EXPIRED"] },
          {
            "name": "chargeStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["NEVER", "SETUP", "RECURRING_CHARGING", "CHARGED", "CHARGE_FAILED"]
          },
          { "name": "subscribedBy", "in": "query", "required": false, "type": "string", "enum": ["USER", "PLATFORM"] },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/cancel": {
      "put": {
        "tags": ["Subscription"],
        "summary": "Cancel a subscription",
        "description": "Cancel a subscription, only ACTIVE subscription can be cancelled. <b>Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.</b><br>Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.<br>Set force true, will ignore the error if subscription is during recurring charging.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=4 (UPDATE)</li><li><i>Returns</i>: cancelled subscription</li></ul>",
        "operationId": "cancelSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" },
          { "name": "force", "in": "query", "required": false, "type": "boolean", "default": false },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CancelRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40171</td><td>Subscription [{subscriptionId}] is not active</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/history": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get user subscription billing histories",
        "description": "Get user subscription billing histories.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: paginated subscription billing history</li></ul>",
        "operationId": "getUserSubscriptionBillingHistories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" },
          { "name": "excludeFree", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BillingHistoryPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/platformSubscribe": {
      "post": {
        "tags": ["Subscription"],
        "summary": "Free subscribe by platform",
        "description": "Free subscribe by platform, can used by other justice service to redeem/reward the subscription.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=1 (CREATE)</li><li><i>Returns</i>: result subscription</li></ul>",
        "operationId": "platformSubscribeSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PlatformSubscribeRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionInfo" } },
          "201": { "description": "platform subscribe request processed" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40121</td><td>Item type [{itemType}] does not support</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "1" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/grant": {
      "put": {
        "tags": ["Subscription"],
        "summary": "Grant days to a subscription",
        "description": "Grant days to a subscription, if grantDays is positive, it will add free days and push the next billing date by the amount of day.<br>if the grantDays is negative or zero, it only apply to active/cancelled subscription, remove days will decrease current period end, and move the next billing date closer.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=4 (UPDATE)</li><li><i>Returns</i>: updated subscription</li></ul>",
        "operationId": "grantDaysToSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/GrantSubscriptionDaysRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/activities": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get user subscription activity",
        "description": "Get user subscription activity.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: paginated subscription activity</li></ul>",
        "operationId": "getUserSubscriptionActivities",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "query", "required": false, "type": "string" },
          { "name": "excludeSystem", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionActivityPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/notifications": {
      "post": {
        "tags": ["Subscription"],
        "summary": "Web hook for payment notification",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> This API is used as a web hook for payment notification from justice payment service.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=4 (UPDATE)</li><li><i>Returns</i>: Process result</li></ul>",
        "operationId": "processUserSubscriptionNotification",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/TradeNotification" } }
        ],
        "responses": { "204": { "description": "process successfully" }, "400": { "description": "process failed" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get user subscription",
        "description": "Get user subscription.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: subscription</li></ul>",
        "operationId": "getUserSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      },
      "delete": {
        "tags": ["Subscription"],
        "summary": "Delete user subscription",
        "description": "<b>[TEST FACILITY ONLY] Forbidden in live environment. </b> Delete user subscription.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=8 (DELETE)</li></ul>",
        "operationId": "deleteUserSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "delete user subscription successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Query user subscriptions",
        "description": "Query user subscriptions.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: paginated subscription</li></ul>",
        "operationId": "queryUserSubscriptions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": false, "type": "string" },
          { "name": "sku", "in": "query", "required": false, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["INIT", "ACTIVE", "CANCELLED", "EXPIRED"] },
          {
            "name": "chargeStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["NEVER", "SETUP", "RECURRING_CHARGING", "CHARGED", "CHARGE_FAILED"]
          },
          { "name": "subscribedBy", "in": "query", "required": false, "type": "string", "enum": ["USER", "PLATFORM"] },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/subscriptions/subscribable/byItemId": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Check user subscription subscribable",
        "description": "Check user subscription subscribable by itemId, ACTIVE USER subscription can't do subscribe again.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: subscribable info</li></ul>",
        "operationId": "checkUserSubscriptionSubscribableByItemId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Subscribable" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get user subscription",
        "description": "Get user subscription.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: subscription</li></ul>",
        "operationId": "publicGetUserSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/history": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get user subscription billing histories",
        "description": "Get user subscription billing histories.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: paginated subscription history</li></ul>",
        "operationId": "publicGetUserSubscriptionBillingHistories",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" },
          { "name": "excludeFree", "in": "query", "required": false, "type": "boolean", "default": false },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BillingHistoryPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/subscriptions/subscribable/byItemId": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Check user subscription subscribable",
        "description": "Check user subscription subscribable by itemId, ACTIVE USER subscription can't do subscribe again.<p>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: subscribable info</li></ul>",
        "operationId": "publicCheckUserSubscriptionSubscribableByItemId",
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Subscribable" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/subscriptions": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Query user subscriptions",
        "description": "Query user subscriptions.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=2 (READ)</li><li><i>Returns</i>: paginated subscription</li></ul>",
        "operationId": "publicQueryUserSubscriptions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "itemId", "in": "query", "required": false, "type": "string" },
          { "name": "sku", "in": "query", "required": false, "type": "string" },
          { "name": "status", "in": "query", "required": false, "type": "string", "enum": ["INIT", "ACTIVE", "CANCELLED", "EXPIRED"] },
          {
            "name": "chargeStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["NEVER", "SETUP", "RECURRING_CHARGING", "CHARGED", "CHARGE_FAILED"]
          },
          { "name": "subscribedBy", "in": "query", "required": false, "type": "string", "enum": ["USER", "PLATFORM"] },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "2" }
      },
      "post": {
        "tags": ["Subscription"],
        "summary": "Subscribe a subscription",
        "description": "Subscribe a subscription. Support both real and virtual payment. Need go through payment flow using the paymentOrderNo if paymentFlowRequired true.<br><b>ACTIVE USER subscription can't do subscribe again.</b><br><b>The next billing date will be X(default 4) hours before the current period ends if correctly subscribed.</b><br>User with permission SANDBOX will create sandbox subscription that not real paid.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=1 (CREATE)</li><li><i>Optional permission(user with this permission will create sandbox subscription)</i>: resource=\"SANDBOX\", action=1 (CREATE)</li><li>It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT</li><li><i>Returns</i>: created subscription</li></ul>",
        "operationId": "publicSubscribeSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/SubscribeRequest" } }
        ],
        "responses": {
          "201": { "description": "subscribe request processed" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40121</td><td>Item type [{itemType}] does not support</td></tr><tr><td>40122</td><td>Subscription already been subscribed by user</td></tr><tr><td>40123</td><td>Currency [{currencyCode}] does not support</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr><tr><td>40173</td><td>Subscription [{subscriptionId}] current currency [{currentCurrency}] not match request currency [{requestCurrency}]</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "1" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/cancel": {
      "put": {
        "tags": ["Subscription"],
        "summary": "Cancel a subscription",
        "description": "Cancel a subscription, only ACTIVE subscription can be cancelled. <b>Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.</b><br>Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=4 (UPDATE)</li><li><i>Returns</i>: cancelled subscription</li></ul>",
        "operationId": "publicCancelSubscription",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CancelRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40171</td><td>Subscription [{subscriptionId}] is not active</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "4" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/subscriptions/{subscriptionId}/billingAccount": {
      "put": {
        "tags": ["Subscription"],
        "summary": "Request to change a subscription billing account",
        "description": "Request to change a subscription billing account, this will guide user to payment station. The actual change will happen at the 0 payment notification successfully handled.<br>Only ACTIVE USER subscription with real currency billing account can be changed.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION\", action=4 (UPDATE)</li><li><i>Returns</i>: updated subscription</li></ul>",
        "operationId": "publicChangeSubscriptionBillingAccount",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" },
          { "name": "subscriptionId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/SubscriptionInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40125</td><td>Subscription [{subscriptionId}] has no real currency billing account</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40171</td><td>Subscription [{subscriptionId}] is not active</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/platforms/{platform}/wallet/config/reset": {
      "put": {
        "tags": ["Wallet"],
        "summary": "Reset platform wallet config",
        "description": "Reset platform wallet config to default config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: platform wallet config</li></ul>",
        "operationId": "resetPlatformWalletConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Nintendo", "Other"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformWalletConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/platforms/{platform}/wallet/config": {
      "get": {
        "tags": ["Wallet"],
        "summary": "Get platform wallet config list",
        "description": "Get platform wallet config list.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li></ul>",
        "operationId": "getPlatformWalletConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Nintendo", "Other"]
          }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformWalletConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG", "action": "2" }
      },
      "put": {
        "tags": ["Wallet"],
        "summary": "Update platform wallet config",
        "description": "Update platform wallet config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG\", action=4 (UPDATE)</li><li><i>Returns</i>: platform wallet config</li></ul>",
        "operationId": "updatePlatformWalletConfig",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Nintendo", "Other"]
          },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PlatformWalletConfigUpdate" } }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformWalletConfigInfo" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:WALLET:CONFIG", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/transactions": {
      "get": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "List user wallet transactions",
        "description": "List user wallet transactions ordered by create time desc.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet transaction info</li></ul>",
        "operationId": "listUserWalletTransactions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "walletId", "in": "path", "description": "walletId", "required": true, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/DetailedWalletTransactionPagingSlicedResult" }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/enable": {
      "put": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "Enable a user wallet",
        "description": "enable a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "enableUserWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "walletId", "in": "path", "description": "walletId", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/debit": {
      "put": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "Debit a user wallet",
        "description": "Debit a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "debitUserWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "walletId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/DebitRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/currencies/{currencyCode}/debit": {
      "put": {
        "tags": ["Wallet"],
        "summary": "Debit a user wallet by currency code",
        "description": "Debit a user wallet by currency code, default is debit system wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "debitUserWalletByCurrencyCode",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/DebitByCurrencyCodeRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/currencies/{currencyCode}/transactions": {
      "get": {
        "tags": ["Wallet"],
        "summary": "List user currency transactions",
        "description": "List user currency transactions ordered by create time desc.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: currency transaction info</li></ul>",
        "operationId": "listUserCurrencyTransactions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "description": "currencyCode", "required": true, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletTransactionPagingSlicedResult" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}": {
      "get": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "Get a user wallet",
        "description": "get a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li></ul>",
        "operationId": "getUserWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "walletId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/check": {
      "get": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "Check wallet by balance origin and currency code",
        "description": "<b>[SERVICE COMMUNICATION ONLY]</b> Check wallet by balance origin and currency code whether it's inactive.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li></ul>",
        "operationId": "checkWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "required": true, "type": "string" },
          {
            "name": "origin",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
          }
        ],
        "responses": {
          "204": { "description": "check successfully" },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/currencies/summary": {
      "get": {
        "tags": ["Wallet"],
        "summary": "Get user currency wallet summary",
        "description": "Get user currency wallet summary.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: currency wallet summary</li></ul>",
        "operationId": "queryUserCurrencyWallets",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/CurrencyWallet" } }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{walletId}/disable": {
      "put": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "Disable a user wallet",
        "description": "disable a user wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "disableUserWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "walletId", "in": "path", "description": "walletId", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "Successful operation" },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/credit": {
      "put": {
        "tags": ["Wallet"],
        "summary": "Credit a user wallet by currency code and balance origin",
        "description": "Credit a user wallet by currency code and balance origin, if wallet not exists, it will create a new wallet.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "creditUserWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/CreditRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletInfo" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/payment": {
      "put": {
        "tags": ["Wallet"],
        "summary": "Pay with user wallet by currency code and client platform",
        "description": "Pay with user wallet by currency code and client platform.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=4 (UPDATE)</li></ul>",
        "operationId": "payWithUserWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": false, "schema": { "$ref": "#/definitions/PaymentRequest" } }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformWallet" } },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/users/{userId}/anonymization/wallets": {
      "delete": {
        "tags": ["Anonymization"],
        "summary": "anonymize wallet",
        "description": "Anonymize wallet. At current it will only anonymize wallet, wallet transaction.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION\", action=8 (DELETE)</li></ul>",
        "operationId": "anonymizeWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "204": { "description": "Anonymize successfully" } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION", "action": "8" }
      }
    },
    "/admin/namespaces/{namespace}/wallets/credit": {
      "post": {
        "tags": ["Wallet"],
        "summary": "Credit different users' wallets",
        "description": "Credit different users' wallets.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk credit result</li></ul>",
        "operationId": "bulkCredit",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": { "type": "array", "items": { "$ref": "#/definitions/BulkCreditRequest" } }
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkCreditResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/wallets": {
      "get": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "Query wallets",
        "description": "Query wallets.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: paginated wallets info</li></ul>",
        "operationId": "queryWallets",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "query", "description": "userId", "required": false, "type": "string" },
          { "name": "currencyCode", "in": "query", "description": "currencyCode", "required": false, "type": "string" },
          {
            "name": "origin",
            "in": "query",
            "description": "balance origin",
            "required": false,
            "type": "string",
            "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
          },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletPagingSlicedResult" } } },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:WALLET", "action": "2" }
      }
    },
    "/admin/namespaces/{namespace}/wallets/debit": {
      "post": {
        "tags": ["Wallet"],
        "summary": "Debit different users' wallets",
        "description": "Debit different users' wallets.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET\", action=4 (UPDATE)</li><li><i>Returns</i>: bulk credit result</li></ul>",
        "operationId": "bulkDebit",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": { "type": "array", "items": { "$ref": "#/definitions/BulkDebitRequest" } }
          }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/BulkDebitResult" } },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": { "$ref": "#/definitions/ValidationErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:WALLET", "action": "4" }
      }
    },
    "/admin/namespaces/{namespace}/wallets/{walletId}": {
      "get": {
        "tags": ["Wallet(Deprecated)"],
        "summary": "Get a wallet by wallet id",
        "description": "get a wallet by wallet id.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"ADMIN:NAMESPACE:{namespace}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li></ul>",
        "operationId": "getWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "walletId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletInfo" } },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": { "$ref": "#/definitions/ErrorEntity" }
          }
        },
        "security": [{ "authorization": [] }],
        "deprecated": true,
        "x-authorization": { "resource": "ADMIN:NAMESPACE:{namespace}:WALLET", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/me/wallets/{currencyCode}": {
      "get": {
        "tags": ["Wallet"],
        "summary": "Get my wallet by currency code and namespace",
        "description": "get my wallet by currency code and namespace.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li><li><i>Path's namespace</i> : <ul>   <li>can be filled with <b>publisher namespace</b> in order to get <b>publisher user wallet</b></li>   <li>can be filled with <b>game namespace</b> in order to get <b>game user wallet</b></li>   </ul></li></ul>",
        "operationId": "publicGetMyWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformWallet" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:WALLET", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}/transactions": {
      "get": {
        "tags": ["Wallet"],
        "summary": "List wallet transactions by currency code",
        "description": "List wallet transactions by currency code ordered by create time desc.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: currency transaction info</li></ul>",
        "operationId": "publicListUserWalletTransactions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "description": "currencyCode", "required": true, "type": "string" },
          { "name": "offset", "in": "query", "required": false, "type": "integer", "default": 0, "format": "int32" },
          { "name": "limit", "in": "query", "required": false, "type": "integer", "default": 20, "format": "int32" }
        ],
        "responses": {
          "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/WalletTransactionPagingSlicedResult" } }
        },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "2" }
      }
    },
    "/public/namespaces/{namespace}/users/{userId}/wallets/{currencyCode}": {
      "get": {
        "tags": ["Wallet"],
        "summary": "Get a wallet by currency code",
        "description": "get a wallet by currency code.<br>Other detail info: <ul><li><i>Required permission</i>: resource=\"NAMESPACE:{namespace}:USER:{userId}:WALLET\", action=2 (READ)</li><li><i>Returns</i>: wallet info</li></ul>",
        "operationId": "publicGetWallet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          { "name": "namespace", "in": "path", "description": "Namespace", "required": true, "type": "string" },
          { "name": "userId", "in": "path", "description": "userId", "required": true, "type": "string" },
          { "name": "currencyCode", "in": "path", "required": true, "type": "string" }
        ],
        "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/PlatformWallet" } } },
        "security": [{ "authorization": [] }],
        "x-authorization": { "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET", "action": "2" }
      }
    }
  },
  "securityDefinitions": { "authorization": { "type": "apiKey", "name": "Authorization", "in": "header" } },
  "definitions": {
    "CampaignInfo": {
      "type": "object",
      "required": [
        "boothName",
        "createdAt",
        "id",
        "maxRedeemCountPerCampaignPerUser",
        "maxRedeemCountPerCode",
        "maxRedeemCountPerCodePerUser",
        "maxSaleCount",
        "name",
        "namespace",
        "redeemType",
        "status",
        "type",
        "updatedAt"
      ],
      "properties": {
        "id": { "type": "string", "description": "campaign id" },
        "type": { "type": "string", "description": "campaign type", "enum": ["REDEMPTION"] },
        "namespace": { "type": "string", "description": "namespace" },
        "name": { "type": "string", "description": "campaign name" },
        "description": { "type": "string", "description": "campaign description" },
        "tags": { "type": "array", "description": "campaign tags", "items": { "type": "string" } },
        "status": { "type": "string", "description": "campaign status", "enum": ["ACTIVE", "INACTIVE"] },
        "redeemStart": { "type": "string", "format": "date-time", "description": "redeem start" },
        "redeemEnd": { "type": "string", "format": "date-time", "description": "redeem end" },
        "maxRedeemCountPerCode": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count of a code, -1 means UNLIMITED"
        },
        "maxRedeemCountPerCodePerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count of a code per user, -1 means UNLIMITED"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count of a campaign per user, -1 means UNLIMITED"
        },
        "maxSaleCount": { "type": "integer", "format": "int32", "description": "The maximum sale count, -1 means UNLIMITED" },
        "redeemType": { "type": "string", "description": "redeem type", "enum": ["ITEM"] },
        "items": { "type": "array", "description": "redeem items", "items": { "$ref": "#/definitions/RedeemableItem" } },
        "boothName": { "type": "string", "description": "booth name" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "update at" }
      }
    },
    "RedeemableItem": {
      "type": "object",
      "required": ["itemId", "itemName"],
      "properties": {
        "itemId": { "type": "string", "description": "The redeemable item id" },
        "itemName": { "type": "string", "description": "The redeemable item name" },
        "quantity": { "type": "integer", "format": "int32", "description": "The redeemable item quantity, 1 for default" },
        "extraSubscriptionDays": {
          "type": "integer",
          "format": "int32",
          "description": "Extra subscription days if the item is a subscription, 0 by default"
        }
      }
    },
    "ErrorEntity": {
      "type": "object",
      "required": ["errorCode", "errorMessage"],
      "properties": {
        "errorCode": { "type": "integer", "format": "int32", "description": "numeric error code" },
        "errorMessage": { "type": "string", "description": "error message" },
        "messageVariables": { "type": "object", "description": "message variables", "additionalProperties": { "type": "string" } },
        "devStackTrace": { "type": "string", "description": "internal server error stack trace in configured environment" }
      }
    },
    "FieldValidationError": {
      "type": "object",
      "properties": {
        "errorCode": { "type": "string" },
        "errorField": { "type": "string" },
        "errorValue": { "type": "string" },
        "errorMessage": { "type": "string" },
        "messageVariables": { "type": "object", "additionalProperties": { "type": "string" } }
      }
    },
    "ValidationErrorEntity": {
      "type": "object",
      "required": ["errorCode", "errorMessage"],
      "properties": {
        "errorCode": { "type": "integer", "format": "int32", "description": "numeric error code" },
        "errorMessage": { "type": "string", "description": "error message" },
        "errors": { "type": "array", "items": { "$ref": "#/definitions/FieldValidationError" } }
      }
    },
    "CampaignCreate": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "type": {
          "type": "string",
          "description": "Campaign type. Allowed values: REDEMPTION. REDEMPTION for default",
          "enum": ["REDEMPTION"]
        },
        "name": {
          "type": "string",
          "description": "The name of the campaign, it should starts and ends with alphabets uppercase/lowercase or numeric\nAllowed separators ',.- and white-space, max length is 48"
        },
        "description": { "type": "string", "description": "The description of the campaign, max length is 1024 characters" },
        "tags": { "type": "array", "description": "The tags of the campaign", "items": { "type": "string" } },
        "status": { "type": "string", "description": "The status of the campaign, default ACTIVE", "enum": ["ACTIVE", "INACTIVE"] },
        "maxRedeemCountPerCode": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count per code, must equal or greater than -1, -1 means UNLIMITED, default is 1"
        },
        "maxRedeemCountPerCodePerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count per code per user, must equal or greater than -1, -1 means UNLIMITED, default is 1"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count per campaign per user, must equal or greater than -1, -1 means UNLIMITED, default is 1"
        },
        "maxSaleCount": { "type": "integer", "format": "int32", "description": "Max sale count, -1 means UNLIMITED" },
        "redeemStart": { "type": "string", "format": "date-time", "description": "redeem start time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" },
        "redeemEnd": { "type": "string", "format": "date-time", "description": "redeem end time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" },
        "redeemType": { "type": "string", "description": "Redeem Type. Allowed values: ITEM. ITEM for default", "enum": ["ITEM"] },
        "items": { "type": "array", "description": "Redeemable items", "items": { "$ref": "#/definitions/RedeemableItem" } }
      },
      "description": "A DTO object for creating campaign API call."
    },
    "CampaignPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/CampaignInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "Paging": { "type": "object", "properties": { "previous": { "type": "string" }, "next": { "type": "string" } } },
    "CampaignDynamicInfo": {
      "type": "object",
      "required": ["availableSaleCount", "lastBatchNo", "quantity", "remainder", "saleCount"],
      "properties": {
        "availableSaleCount": { "type": "integer", "format": "int32", "description": "The available sale count, -1 means UNLIMITED" },
        "quantity": { "type": "integer", "format": "int32", "description": "The total quantity of this campaign has" },
        "saleCount": { "type": "integer", "format": "int32", "description": "The sale count" },
        "lastBatchNo": { "type": "integer", "format": "int32", "description": "The batch number marks the manually code generation" },
        "remainder": { "type": "integer", "format": "int32", "description": "The remainder quantity of codes not been redeemed out" }
      }
    },
    "CampaignUpdate": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the campaign, it should starts and ends with alphabets uppercase/lowercase or numeric\nAllowed separators ',.- and white-space, max length is 48"
        },
        "description": { "type": "string", "description": "The description of the campaign, max length is 1024 characters" },
        "status": { "type": "string", "description": "The status of the campaign", "enum": ["ACTIVE", "INACTIVE"] },
        "tags": { "type": "array", "description": "The tags of the campaign", "items": { "type": "string" } },
        "maxRedeemCountPerCode": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeems count per code, must equal or greater than -1, -1 means UNLIMITED"
        },
        "maxRedeemCountPerCodePerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count per code per user, must equal or greater than -1, -1 means UNLIMITED"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count per campaign per user, must equal or greater than -1, -1 means UNLIMITED, default is 1"
        },
        "maxSaleCount": { "type": "integer", "format": "int32", "description": "Max sale count, -1 means UNLIMITED" },
        "redeemStart": {
          "type": "string",
          "format": "date-time",
          "description": "redeem start time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z', will delete this value if pass null or not pass this field"
        },
        "redeemEnd": {
          "type": "string",
          "format": "date-time",
          "description": "redeem end time in yyyy-MM-dd'T'HH:mm:ss.SSS'Z', will delete this value if pass null or not pass this field"
        },
        "redeemType": { "type": "string", "description": "Redeem Type. Allowed values: ITEM", "enum": ["ITEM"] },
        "items": { "type": "array", "description": "Redeemable Items", "items": { "$ref": "#/definitions/RedeemableItem" } }
      },
      "description": "A DTO object for updating campaign API call."
    },
    "CodeInfo": {
      "type": "object",
      "required": [
        "batchNo",
        "campaignId",
        "createdAt",
        "id",
        "maxRedeemCountPerCampaignPerUser",
        "maxRedeemCountPerCode",
        "maxRedeemCountPerCodePerUser",
        "namespace",
        "redeemType",
        "redeemedCount",
        "remainder",
        "status",
        "type",
        "updatedAt",
        "value"
      ],
      "properties": {
        "id": { "type": "string", "description": "code id" },
        "type": { "type": "string", "description": "campaign type", "enum": ["REDEMPTION"] },
        "namespace": { "type": "string", "description": "namespace" },
        "campaignId": { "type": "string", "description": "campaign id" },
        "value": { "type": "string", "description": "code value" },
        "maxRedeemCountPerCode": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count of a code, -1 means UNLIMITED"
        },
        "maxRedeemCountPerCodePerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count of a code per user, -1 means UNLIMITED"
        },
        "maxRedeemCountPerCampaignPerUser": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum redeem count of a campaign per user, -1 means UNLIMITED"
        },
        "remainder": { "type": "integer", "format": "int32", "description": "Redemption remainder, -1 means unlimited" },
        "redeemedCount": { "type": "integer", "format": "int32", "description": "The total count of this code has been redeemed" },
        "status": { "type": "string", "description": "code status", "enum": ["ACTIVE", "INACTIVE"] },
        "redeemStart": { "type": "string", "format": "date-time", "description": "redeem start" },
        "redeemEnd": { "type": "string", "format": "date-time", "description": "redeem end" },
        "redeemType": { "type": "string", "description": "redeem type", "enum": ["ITEM"] },
        "items": { "type": "array", "description": "redeem items", "items": { "$ref": "#/definitions/RedeemableItem" } },
        "batchNo": { "type": "integer", "format": "int32", "description": "batch No." },
        "acquireOrderNo": { "type": "string", "description": "order No. that grant this code" },
        "acquireUserId": { "type": "string", "description": "user Id who get this code" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "RedeemHistoryInfo": {
      "type": "object",
      "required": ["campaignId", "code", "createdAt", "id", "namespace", "updatedAt", "userId"],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "redeem user id" },
        "campaignId": { "type": "string", "description": "campaign id" },
        "code": { "type": "string", "description": "code value" },
        "orderNo": { "type": "string", "description": "order No" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "redeemedAt": { "type": "string", "format": "date-time" }
      }
    },
    "RedeemHistoryPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/RedeemHistoryInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "BulkOperationResult": { "type": "object", "properties": { "affected": { "type": "integer", "format": "int32" } } },
    "CodeCreateResult": {
      "type": "object",
      "required": ["numCreated"],
      "properties": { "numCreated": { "type": "integer", "format": "int32", "description": "number created" } }
    },
    "CodeCreate": {
      "type": "object",
      "required": ["quantity"],
      "properties": { "quantity": { "type": "integer", "format": "int32", "description": "The quantity of codes to generate" } },
      "description": "A DTO object for creating codes API call."
    },
    "CodeInfoPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/CodeInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "KeyGroupInfo": {
      "type": "object",
      "required": ["boothName", "createdAt", "id", "name", "namespace", "status", "updatedAt"],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "name": { "type": "string", "description": "name" },
        "description": { "type": "string", "description": "description" },
        "tags": { "type": "array", "description": "tags", "items": { "type": "string" } },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE"] },
        "boothName": { "type": "string", "description": "booth name" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "KeyGroupUpdate": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": { "type": "string", "description": "The name of the KeyGroup, a-z0-9_ 120 max length" },
        "description": { "type": "string", "description": "The description of the KeyGroup, max length is 1024 characters" },
        "tags": { "type": "array", "description": "The tags of the KeyGroup", "items": { "type": "string" } },
        "status": { "type": "string", "description": "The status of the KeyGroup", "enum": ["ACTIVE", "INACTIVE"] }
      },
      "description": "A DTO object for creating KeyGroup API call."
    },
    "KeyInfo": {
      "type": "object",
      "required": ["createdAt", "id", "keyFile", "keyGroupId", "namespace", "status", "updatedAt", "value"],
      "properties": {
        "id": { "type": "string", "description": "key id" },
        "namespace": { "type": "string", "description": "namespace" },
        "keyGroupId": { "type": "string", "description": "key group id" },
        "value": { "type": "string", "description": "key value" },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "ACQUIRED"] },
        "keyFile": { "type": "string", "description": "key upload file" },
        "acquireOrderNo": { "type": "string", "description": "order No. that grant this key" },
        "acquireUserId": { "type": "string", "description": "user Id who get this key" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "KeyPagingSliceResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/KeyInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "KeyGroupDynamicInfo": {
      "type": "object",
      "required": ["availableSaleCount", "quantity", "saleCount"],
      "properties": {
        "availableSaleCount": { "type": "integer", "format": "int32", "description": "The available sale count, -1 means UNLIMITED" },
        "quantity": { "type": "integer", "format": "int32", "description": "The total quantity of this key group has" },
        "saleCount": { "type": "integer", "format": "int32", "description": "The sale count" }
      }
    },
    "KeyGroupPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/KeyGroupInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "KeyGroupCreate": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": { "type": "string", "description": "The name of the KeyGroup, a-z0-9_ 120 max length" },
        "description": { "type": "string", "description": "The description of the KeyGroup, max length is 1024 characters" },
        "tags": { "type": "array", "description": "The tags of the KeyGroup", "items": { "type": "string" } },
        "status": { "type": "string", "description": "The status of the KeyGroup, default ACTIVE", "enum": ["ACTIVE", "INACTIVE"] }
      },
      "description": "A DTO object for creating KeyGroup API call."
    },
    "TicketSaleIncrementResult": {
      "type": "object",
      "required": ["maxSaleCount", "success"],
      "properties": {
        "success": { "type": "boolean", "description": "operation result" },
        "maxSaleCount": { "type": "integer", "format": "int32", "description": "max sale count" }
      }
    },
    "TicketSaleIncrementRequest": {
      "type": "object",
      "required": ["count", "orderNo"],
      "properties": {
        "count": { "type": "integer", "format": "int32", "description": "increment" },
        "orderNo": { "type": "string", "description": "order No" }
      }
    },
    "TicketBoothID": {
      "type": "object",
      "required": ["id", "type"],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "type": { "type": "string", "description": "type", "enum": ["CAMPAIGN", "KEYGROUP"] }
      }
    },
    "TicketDynamicInfo": {
      "type": "object",
      "required": ["availableSaleCount"],
      "properties": {
        "availableSaleCount": { "type": "integer", "format": "int32", "description": "The available sale count, -1 means UNLIMITED" }
      }
    },
    "TicketSaleDecrementRequest": {
      "type": "object",
      "required": ["orderNo"],
      "properties": { "orderNo": { "type": "string", "description": "orderNo" } }
    },
    "RedeemResult": {
      "type": "object",
      "properties": { "items": { "type": "array", "description": "redeemed items", "items": { "$ref": "#/definitions/RedeemableItem" } } }
    },
    "RedeemRequest": {
      "type": "object",
      "required": ["code"],
      "properties": {
        "code": { "type": "string", "description": "The code for campaign" },
        "orderNo": { "type": "string", "description": "order No" }
      }
    },
    "TicketAcquireResult": {
      "type": "object",
      "properties": { "values": { "type": "array", "description": "acquired values", "items": { "type": "string" } } }
    },
    "TicketAcquireRequest": {
      "type": "object",
      "required": ["count", "orderNo"],
      "properties": {
        "count": { "type": "integer", "format": "int32", "description": "acquire count" },
        "orderNo": { "type": "string", "description": "order no" }
      }
    },
    "AppLocalization": {
      "type": "object",
      "properties": {
        "slogan": { "type": "string", "description": "slogan" },
        "announcement": { "type": "string", "description": "announcement" }
      }
    },
    "FullAppInfo": {
      "type": "object",
      "required": ["itemId", "namespace"],
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "namespace": { "type": "string", "description": "namespace" },
        "carousel": { "type": "array", "description": "carousel", "items": { "$ref": "#/definitions/Slide" } },
        "developer": { "type": "string", "description": "developer" },
        "publisher": { "type": "string", "description": "publisher" },
        "websiteUrl": { "type": "string", "description": "website url" },
        "forumUrl": { "type": "string", "description": "forum url" },
        "platforms": {
          "type": "array",
          "description": "supported platforms",
          "items": { "type": "string", "enum": ["Windows", "MacOS", "Linux", "IOS", "Android"] }
        },
        "platformRequirements": {
          "type": "object",
          "description": "platform requirements",
          "additionalProperties": { "type": "array", "items": { "$ref": "#/definitions/Requirement" } }
        },
        "localizations": {
          "type": "object",
          "description": "localizations",
          "additionalProperties": { "$ref": "#/definitions/AppLocalization" }
        },
        "primaryGenre": {
          "type": "string",
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "Racing",
            "RPG",
            "Simulation",
            "Sports",
            "Strategy"
          ]
        },
        "genres": {
          "type": "array",
          "description": "genres",
          "items": {
            "type": "string",
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "Racing",
              "RPG",
              "Simulation",
              "Sports",
              "Strategy"
            ]
          }
        },
        "players": {
          "type": "array",
          "description": "players",
          "items": { "type": "string", "enum": ["Single", "Multi", "CrossPlatformMulti", "MMO", "Coop", "LocalCoop"] }
        },
        "releaseDate": { "type": "string", "format": "date-time", "description": "release date" }
      }
    },
    "Requirement": {
      "type": "object",
      "required": ["label"],
      "properties": {
        "label": { "type": "string", "description": "label, value can be:minimum,recommended" },
        "osVersion": { "type": "string", "description": "OS version, max length is 255" },
        "processor": { "type": "string", "description": "processor, max length is 255" },
        "ram": { "type": "string", "description": "RAM, max length is 255" },
        "graphics": { "type": "string", "description": "graphics, max length is 255" },
        "directXVersion": { "type": "string", "description": "directX version, max length is 255" },
        "diskSpace": { "type": "string", "description": "disk space, max length is 255" },
        "soundCard": { "type": "string", "description": "sound card, max length is 255" },
        "additionals": { "type": "string", "description": "other requirement, max length is 255" }
      }
    },
    "Slide": {
      "type": "object",
      "properties": {
        "type": { "type": "string", "description": "slide type", "enum": ["image", "video"] },
        "videoSource": { "type": "string", "description": "video source", "enum": ["generic", "youtube", "vimeo"] },
        "url": { "type": "string", "description": "url" },
        "alt": { "type": "string", "description": "alt" },
        "thumbnailUrl": { "type": "string", "description": "thumbnail url" },
        "previewUrl": { "type": "string", "description": "preview url" }
      }
    },
    "AppUpdate": {
      "type": "object",
      "properties": {
        "carousel": { "type": "array", "description": "carousel", "items": { "$ref": "#/definitions/Slide" } },
        "developer": {
          "type": "string",
          "description": "developer, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators, these symbols ',.-, and white-space, max length is 48"
        },
        "publisher": {
          "type": "string",
          "description": "publisher, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators, these symbols ',.-, and white-space, max length is 48"
        },
        "websiteUrl": { "type": "string", "description": "website url, max length is 2000" },
        "forumUrl": { "type": "string", "description": "forum url, max length 2000" },
        "platforms": {
          "type": "array",
          "description": "supported platforms",
          "items": { "type": "string", "enum": ["Windows", "MacOS", "Linux", "IOS", "Android"] }
        },
        "platformRequirements": {
          "type": "object",
          "description": "platform requirements",
          "additionalProperties": { "type": "array", "items": { "$ref": "#/definitions/Requirement" } }
        },
        "localizations": {
          "type": "object",
          "description": "localizations",
          "additionalProperties": { "$ref": "#/definitions/AppLocalization" }
        },
        "primaryGenre": {
          "type": "string",
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "Racing",
            "RPG",
            "Simulation",
            "Sports",
            "Strategy"
          ]
        },
        "genres": {
          "type": "array",
          "description": "genres",
          "items": {
            "type": "string",
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "Racing",
              "RPG",
              "Simulation",
              "Sports",
              "Strategy"
            ]
          }
        },
        "players": {
          "type": "array",
          "description": "players",
          "items": { "type": "string", "enum": ["Single", "Multi", "CrossPlatformMulti", "MMO", "Coop", "LocalCoop"] }
        },
        "releaseDate": { "type": "string", "format": "date-time", "description": "release date in format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" }
      }
    },
    "StoreInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "defaultLanguage",
        "defaultRegion",
        "namespace",
        "published",
        "storeId",
        "supportedLanguages",
        "supportedRegions",
        "title",
        "updatedAt"
      ],
      "properties": {
        "storeId": { "type": "string", "description": "Store id" },
        "namespace": { "type": "string", "description": "The namespace" },
        "title": { "type": "string", "description": "Store title" },
        "description": { "type": "string", "description": "Store description" },
        "published": { "type": "boolean", "description": "If Store is published" },
        "supportedLanguages": { "type": "array", "description": "Store supported language", "items": { "type": "string" } },
        "supportedRegions": { "type": "array", "description": "Store supported regions", "items": { "type": "string" } },
        "defaultRegion": { "type": "string", "description": "Default region" },
        "defaultLanguage": { "type": "string", "description": "Default language" },
        "publishedTime": { "type": "string", "format": "date-time", "description": "Store published time" },
        "createdAt": { "type": "string", "format": "date-time", "description": "Store created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Store updated time" }
      }
    },
    "CatalogChangeStatistics": {
      "type": "object",
      "required": ["count", "selectedCount"],
      "properties": {
        "count": { "type": "integer", "format": "int64", "description": "all change count" },
        "selectedCount": { "type": "integer", "format": "int64", "description": "selected change count" }
      }
    },
    "CatalogChangeInfo": {
      "type": "object",
      "required": ["action", "changeId", "createdAt", "namespace", "selected", "status", "storeId", "updatedAt"],
      "properties": {
        "changeId": { "type": "string", "description": "change id" },
        "namespace": { "type": "string", "description": "namespace" },
        "storeId": { "type": "string", "description": "store id" },
        "categoryPath": { "type": "string", "description": "category path id type Category" },
        "itemId": { "type": "string", "description": "item id" },
        "itemType": {
          "type": "string",
          "description": "item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "type": { "type": "string", "description": "change type", "enum": ["STORE", "CATEGORY", "ITEM", "VIEW", "SECTION"] },
        "title": { "type": "string", "description": "store title or item's name" },
        "sku": { "type": "string", "description": "item sku" },
        "action": { "type": "string", "description": "change action", "enum": ["CREATE", "UPDATE", "DELETE"] },
        "status": { "type": "string", "description": "change status", "enum": ["UNPUBLISHED", "PUBLISHED"] },
        "publishedAt": { "type": "string", "format": "date-time", "description": "publish time" },
        "description": {
          "type": "string",
          "description": "a description if this change is not directly caused by user action. eg: bundle item"
        },
        "selected": { "type": "boolean", "description": "if it is selected for partial publish" },
        "viewId": { "type": "string", "description": "view id, only exists when change type is view" },
        "sectionId": { "type": "string", "description": "section id, only exists when change type is section" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated time" }
      }
    },
    "CatalogChangePagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/CatalogChangeInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "FullCategoryInfo": {
      "type": "object",
      "required": ["categoryPath", "createdAt", "localizationDisplayNames", "namespace", "parentCategoryPath", "updatedAt"],
      "properties": {
        "namespace": { "type": "string", "description": "Category namespace" },
        "parentCategoryPath": { "type": "string", "description": "Parent category path" },
        "categoryPath": { "type": "string", "description": "Category path" },
        "createdAt": { "type": "string", "format": "date-time", "description": "Category created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Category updated time" },
        "localizationDisplayNames": {
          "type": "object",
          "description": "Category localization display name",
          "additionalProperties": { "type": "string" }
        },
        "root": { "type": "boolean" }
      }
    },
    "CategoryUpdate": {
      "type": "object",
      "required": ["localizationDisplayNames"],
      "properties": {
        "localizationDisplayNames": {
          "type": "object",
          "description": "Display name, key is language, value is display name, value max length is 255",
          "additionalProperties": { "type": "string" }
        }
      },
      "description": "A DTO object for updating category API call."
    },
    "BasicCategoryInfo": {
      "type": "object",
      "required": ["categoryPath", "createdAt", "namespace", "parentCategoryPath", "updatedAt"],
      "properties": {
        "namespace": { "type": "string", "description": "Category namespace" },
        "parentCategoryPath": { "type": "string", "description": "Parent category path" },
        "categoryPath": { "type": "string", "description": "Category path" },
        "createdAt": { "type": "string", "format": "date-time", "description": "Category created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Category updated time" },
        "root": { "type": "boolean" }
      }
    },
    "CategoryCreate": {
      "type": "object",
      "required": ["categoryPath", "localizationDisplayNames"],
      "properties": {
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "Category Path, A path separated by \"/\", start with \"/\" and end with combination of case of letters and numbers, max length is 255, min length is 2"
        },
        "localizationDisplayNames": {
          "type": "object",
          "description": "Display name, key is language, value is display name, value max length is 255",
          "additionalProperties": { "type": "string" }
        }
      },
      "description": "A DTO object for creating category API call."
    },
    "ItemId": {
      "type": "object",
      "required": ["itemId"],
      "properties": {
        "itemId": { "type": "string", "description": "itemId" },
        "sku": { "type": "string", "description": "sku" },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE"] }
      }
    },
    "BoxItem": {
      "type": "object",
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "itemSku": { "type": "string", "description": "item sku" },
        "itemType": { "type": "string", "description": "item type" },
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "box item will be expired after this duration (in seconds). Only available for OptionBox. Supported item type(s): COINS"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "box item will be expired after this time. Only available for OptionBox. Supported item type(s): COINS"
        },
        "count": { "type": "integer", "format": "int32", "description": "count" }
      },
      "description": "box item"
    },
    "ConditionGroup": {
      "type": "object",
      "properties": {
        "predicates": { "type": "array", "description": "predicate list", "items": { "$ref": "#/definitions/Predicate" } },
        "operator": { "type": "string", "description": "predicate operator, default is and", "enum": ["and", "or"] }
      }
    },
    "FullItemInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "localizations",
        "name",
        "namespace",
        "regionData",
        "status",
        "updatedAt"
      ],
      "properties": {
        "itemId": { "type": "string", "description": "Item id" },
        "appId": { "type": "string", "description": "App id, required when itemType is APP" },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"]
        },
        "seasonType": { "type": "string", "description": "Season type, required while itemType is SEASON", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "Base app id" },
        "namespace": { "type": "string", "description": "Item namespace" },
        "sku": { "type": "string", "description": "Sku" },
        "name": { "type": "string", "description": "Name" },
        "entitlementType": { "type": "string", "description": "Entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": { "type": "boolean", "description": "Whether stack the CONSUMABLE entitlement" },
        "categoryPath": { "type": "string", "description": "Item category path" },
        "images": { "type": "array", "description": "images", "items": { "$ref": "#/definitions/Image" } },
        "thumbnailUrl": { "type": "string", "description": "thumbnail url" },
        "localizations": {
          "type": "object",
          "description": "Item localizations",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        },
        "status": { "type": "string", "description": "Item status", "enum": ["ACTIVE", "INACTIVE"] },
        "listable": { "type": "boolean", "description": "Whether can be visible in Store for public user" },
        "purchasable": { "type": "boolean", "description": "Whether can be purchased" },
        "sectionExclusive": { "type": "boolean", "description": "whether it is sold in section only" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "targetNamespace": { "type": "string", "description": "The target namespace of a cross namespace item" },
        "targetCurrencyCode": { "type": "string", "description": "The target currency code of coin Item" },
        "targetItemId": { "type": "string", "description": "Target item id if this item is mapping from game namespace" },
        "regionData": {
          "type": "object",
          "description": "Item region data",
          "additionalProperties": { "type": "array", "items": { "$ref": "#/definitions/RegionDataItem" } }
        },
        "recurring": { "description": "recurring for subscription", "$ref": "#/definitions/Recurring" },
        "itemIds": { "type": "array", "description": "Bundle item's item ids", "items": { "type": "string" } },
        "itemQty": {
          "type": "object",
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "additionalProperties": { "type": "integer", "format": "int32" }
        },
        "boundItemIds": {
          "type": "array",
          "description": "the items which this item being bounded to",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "tags": { "type": "array", "description": "Tags", "uniqueItems": true, "items": { "type": "string" } },
        "features": { "type": "array", "description": "Features", "uniqueItems": true, "items": { "type": "string" } },
        "maxCountPerUser": { "type": "integer", "format": "int32", "description": "Max count per user, -1 means UNLIMITED" },
        "maxCount": { "type": "integer", "format": "int32", "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE" },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "ext": { "type": "object", "description": "customized item properties", "additionalProperties": { "type": "object" } },
        "boothName": { "type": "string", "description": "booth name to get tickets while it's item type is CODE" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "purchaseCondition": { "description": "purchase condition", "$ref": "#/definitions/PurchaseCondition" },
        "optionBoxConfig": { "description": "option box config", "$ref": "#/definitions/OptionBoxConfig" },
        "lootBoxConfig": { "description": "loot box config", "$ref": "#/definitions/LootBoxConfig" },
        "sellable": { "type": "boolean", "description": "sellable" },
        "saleConfig": { "description": "saleConfig", "$ref": "#/definitions/SaleConfig" }
      }
    },
    "Image": {
      "type": "object",
      "required": ["height", "imageUrl", "smallImageUrl", "width"],
      "properties": {
        "as": { "type": "string", "description": "image for" },
        "caption": { "type": "string", "description": "image caption" },
        "height": { "type": "integer", "format": "int32", "description": "height" },
        "width": { "type": "integer", "format": "int32", "description": "width" },
        "imageUrl": { "type": "string", "description": "imageUrl" },
        "smallImageUrl": { "type": "string", "description": "smallImageUrl" }
      }
    },
    "Localization": {
      "type": "object",
      "required": ["title"],
      "properties": {
        "title": { "type": "string", "description": "title info" },
        "description": { "type": "string", "description": "description info" },
        "longDescription": { "type": "string", "description": "long description info" },
        "localExt": { "type": "object", "additionalProperties": { "type": "object" } }
      }
    },
    "LootBoxConfig": {
      "type": "object",
      "properties": {
        "rewardCount": { "type": "integer", "format": "int32", "description": "reward count, default is 1" },
        "rewards": { "type": "array", "description": "rewards", "items": { "$ref": "#/definitions/LootBoxReward" } },
        "rollFunction": { "type": "string", "description": "roll function", "enum": ["DEFAULT", "CUSTOM"] }
      }
    },
    "LootBoxReward": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "reward name" },
        "type": { "type": "string", "description": "reward type", "enum": ["REWARD", "REWARD_GROUP", "PROBABILITY_GROUP"] },
        "lootBoxItems": {
          "type": "array",
          "description": "reward items, if type is PROBABILITY_GROUP, will random get one of items in it, if type is REWARD, will grant all items to user when roll this reward",
          "items": { "$ref": "#/definitions/BoxItem" }
        },
        "weight": { "type": "integer", "format": "int32", "description": "reward weight" },
        "odds": { "type": "number", "format": "double", "description": "odds, automatic calculation based on weights." }
      }
    },
    "OptionBoxConfig": {
      "type": "object",
      "properties": { "boxItems": { "type": "array", "description": "Option box items", "items": { "$ref": "#/definitions/BoxItem" } } },
      "description": "Option box config."
    },
    "Predicate": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "predicate name" },
        "predicateType": {
          "type": "string",
          "description": "predicate type",
          "enum": ["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate"]
        },
        "comparison": {
          "type": "string",
          "description": "comparison",
          "enum": ["is", "isNot", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "includes", "excludes"]
        },
        "anyOf": { "type": "integer", "format": "int32", "description": "anyOf, only available if comparison is includes or excludes" },
        "values": {
          "type": "array",
          "description": "values, pass check value when predicateType is EntitlementPredicate or SeasonPassPredicateEntitlementPredicate requires item sku list, SeasonPassPredicate requires pass code list",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "value": { "type": "string", "description": "value, pass check value when predicateType is SeasonTierPredicate" }
      },
      "description": "predicate object"
    },
    "PurchaseCondition": {
      "type": "object",
      "properties": {
        "conditionGroups": {
          "type": "array",
          "description": "condition groups, the operator for condition group is 'or'",
          "items": { "$ref": "#/definitions/ConditionGroup" }
        }
      }
    },
    "Recurring": {
      "type": "object",
      "required": ["cycle", "fixedFreeDays", "fixedTrialCycles", "graceDays"],
      "properties": {
        "cycle": { "type": "string", "description": "recurring cycle", "enum": ["WEEKLY", "MONTHLY", "QUARTERLY", "YEARLY"] },
        "fixedFreeDays": { "type": "integer", "format": "int32", "description": "fixed free days, 0 means not set" },
        "fixedTrialCycles": { "type": "integer", "format": "int32", "description": "fixed trial cycles, 0 means not set" },
        "graceDays": {
          "type": "integer",
          "format": "int32",
          "description": "recurring grace days, retry recurring charge within configured days if charge fail, default 7"
        }
      }
    },
    "RegionDataItem": {
      "type": "object",
      "required": ["currencyCode", "currencyNamespace", "currencyType"],
      "properties": {
        "price": { "type": "integer", "format": "int32", "description": "price value, set to 0 if it's free" },
        "discountPercentage": {
          "type": "integer",
          "format": "int32",
          "description": "Discount percentage，default is 0, if this value is not 0, it will override the discountAmount",
          "minimum": 0,
          "maximum": 100
        },
        "discountAmount": { "type": "integer", "format": "int32", "description": "Discount amount, min is 0, max is price", "minimum": 0 },
        "discountedPrice": { "type": "integer", "format": "int32" },
        "currencyCode": { "type": "string", "example": "USD", "description": "currency code" },
        "currencyType": { "type": "string", "description": "currency type", "enum": ["REAL", "VIRTUAL"] },
        "currencyNamespace": { "type": "string", "description": "currency namespace" },
        "trialPrice": {
          "type": "integer",
          "format": "int32",
          "description": "trial price, required while fixedTrialCycles set, should >=0 and <= price, default same as trialPrice"
        },
        "purchaseAt": { "type": "string", "format": "date-time", "description": "PurchaseAt" },
        "expireAt": { "type": "string", "format": "date-time", "description": "ExpireAt" },
        "discountPurchaseAt": { "type": "string", "format": "date-time", "description": "DiscountPurchaseAt" },
        "discountExpireAt": { "type": "string", "format": "date-time", "description": "Discount expire date time" }
      },
      "description": "Region data"
    },
    "SaleConfig": {
      "type": "object",
      "required": ["currencyCode", "price"],
      "properties": {
        "currencyCode": { "type": "string", "description": "currency code, only allow to use current namespace virtual currency" },
        "price": { "type": "integer", "format": "int32", "description": "price value" }
      }
    },
    "BundledItemInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "properties": {
        "title": { "type": "string", "description": "title info" },
        "description": { "type": "string", "description": "description info" },
        "longDescription": { "type": "string", "description": "long description info" },
        "itemId": { "type": "string", "description": "Item id" },
        "appId": { "type": "string", "description": "App id, required when itemType is APP" },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"]
        },
        "seasonType": { "type": "string", "description": "Season type, required while itemType is SEASON", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "Base app id" },
        "sku": { "type": "string", "description": "Sku" },
        "namespace": { "type": "string", "description": "Item namespace" },
        "name": { "type": "string", "description": "Name" },
        "entitlementType": { "type": "string", "description": "Entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": { "type": "boolean", "description": "Whether stack the CONSUMABLE entitlement" },
        "categoryPath": { "type": "string", "description": "Item category path" },
        "status": { "type": "string", "description": "Item status", "enum": ["ACTIVE", "INACTIVE"] },
        "listable": { "type": "boolean", "description": "Whether can be visible in Store for public user" },
        "purchasable": { "type": "boolean", "description": "Whether can be purchased" },
        "sectionExclusive": { "type": "boolean", "description": "whether it is sold in section only" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "targetNamespace": { "type": "string", "description": "The target namespace of a cross namespace item" },
        "targetCurrencyCode": { "type": "string", "description": "Target currency code of coin item" },
        "targetItemId": { "type": "string", "description": "Target item id if this item is mapping from game namespace" },
        "images": { "type": "array", "description": "images", "items": { "$ref": "#/definitions/Image" } },
        "thumbnailUrl": { "type": "string", "description": "thumbnail url" },
        "regionData": { "type": "array", "description": "Region data", "items": { "$ref": "#/definitions/RegionDataItem" } },
        "recurring": { "description": "recurring for subscription", "$ref": "#/definitions/Recurring" },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": { "type": "string" }
        },
        "itemQty": {
          "type": "object",
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "additionalProperties": { "type": "integer", "format": "int32" }
        },
        "boundItemIds": {
          "type": "array",
          "description": "the items which this item being bounded to",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "tags": { "type": "array", "description": "Tags", "uniqueItems": true, "items": { "type": "string" } },
        "features": { "type": "array", "description": "Features", "uniqueItems": true, "items": { "type": "string" } },
        "maxCountPerUser": { "type": "integer", "format": "int32", "description": "Max count per user, -1 means UNLIMITED" },
        "maxCount": { "type": "integer", "format": "int32", "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE" },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "boothName": { "type": "string", "description": "booth name to get tickets while it's item type is CODE" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "ext": { "type": "object", "description": "customized item properties", "additionalProperties": { "type": "object" } },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "purchaseCondition": { "description": "purchase condition", "$ref": "#/definitions/PurchaseCondition" },
        "optionBoxConfig": { "description": "option box config", "$ref": "#/definitions/OptionBoxConfig" },
        "lootBoxConfig": { "description": "loot box config", "$ref": "#/definitions/LootBoxConfig" },
        "fresh": { "type": "boolean", "description": "fresh" },
        "sellable": { "type": "boolean", "description": "whether allow to sell back to store" },
        "saleConfig": { "description": "sale config", "$ref": "#/definitions/SaleConfig" },
        "bundledQty": { "type": "integer", "format": "int32" },
        "localExt": { "type": "object", "additionalProperties": { "type": "object" } }
      }
    },
    "PopulatedItemInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "properties": {
        "title": { "type": "string", "description": "title info" },
        "description": { "type": "string", "description": "description info" },
        "longDescription": { "type": "string", "description": "long description info" },
        "itemId": { "type": "string", "description": "Item id" },
        "appId": { "type": "string", "description": "App id, required when itemType is APP" },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"]
        },
        "seasonType": { "type": "string", "description": "Season type, required while itemType is SEASON", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "Base app id" },
        "sku": { "type": "string", "description": "Sku" },
        "namespace": { "type": "string", "description": "Item namespace" },
        "name": { "type": "string", "description": "Name" },
        "entitlementType": { "type": "string", "description": "Entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": { "type": "boolean", "description": "Whether stack the CONSUMABLE entitlement" },
        "categoryPath": { "type": "string", "description": "Item category path" },
        "status": { "type": "string", "description": "Item status", "enum": ["ACTIVE", "INACTIVE"] },
        "listable": { "type": "boolean", "description": "Whether can be visible in Store for public user" },
        "purchasable": { "type": "boolean", "description": "Whether can be purchased" },
        "sectionExclusive": { "type": "boolean", "description": "whether it is sold in section only" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "targetNamespace": { "type": "string", "description": "The target namespace of a cross namespace item" },
        "targetCurrencyCode": { "type": "string", "description": "Target currency code of coin item" },
        "targetItemId": { "type": "string", "description": "Target item id if this item is mapping from game namespace" },
        "images": { "type": "array", "description": "images", "items": { "$ref": "#/definitions/Image" } },
        "thumbnailUrl": { "type": "string", "description": "thumbnail url" },
        "regionData": { "type": "array", "description": "Region data", "items": { "$ref": "#/definitions/RegionDataItem" } },
        "recurring": { "description": "recurring for subscription", "$ref": "#/definitions/Recurring" },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": { "type": "string" }
        },
        "itemQty": {
          "type": "object",
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "additionalProperties": { "type": "integer", "format": "int32" }
        },
        "boundItemIds": {
          "type": "array",
          "description": "the items which this item being bounded to",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "tags": { "type": "array", "description": "Tags", "uniqueItems": true, "items": { "type": "string" } },
        "features": { "type": "array", "description": "Features", "uniqueItems": true, "items": { "type": "string" } },
        "maxCountPerUser": { "type": "integer", "format": "int32", "description": "Max count per user, -1 means UNLIMITED" },
        "maxCount": { "type": "integer", "format": "int32", "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE" },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "boothName": { "type": "string", "description": "booth name to get tickets while it's item type is CODE" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "ext": { "type": "object", "description": "customized item properties", "additionalProperties": { "type": "object" } },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "purchaseCondition": { "description": "purchase condition", "$ref": "#/definitions/PurchaseCondition" },
        "optionBoxConfig": { "description": "option box config", "$ref": "#/definitions/OptionBoxConfig" },
        "lootBoxConfig": { "description": "loot box config", "$ref": "#/definitions/LootBoxConfig" },
        "fresh": { "type": "boolean", "description": "fresh" },
        "sellable": { "type": "boolean", "description": "whether allow to sell back to store" },
        "saleConfig": { "description": "sale config", "$ref": "#/definitions/SaleConfig" },
        "items": {
          "type": "array",
          "description": "bundle items, only has value when item is bundle or optionbox and is populated",
          "items": { "$ref": "#/definitions/BundledItemInfo" }
        },
        "localExt": { "type": "object", "additionalProperties": { "type": "object" } }
      }
    },
    "ItemReturnRequest": {
      "type": "object",
      "required": ["orderNo"],
      "properties": { "orderNo": { "type": "string", "description": "orderNo" } }
    },
    "PurchaseConditionUpdate": {
      "type": "object",
      "properties": { "purchaseCondition": { "description": "purchase condition", "$ref": "#/definitions/PurchaseCondition" } },
      "description": "A DTO object for creating/updating item purchase condition"
    },
    "FullItemPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/FullItemInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "ItemAcquireResult": {
      "type": "object",
      "required": ["maxCount", "success"],
      "properties": {
        "success": { "type": "boolean", "description": "acquire result" },
        "maxCount": { "type": "integer", "format": "int32", "description": "max count" }
      }
    },
    "ItemAcquireRequest": {
      "type": "object",
      "required": ["count", "orderNo"],
      "properties": {
        "orderNo": { "type": "string", "description": "order no" },
        "count": { "type": "integer", "format": "int32", "description": "acquire count" }
      }
    },
    "ItemInfo": {
      "type": "object",
      "required": [
        "categoryPath",
        "createdAt",
        "entitlementType",
        "itemId",
        "itemType",
        "language",
        "name",
        "namespace",
        "region",
        "status",
        "title",
        "updatedAt"
      ],
      "properties": {
        "title": { "type": "string", "description": "title info" },
        "description": { "type": "string", "description": "description info" },
        "longDescription": { "type": "string", "description": "long description info" },
        "itemId": { "type": "string", "description": "Item id" },
        "appId": { "type": "string", "description": "App id, required when itemType is APP" },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"]
        },
        "seasonType": { "type": "string", "description": "Season type, required while itemType is SEASON", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "Base app id" },
        "sku": { "type": "string", "description": "Sku" },
        "namespace": { "type": "string", "description": "Item namespace" },
        "name": { "type": "string", "description": "Name" },
        "entitlementType": { "type": "string", "description": "Entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": { "type": "boolean", "description": "Whether stack the CONSUMABLE entitlement" },
        "categoryPath": { "type": "string", "description": "Item category path" },
        "status": { "type": "string", "description": "Item status", "enum": ["ACTIVE", "INACTIVE"] },
        "listable": { "type": "boolean", "description": "Whether can be visible in Store for public user" },
        "purchasable": { "type": "boolean", "description": "Whether can be purchased" },
        "sectionExclusive": { "type": "boolean", "description": "whether it is sold in section only" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "targetNamespace": { "type": "string", "description": "The target namespace of a cross namespace item" },
        "targetCurrencyCode": { "type": "string", "description": "Target currency code of coin item" },
        "targetItemId": { "type": "string", "description": "Target item id if this item is mapping from game namespace" },
        "images": { "type": "array", "description": "images", "items": { "$ref": "#/definitions/Image" } },
        "thumbnailUrl": { "type": "string", "description": "thumbnail url" },
        "regionData": { "type": "array", "description": "Region data", "items": { "$ref": "#/definitions/RegionDataItem" } },
        "recurring": { "description": "recurring for subscription", "$ref": "#/definitions/Recurring" },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": { "type": "string" }
        },
        "itemQty": {
          "type": "object",
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "additionalProperties": { "type": "integer", "format": "int32" }
        },
        "boundItemIds": {
          "type": "array",
          "description": "the items which this item being bounded to",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "tags": { "type": "array", "description": "Tags", "uniqueItems": true, "items": { "type": "string" } },
        "features": { "type": "array", "description": "Features", "uniqueItems": true, "items": { "type": "string" } },
        "maxCountPerUser": { "type": "integer", "format": "int32", "description": "Max count per user, -1 means UNLIMITED" },
        "maxCount": { "type": "integer", "format": "int32", "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE" },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "boothName": { "type": "string", "description": "booth name to get tickets while it's item type is CODE" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "ext": { "type": "object", "description": "customized item properties", "additionalProperties": { "type": "object" } },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "purchaseCondition": { "description": "purchase condition", "$ref": "#/definitions/PurchaseCondition" },
        "optionBoxConfig": { "description": "option box config", "$ref": "#/definitions/OptionBoxConfig" },
        "lootBoxConfig": { "description": "loot box config", "$ref": "#/definitions/LootBoxConfig" },
        "fresh": { "type": "boolean", "description": "fresh" },
        "sellable": { "type": "boolean", "description": "whether allow to sell back to store" },
        "saleConfig": { "description": "sale config", "$ref": "#/definitions/SaleConfig" },
        "localExt": { "type": "object", "additionalProperties": { "type": "object" } }
      }
    },
    "ItemUpdate": {
      "type": "object",
      "required": ["entitlementType", "itemType"],
      "properties": {
        "itemType": {
          "type": "string",
          "description": "Item Type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "name": { "type": "string", "description": "Name" },
        "entitlementType": { "type": "string", "description": "Entitlement Type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Represent entitlement count when entitlement type is \"CONSUMABLE\", and represent coin count when itemType is \"COINS\""
        },
        "stackable": { "type": "boolean", "description": "Whether to stack the entitlement when entitlement type is \"CONSUMABLE\"" },
        "appId": { "type": "string", "description": "appId, required if appType is present, alpha numeric, max length is 255" },
        "appType": { "type": "string", "description": "appType", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
        "seasonType": { "type": "string", "description": "seasonType", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "baseAppId, can set value of game appId if want to link to a game" },
        "targetCurrencyCode": { "type": "string", "description": "target currency code, required if item type is \"COINS\"" },
        "targetNamespace": {
          "type": "string",
          "description": "target namespace, require when sell a game's item on the publisher namespace"
        },
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "Category Path, A path separated by \"/\", will not show in store if it set to blank, max length is 255"
        },
        "images": { "type": "array", "description": "images", "items": { "$ref": "#/definitions/Image" } },
        "thumbnailUrl": { "type": "string", "description": "thumbnail Url" },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE"] },
        "listable": { "type": "boolean", "description": "Whether can be visible in Store for public user" },
        "purchasable": { "type": "boolean", "description": "Whether can be purchased" },
        "sectionExclusive": { "type": "boolean", "description": "Whether this item is sold in section only" },
        "sku": {
          "type": "string",
          "description": "sku, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric, max length is 127"
        },
        "regionData": {
          "type": "object",
          "description": "region data map, key is region, value is region data list",
          "additionalProperties": { "type": "array", "items": { "$ref": "#/definitions/RegionDataItemDTO" } }
        },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": { "type": "string" }
        },
        "itemQty": {
          "type": "object",
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "additionalProperties": { "type": "integer", "format": "int32" }
        },
        "recurring": { "description": "recurring for subscription", "$ref": "#/definitions/Recurring" },
        "tags": {
          "type": "array",
          "description": "Tags, allowed characters from a-zA-Z0-9:_- with length range from 1 to 30, should start and end in upper/lowercase/number, an item has max 5 tags.",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "features": {
          "type": "array",
          "description": "Features, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric with length range from 1 to 127",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "maxCountPerUser": { "type": "integer", "format": "int32", "description": "Max count per user, -1 means UNLIMITED" },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "Max count, -1 means UNLIMITED, new value should >= old value if both old value and new value is limited, unset when itemType is CODE"
        },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while ItemType is CODE, Campaign or KeyGroup should located in targetNamespace if targetNamespace not null"
        },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "ext": { "type": "object", "description": "customized item properties", "additionalProperties": { "type": "object" } },
        "optionBoxConfig": {
          "description": "option box config, should be empty if item type is not \"OPTIONBOX\"",
          "$ref": "#/definitions/OptionBoxConfig"
        },
        "lootBoxConfig": {
          "description": "loot box config, should be empty if item type is not \"LOOTBOX\"",
          "$ref": "#/definitions/LootBoxConfig"
        },
        "sellable": { "type": "boolean", "description": "sellable, whether allow to sell back to store" },
        "saleConfig": { "description": "sale config, required if sellable is true", "$ref": "#/definitions/SaleConfig" }
      },
      "description": "A DTO object for updating item API call."
    },
    "RegionDataItemDTO": {
      "type": "object",
      "required": ["currencyCode", "currencyNamespace", "currencyType", "price"],
      "properties": {
        "price": { "type": "integer", "format": "int32", "description": "price value, set to 0 if it's free" },
        "discountPercentage": {
          "type": "integer",
          "format": "int32",
          "description": "Discount percentage，default is 0, if this value is not 0, it will override the discountAmount",
          "minimum": 0,
          "maximum": 100
        },
        "discountAmount": { "type": "integer", "format": "int32", "description": "Discount amount, min is 0, max is price", "minimum": 0 },
        "currencyCode": { "type": "string", "example": "USD", "description": "currency code" },
        "currencyType": { "type": "string", "description": "currency type", "enum": ["REAL", "VIRTUAL"] },
        "currencyNamespace": { "type": "string", "description": "currency namespace" },
        "trialPrice": {
          "type": "integer",
          "format": "int32",
          "description": "trial price, required while fixedTrialCycles set, should >=0 and <= price, default same as trialPrice"
        },
        "purchaseAt": { "type": "string", "format": "date-time", "description": "PurchaseAt" },
        "expireAt": { "type": "string", "format": "date-time", "description": "ExpireAt" },
        "discountPurchaseAt": { "type": "string", "format": "date-time", "description": "DiscountPurchaseAt" },
        "discountExpireAt": { "type": "string", "format": "date-time", "description": "Discount expire date time" }
      },
      "description": "Region data DTO Object, it's used when create/update item"
    },
    "ItemDynamicDataInfo": {
      "type": "object",
      "required": ["availableCount", "itemId", "namespace", "userAvailableCount", "userPurchaseLimit"],
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "namespace": { "type": "string", "description": "item namespace" },
        "availableCount": {
          "type": "integer",
          "format": "int32",
          "description": "the available count of this item, -1 means UNLIMITED, corresponding to maxCount"
        },
        "userAvailableCount": {
          "type": "integer",
          "format": "int64",
          "description": "the available count of this item for current user, -1 means UNLIMITED, corresponding to maxCountPerUser"
        },
        "userPurchaseLimit": {
          "type": "integer",
          "format": "int64",
          "description": "the max count that user can do purchase, -1 means UNLIMITED"
        }
      }
    },
    "BulkRegionDataChangeRequest": {
      "type": "object",
      "properties": { "changes": { "type": "array", "items": { "$ref": "#/definitions/RegionDataChange" } } }
    },
    "RegionDataChange": {
      "type": "object",
      "required": ["itemIdentityType"],
      "properties": {
        "regionData": {
          "type": "object",
          "description": "region data map, key is region, value is region data list (This map will override existing keys instead of entire map)",
          "additionalProperties": { "type": "array", "items": { "$ref": "#/definitions/RegionDataItem" } }
        },
        "itemIdentityType": { "type": "string", "description": "Item Identity Type", "enum": ["ITEM_ID", "ITEM_SKU"] },
        "itemIdentities": { "type": "array", "items": { "type": "string" } }
      }
    },
    "InGameItemSync": {
      "type": "object",
      "required": ["categoryPath", "targetItemId", "targetNamespace"],
      "properties": {
        "targetNamespace": { "type": "string", "description": "game namespace" },
        "targetItemId": { "type": "string", "description": "item id in game namespace" },
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "the new category path for the synced item, A path separated by \"/\", will not show in store if it set to blank"
        }
      }
    },
    "ItemCreate": {
      "type": "object",
      "required": ["categoryPath", "entitlementType", "itemType", "localizations", "name", "regionData", "status"],
      "properties": {
        "itemType": {
          "type": "string",
          "description": "Item Type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "name": { "type": "string", "description": "Name, max length is 127" },
        "entitlementType": { "type": "string", "description": "Entitlement Type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Represent entitlement count when entitlement type is \"CONSUMABLE\", and represent coin count when itemType is \"COINS\""
        },
        "stackable": { "type": "boolean", "description": "Whether to stack the entitlement when entitlement type is \"CONSUMABLE\"" },
        "appId": { "type": "string", "description": "appId, required if appType is present, alpha numeric, max length is 255" },
        "appType": { "type": "string", "description": "appType", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
        "seasonType": { "type": "string", "description": "seasonType", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "baseAppId, can set value of game appId if want to link to a game" },
        "targetCurrencyCode": { "type": "string", "description": "target currency code, required if item type is \"COINS\"" },
        "targetNamespace": {
          "type": "string",
          "description": "target namespace, require when sell a game's item on the publisher namespace"
        },
        "categoryPath": {
          "type": "string",
          "example": "/games",
          "description": "Category Path, A path separated by \"/\", will not show in store if it set to blank, max length is 255"
        },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE"] },
        "listable": { "type": "boolean", "description": "Whether can be visible in Store for public user" },
        "purchasable": { "type": "boolean", "description": "Whether can be purchased" },
        "sectionExclusive": { "type": "boolean", "description": "Whether this item is sold in section only" },
        "sku": {
          "type": "string",
          "description": "sku, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric, max length is 127"
        },
        "images": { "type": "array", "description": "images", "items": { "$ref": "#/definitions/Image" } },
        "thumbnailUrl": { "type": "string", "description": "thumbnail Url" },
        "regionData": {
          "type": "object",
          "description": "region data map, key is region, value is region data list",
          "additionalProperties": { "type": "array", "items": { "$ref": "#/definitions/RegionDataItemDTO" } }
        },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": { "type": "string" }
        },
        "itemQty": {
          "type": "object",
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "additionalProperties": { "type": "integer", "format": "int32" }
        },
        "recurring": { "description": "recurring for subscription", "$ref": "#/definitions/Recurring" },
        "tags": {
          "type": "array",
          "description": "Tags, allowed characters from a-zA-Z0-9:_- with length range from 1 to 30, should start and end in upper/lowercase/number, an item has max 5 tags.",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "features": {
          "type": "array",
          "description": "Features, allowed characters from a-zA-Z0-9_:- and start/end in alphanumeric with length range from 1 to 127",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "maxCountPerUser": { "type": "integer", "format": "int32", "description": "Max count per user, -1 means UNLIMITED" },
        "maxCount": { "type": "integer", "format": "int32", "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE" },
        "boothName": {
          "type": "string",
          "description": "booth name to get tickets while ItemType is CODE, Campaign or KeyGroup should located in targetNamespace if targetNamespace not null"
        },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "ext": { "type": "object", "description": "customized item properties", "additionalProperties": { "type": "object" } },
        "optionBoxConfig": {
          "description": "option box config, should be empty if item type is not \"OPTIONBOX\"",
          "$ref": "#/definitions/OptionBoxConfig"
        },
        "lootBoxConfig": {
          "description": "loot box config, should be empty if item type is not \"LOOTBOX\"",
          "$ref": "#/definitions/LootBoxConfig"
        },
        "sellable": { "type": "boolean", "description": "sellable, whether allow to sell back to store" },
        "saleConfig": { "description": "sale config, required if sellable is true", "$ref": "#/definitions/SaleConfig" }
      },
      "description": "A DTO object for creating item API call."
    },
    "AvailableComparison": {
      "type": "object",
      "properties": {
        "comparison": {
          "type": "string",
          "description": "available comparison",
          "enum": ["is", "isNot", "isGreaterThan", "isGreaterThanOrEqual", "isLessThan", "isLessThanOrEqual", "includes", "excludes"]
        },
        "text": { "type": "string", "description": "comparison text" }
      },
      "description": "available comparison object"
    },
    "AvailablePredicate": {
      "type": "object",
      "properties": {
        "predicateType": {
          "type": "string",
          "description": "available predicate type",
          "enum": ["EntitlementPredicate", "SeasonPassPredicate", "SeasonTierPredicate"]
        },
        "availableComparisons": {
          "type": "array",
          "description": "available comparison list",
          "items": { "$ref": "#/definitions/AvailableComparison" }
        },
        "valueType": { "type": "string", "description": "predicate value type", "enum": ["List", "Number", "String"] },
        "showAnyOf": { "type": "boolean", "description": "whether show any of on config page" }
      },
      "description": "available predicate object"
    },
    "BasicItem": {
      "type": "object",
      "required": ["createdAt", "entitlementType", "itemId", "itemType", "name", "namespace", "status", "updatedAt"],
      "properties": {
        "itemId": { "type": "string", "description": "Item id" },
        "appId": { "type": "string", "description": "App id, required when itemType is APP" },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"]
        },
        "seasonType": { "type": "string", "description": "Season type, required while itemType is SEASON", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "Base app id" },
        "sku": { "type": "string", "description": "Sku" },
        "namespace": { "type": "string", "description": "Item namespace" },
        "name": { "type": "string", "description": "Name" },
        "entitlementType": { "type": "string", "description": "Entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "status": { "type": "string", "description": "Item status", "enum": ["ACTIVE", "INACTIVE"] },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "tags": { "type": "array", "description": "Tags", "uniqueItems": true, "items": { "type": "string" } },
        "features": { "type": "array", "description": "Features", "uniqueItems": true, "items": { "type": "string" } },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "ConditionGroupValidateResult": {
      "type": "object",
      "properties": {
        "predicateValidateResults": {
          "type": "array",
          "description": "predicate validate details, list of predicate validate results",
          "items": { "$ref": "#/definitions/PredicateValidateResult" }
        }
      }
    },
    "ItemPurchaseConditionValidateResult": {
      "type": "object",
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "sku": { "type": "string", "description": "item sku" },
        "purchasable": { "type": "boolean", "description": "purchasable" },
        "validateDetails": {
          "type": "array",
          "description": "validate details: list of condition group validate result. index is same as purchase condition group.",
          "items": { "$ref": "#/definitions/ConditionGroupValidateResult" }
        }
      }
    },
    "PredicateValidateResult": {
      "type": "object",
      "properties": {
        "predicateName": { "type": "string", "description": "predicate name" },
        "validated": { "type": "boolean", "description": "is validated" },
        "matched": { "type": "array", "description": "matched value list", "items": { "type": "string" } },
        "unmatched": { "type": "array", "description": "unmatched value list", "items": { "type": "string" } }
      }
    },
    "ItemPurchaseConditionValidateRequest": {
      "type": "object",
      "properties": { "itemIds": { "type": "array", "items": { "type": "string" } } }
    },
    "ItemTypeConfigInfo": {
      "type": "object",
      "required": ["createdAt", "fulfillmentUrl", "id", "itemType", "updatedAt"],
      "properties": {
        "id": { "type": "string", "description": "Item type config id" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "fulfillmentUrl": { "type": "string", "description": "url to send the fulfillment notification" },
        "purchaseConditionUrl": { "type": "string", "description": "url to check if the item is purchasable" },
        "dryRun": { "type": "boolean", "description": "mock workflow while set true, default false" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated time" }
      }
    },
    "ItemTypeConfigCreate": {
      "type": "object",
      "required": ["fulfillmentUrl", "itemType"],
      "properties": {
        "itemType": {
          "type": "string",
          "description": "Item Type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "clazz": { "type": "string", "description": "customized item clazz" },
        "fulfillmentUrl": { "type": "string", "description": "url to send the fulfillment notification" },
        "purchaseConditionUrl": { "type": "string", "description": "url to check if the item is purchasable" },
        "dryRun": { "type": "boolean", "description": "mock workflow while set true, default false" }
      },
      "description": "A DTO object for creating item type config API call."
    },
    "ItemTypeConfigUpdate": {
      "type": "object",
      "required": ["fulfillmentUrl"],
      "properties": {
        "clazz": { "type": "string", "description": "customized item clazz" },
        "fulfillmentUrl": { "type": "string", "description": "url to send the fulfillment notification" },
        "purchaseConditionUrl": { "type": "string", "description": "url to check if the item is purchasable" },
        "dryRun": { "type": "boolean", "description": "mock workflow while set true, default false" }
      },
      "description": "A DTO object for updating item API call."
    },
    "FixedPeriodRotationConfig": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "duration: rotation duration, unit is minutes, min duration is 1"
        },
        "rule": { "type": "string", "description": "rotation rule: SEQUENCE, default is SEQUENCE", "enum": ["SEQUENCE"] },
        "backfillType": { "type": "string", "description": "backfill type: NONE/CUSTOM, default is NONE", "enum": ["NONE", "CUSTOM"] },
        "itemCount": { "type": "integer", "format": "int32", "description": "returned item count, min is 1, default is 1" }
      }
    },
    "FullSectionInfo": {
      "type": "object",
      "required": ["active", "createdAt", "endDate", "localizations", "name", "namespace", "sectionId", "startDate", "updatedAt"],
      "properties": {
        "sectionId": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "viewId": { "type": "string", "description": "view id" },
        "viewName": { "type": "string", "description": "view name" },
        "name": { "type": "string", "description": "name" },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        },
        "active": { "type": "boolean", "description": "active" },
        "startDate": { "type": "string", "format": "date-time", "description": "start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "end date" },
        "items": { "type": "array", "description": "section items", "items": { "$ref": "#/definitions/SectionItem" } },
        "itemNamings": { "type": "array", "description": "section item namings", "items": { "$ref": "#/definitions/ItemNaming" } },
        "createdAt": { "type": "string", "format": "date-time", "description": "view created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "view updated time" },
        "rotationType": { "type": "string", "description": "rotation type, default is NONE", "enum": ["NONE", "FIXED_PERIOD", "CUSTOM"] },
        "fixedPeriodRotationConfig": {
          "description": "fix period rotation config, don't allow null when rotation type is FIXED_PERIOD",
          "$ref": "#/definitions/FixedPeriodRotationConfig"
        },
        "ext": { "type": "object", "description": "section extension", "additionalProperties": { "type": "object" } },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" }
      }
    },
    "ItemNaming": {
      "type": "object",
      "required": ["itemId", "itemType", "name", "namespace"],
      "properties": {
        "itemId": { "type": "string", "description": "Item id" },
        "namespace": { "type": "string", "description": "Item namespace" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "sku": { "type": "string", "description": "Sku" },
        "name": { "type": "string", "description": "Name" },
        "categoryPath": { "type": "string", "description": "Category Path" },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE"] },
        "seasonType": { "type": "string", "description": "season type", "enum": ["PASS", "TIER"] }
      }
    },
    "SectionItem": {
      "type": "object",
      "required": ["id"],
      "properties": { "id": { "type": "string", "description": "item id" }, "sku": { "type": "string", "description": "item sku" } }
    },
    "SectionUpdate": {
      "type": "object",
      "required": ["endDate", "localizations", "name", "startDate"],
      "properties": {
        "name": { "type": "string", "description": "section name" },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        },
        "active": { "type": "boolean", "description": "active, default true" },
        "startDate": { "type": "string", "format": "date-time", "description": "start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "end date" },
        "items": { "type": "array", "description": "items", "items": { "$ref": "#/definitions/SectionItem" } },
        "viewId": { "type": "string", "description": "view id" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "rotationType": { "type": "string", "description": "rotation type, default is NONE", "enum": ["NONE", "FIXED_PERIOD", "CUSTOM"] },
        "fixedPeriodRotationConfig": {
          "description": "fix period rotation config, don't allow null when rotation type is FIXED_PERIOD",
          "$ref": "#/definitions/FixedPeriodRotationConfig"
        },
        "ext": { "type": "object", "description": "section extension", "additionalProperties": { "type": "object" } }
      },
      "description": "A DTO object for updating section API call."
    },
    "SectionPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/FullSectionInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "SectionCreate": {
      "type": "object",
      "required": ["endDate", "localizations", "name", "startDate"],
      "properties": {
        "name": { "type": "string", "description": "section name" },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        },
        "active": { "type": "boolean", "description": "active, default true" },
        "startDate": { "type": "string", "format": "date-time", "description": "start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "end date" },
        "items": { "type": "array", "description": "item ids", "items": { "$ref": "#/definitions/SectionItem" } },
        "viewId": { "type": "string", "description": "view id" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "rotationType": { "type": "string", "description": "rotation type, default is NONE", "enum": ["NONE", "FIXED_PERIOD", "CUSTOM"] },
        "fixedPeriodRotationConfig": {
          "description": "fix period rotation config, don't allow null when rotation type is FIXED_PERIOD",
          "$ref": "#/definitions/FixedPeriodRotationConfig"
        },
        "ext": { "type": "object", "description": "section extension", "additionalProperties": { "type": "object" } }
      },
      "description": "A DTO object for creating section API call."
    },
    "StoreBackupInfo": {
      "type": "object",
      "required": ["autoBackup", "createdAt", "id", "name", "storeId", "updatedAt"],
      "properties": {
        "id": { "type": "string", "description": "Backup id" },
        "autoBackup": { "type": "boolean", "description": "Is auto backup" },
        "name": { "type": "string", "description": "Backup name" },
        "storeId": { "type": "string", "description": "Backup store id" },
        "createdAt": { "type": "string", "format": "date-time", "description": "Backup created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Backup updated time" }
      }
    },
    "StoreCreate": {
      "type": "object",
      "required": ["title"],
      "properties": {
        "title": {
          "type": "string",
          "description": "Title, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators ',.- and white-space, max length is 127"
        },
        "description": { "type": "string", "description": "Description" },
        "supportedLanguages": { "type": "array", "description": "Languages, BCP 47 language tag", "items": { "type": "string" } },
        "supportedRegions": {
          "type": "array",
          "description": "Store supported regions, should be ISO3166-1 alpha-2 two letter",
          "items": { "type": "string" }
        },
        "defaultRegion": { "type": "string", "description": "Default region, should be ISO3166-1 alpha-2 two letter, default is US" },
        "defaultLanguage": { "type": "string", "description": "Default language, BCP 47 language tag, default is en" }
      },
      "description": "A DTO object for creating store API call."
    },
    "StoreUpdate": {
      "type": "object",
      "required": ["title"],
      "properties": {
        "title": {
          "type": "string",
          "description": "Title, it should starts and ends with alphabets uppercase/lowercase or numeric, allowed separators ',.- and white-space, max length is 127"
        },
        "description": { "type": "string", "description": "Description" },
        "supportedLanguages": { "type": "array", "description": "Languages, BCP 47 language tag", "items": { "type": "string" } },
        "supportedRegions": {
          "type": "array",
          "description": "Store supported regions, should be ISO3166-1 alpha-2 two letter",
          "items": { "type": "string" }
        },
        "defaultRegion": { "type": "string", "description": "Default region, should be ISO3166-1 alpha-2 two letter" },
        "defaultLanguage": { "type": "string", "description": "Default language, BCP 47 language tag" }
      },
      "description": "A DTO object for updating store API call."
    },
    "FullViewInfo": {
      "type": "object",
      "required": ["createdAt", "displayOrder", "localizations", "name", "namespace", "updatedAt", "viewId"],
      "properties": {
        "viewId": { "type": "string", "description": "view id" },
        "namespace": { "type": "string", "description": "view namespace" },
        "name": { "type": "string", "description": "view name" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        },
        "createdAt": { "type": "string", "format": "date-time", "description": "view created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "view updated time" }
      }
    },
    "ViewUpdate": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": { "type": "string", "description": "view name" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        }
      },
      "description": "A DTO object for updating view API call."
    },
    "ListViewInfo": {
      "type": "object",
      "required": ["createdAt", "displayOrder", "name", "namespace", "updatedAt", "viewId"],
      "properties": {
        "viewId": { "type": "string", "description": "view id" },
        "namespace": { "type": "string", "description": "view namespace" },
        "name": { "type": "string", "description": "view name" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "createdAt": { "type": "string", "format": "date-time", "description": "view created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "view updated time" }
      }
    },
    "ViewCreate": {
      "type": "object",
      "required": ["displayOrder", "localizations", "name"],
      "properties": {
        "name": { "type": "string", "description": "view name" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "localizations": {
          "type": "object",
          "description": "Localization, key language, value localization content",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        }
      },
      "description": "A DTO object for creating view API call."
    },
    "AppInfo": {
      "type": "object",
      "required": ["itemId", "namespace"],
      "properties": {
        "slogan": { "type": "string", "description": "slogan" },
        "announcement": { "type": "string", "description": "announcement" },
        "itemId": { "type": "string", "description": "item id" },
        "namespace": { "type": "string", "description": "namespace" },
        "carousel": { "type": "array", "description": "carousel", "items": { "$ref": "#/definitions/Slide" } },
        "developer": { "type": "string", "description": "developer" },
        "publisher": { "type": "string", "description": "publisher" },
        "websiteUrl": { "type": "string", "description": "website url" },
        "forumUrl": { "type": "string", "description": "forum url" },
        "platforms": {
          "type": "array",
          "description": "supported platforms",
          "items": { "type": "string", "enum": ["Windows", "MacOS", "Linux", "IOS", "Android"] }
        },
        "platformRequirements": {
          "type": "object",
          "description": "platform requirements",
          "additionalProperties": { "type": "array", "items": { "$ref": "#/definitions/Requirement" } }
        },
        "primaryGenre": {
          "type": "string",
          "description": "primary genre",
          "enum": [
            "Action",
            "Adventure",
            "Casual",
            "FreeToPlay",
            "Indie",
            "MassivelyMultiplayer",
            "Racing",
            "RPG",
            "Simulation",
            "Sports",
            "Strategy"
          ]
        },
        "genres": {
          "type": "array",
          "description": "genres",
          "items": {
            "type": "string",
            "enum": [
              "Action",
              "Adventure",
              "Casual",
              "FreeToPlay",
              "Indie",
              "MassivelyMultiplayer",
              "Racing",
              "RPG",
              "Simulation",
              "Sports",
              "Strategy"
            ]
          }
        },
        "players": {
          "type": "array",
          "description": "players",
          "items": { "type": "string", "enum": ["Single", "Multi", "CrossPlatformMulti", "MMO", "Coop", "LocalCoop"] }
        },
        "releaseDate": { "type": "string", "format": "date-time", "description": "release date" },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" }
      }
    },
    "CategoryInfo": {
      "type": "object",
      "required": ["categoryPath", "createdAt", "displayName", "namespace", "parentCategoryPath", "updatedAt"],
      "properties": {
        "namespace": { "type": "string", "description": "Category namespace" },
        "parentCategoryPath": { "type": "string", "description": "Parent category path" },
        "categoryPath": { "type": "string", "description": "Category path" },
        "createdAt": { "type": "string", "format": "date-time", "description": "Category created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Category updated time" },
        "displayName": { "type": "string", "description": "Category display name" },
        "root": { "type": "boolean" }
      }
    },
    "HierarchicalCategoryInfo": {
      "type": "object",
      "required": ["categoryPath", "childCategories", "createdAt", "displayName", "namespace", "parentCategoryPath", "updatedAt"],
      "properties": {
        "namespace": { "type": "string", "description": "Category namespace" },
        "parentCategoryPath": { "type": "string", "description": "Parent category path" },
        "categoryPath": { "type": "string", "description": "Category path" },
        "createdAt": { "type": "string", "format": "date-time", "description": "Category created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Category updated time" },
        "displayName": { "type": "string", "description": "Category display name" },
        "childCategories": {
          "type": "array",
          "description": "Child category list",
          "items": { "$ref": "#/definitions/HierarchicalCategoryInfo" }
        },
        "root": { "type": "boolean" }
      }
    },
    "ItemPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/ItemInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "SectionInfo": {
      "type": "object",
      "required": ["active", "createdAt", "endDate", "name", "namespace", "sectionId", "startDate", "title", "updatedAt", "viewId"],
      "properties": {
        "title": { "type": "string", "description": "title info" },
        "description": { "type": "string", "description": "description info" },
        "longDescription": { "type": "string", "description": "long description info" },
        "sectionId": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "viewId": { "type": "string", "description": "view id" },
        "name": { "type": "string", "description": "name" },
        "active": { "type": "boolean", "description": "active" },
        "startDate": { "type": "string", "format": "date-time", "description": "start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "end date" },
        "currentRotationItems": {
          "type": "array",
          "description": "current rotation item infos",
          "items": { "$ref": "#/definitions/ItemInfo" }
        },
        "currentRotationExpireAt": {
          "type": "string",
          "format": "date-time",
          "description": "only exists when rotation type is FIX_PERIOD or CUSTOM"
        },
        "createdAt": { "type": "string", "format": "date-time", "description": "created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated time" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "ext": { "type": "object", "description": "customized section properties", "additionalProperties": { "type": "object" } },
        "localExt": { "type": "object", "additionalProperties": { "type": "object" } }
      }
    },
    "ViewInfo": {
      "type": "object",
      "required": ["createdAt", "displayOrder", "name", "namespace", "title", "updatedAt", "viewId"],
      "properties": {
        "title": { "type": "string", "description": "title info" },
        "description": { "type": "string", "description": "description info" },
        "longDescription": { "type": "string", "description": "long description info" },
        "viewId": { "type": "string", "description": "view id" },
        "namespace": { "type": "string", "description": "view namespace" },
        "name": { "type": "string", "description": "view name" },
        "displayOrder": { "type": "integer", "format": "int32", "description": "display order" },
        "createdAt": { "type": "string", "format": "date-time", "description": "view created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "view updated time" },
        "localExt": { "type": "object", "additionalProperties": { "type": "object" } }
      }
    },
    "ExportStoreRequest": {
      "type": "object",
      "properties": { "itemIds": { "type": "array", "description": "item ids", "items": { "type": "string" } } }
    },
    "ImportErrorDetails": {
      "type": "object",
      "properties": {
        "errorCode": { "type": "integer", "format": "int32", "description": "error code" },
        "errorMessage": { "type": "string", "description": "error message" },
        "messageVariables": { "type": "object", "description": "message variables", "additionalProperties": { "type": "string" } }
      }
    },
    "ImportStoreError": {
      "type": "object",
      "properties": {
        "type": { "type": "string", "description": "type", "enum": ["ITEM"] },
        "item": { "description": "item info", "$ref": "#/definitions/ImportStoreItemInfo" },
        "errors": { "type": "array", "description": "errors", "items": { "$ref": "#/definitions/ImportErrorDetails" } }
      }
    },
    "ImportStoreItemInfo": {
      "type": "object",
      "required": ["itemType", "localizations"],
      "properties": {
        "itemId": { "type": "string", "description": "Item id" },
        "name": { "type": "string", "description": "Name" },
        "sku": { "type": "string", "description": "Sku" },
        "categoryPath": { "type": "string", "description": "Item category path" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "localizations": {
          "type": "object",
          "description": "Item localizations",
          "additionalProperties": { "$ref": "#/definitions/Localization" }
        }
      }
    },
    "ImportStoreResult": {
      "type": "object",
      "properties": {
        "success": { "type": "boolean", "description": "import result" },
        "storeInfo": { "description": "store info", "$ref": "#/definitions/StoreInfo" },
        "errors": { "type": "array", "description": "errors", "items": { "$ref": "#/definitions/ImportStoreError" } }
      }
    },
    "ServicePluginConfigInfo": {
      "type": "object",
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "grpcServerAddress": { "type": "string", "description": "plugin grpc server address: <host>:<port>" }
      }
    },
    "ServicePluginConfigUpdate": {
      "type": "object",
      "properties": { "grpcServerAddress": { "type": "string", "description": "plugin grpc server address: <host>:<port>" } }
    },
    "CurrencyInfo": {
      "type": "object",
      "required": ["createdAt", "currencyCode", "currencySymbol", "currencyType", "decimals", "namespace", "updatedAt"],
      "properties": {
        "currencyCode": { "type": "string", "description": "currency code, alphabet uppercase" },
        "localizationDescriptions": {
          "type": "object",
          "description": "Description, key is language, value is description max length is 255",
          "additionalProperties": { "type": "string" }
        },
        "currencySymbol": { "type": "string", "description": "currency symbol, max length is 8" },
        "namespace": { "type": "string", "description": "namespace" },
        "currencyType": { "type": "string", "description": "currency type", "enum": ["REAL", "VIRTUAL"] },
        "decimals": { "type": "integer", "format": "int32", "description": "decimals" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "CurrencyCreate": {
      "type": "object",
      "required": ["currencyCode"],
      "properties": {
        "currencyCode": { "type": "string", "description": "currency code, alphabet uppercase" },
        "localizationDescriptions": {
          "type": "object",
          "description": "Description, key is language, value is description max length is 255",
          "additionalProperties": { "type": "string" }
        },
        "currencySymbol": { "type": "string", "description": "currency symbol, max length is 8" },
        "currencyType": { "type": "string", "enum": ["REAL", "VIRTUAL"] },
        "decimals": {
          "type": "integer",
          "format": "int32",
          "description": "decimals, commonly set 2 if real currency or 0 if virtual currency"
        }
      },
      "description": "A DTO for creating currency"
    },
    "CurrencySummary": {
      "type": "object",
      "required": ["currencyCode", "currencySymbol", "currencyType", "decimals", "namespace"],
      "properties": {
        "currencyCode": { "type": "string", "description": "currency code, alphabet uppercase" },
        "currencySymbol": { "type": "string", "description": "currency symbol, max length is 8" },
        "currencyType": { "type": "string", "description": "currency type", "enum": ["REAL", "VIRTUAL"] },
        "namespace": { "type": "string", "description": "namespace" },
        "decimals": { "type": "integer", "format": "int32", "description": "decimals" }
      }
    },
    "CurrencyUpdate": {
      "type": "object",
      "properties": {
        "localizationDescriptions": {
          "type": "object",
          "description": "Description, key is language, value is description max length is 255",
          "additionalProperties": { "type": "string" }
        }
      },
      "description": "A DTO for update currency"
    },
    "CurrencyConfig": {
      "type": "object",
      "required": ["currencySymbol"],
      "properties": { "currencySymbol": { "type": "string", "description": "currency symbol" } },
      "description": "currency config"
    },
    "EntitlementInfo": {
      "type": "object",
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": { "type": "string", "description": "entitlement id" },
        "namespace": { "type": "string", "description": "entitlement namespace" },
        "clazz": {
          "type": "string",
          "description": "entitlement class",
          "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
        },
        "type": { "type": "string", "description": "entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "status": { "type": "string", "description": "entitlement status", "enum": ["ACTIVE", "INACTIVE", "CONSUMED", "REVOKED", "SOLD"] },
        "appId": { "type": "string", "description": "appId if entitlement is an app" },
        "appType": { "type": "string", "description": "appType if entitlement is an app", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
        "sku": { "type": "string", "description": "sku for purchased item" },
        "userId": { "type": "string", "description": "userId for this entitlement" },
        "storeId": { "type": "string", "description": "storeId of the item, published store if omitted" },
        "itemId": { "type": "string", "description": "itemId of the entitlement" },
        "grantedCode": { "type": "string", "description": "grantedCode, the granted code" },
        "itemNamespace": { "type": "string", "description": "itemNamespace for the purchased item" },
        "name": { "type": "string", "description": "entitlement name" },
        "features": { "type": "array", "description": "entitlement features", "uniqueItems": true, "items": { "type": "string" } },
        "useCount": { "type": "integer", "format": "int32", "description": "useCount for entitlement" },
        "source": {
          "type": "string",
          "description": "entitlement source",
          "enum": ["PURCHASE", "IAP", "PROMOTION", "ACHIEVEMENT", "REFERRAL_BONUS", "REDEEM_CODE", "REWARD", "GIFT", "OTHER"]
        },
        "itemSnapshot": { "description": "itemSnapshot", "$ref": "#/definitions/ItemSnapshot" },
        "startDate": { "type": "string", "format": "date-time", "description": "entitlement start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "entitlement end date" },
        "stackable": { "type": "boolean", "description": "Whether the CONSUMABLE entitlement is stackable" },
        "grantedAt": { "type": "string", "format": "date-time", "description": "entitlement granted at" },
        "createdAt": { "type": "string", "format": "date-time", "description": "entitlement created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "entitlement updated at" }
      }
    },
    "ItemSnapshot": {
      "type": "object",
      "required": ["entitlementType", "itemId", "itemType", "language", "name", "namespace", "region", "title"],
      "properties": {
        "itemId": { "type": "string", "description": "Item id" },
        "appId": { "type": "string", "description": "App id, required when itemType is APP" },
        "appType": {
          "type": "string",
          "description": "App type, required when itemType is APP",
          "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"]
        },
        "seasonType": { "type": "string", "description": "Season type, required while itemType is SEASON", "enum": ["PASS", "TIER"] },
        "baseAppId": { "type": "string", "description": "Base app Id" },
        "sku": { "type": "string", "description": "Sku" },
        "namespace": { "type": "string", "description": "Item's namespace" },
        "name": { "type": "string", "description": "Name" },
        "listable": { "type": "boolean", "description": "Whether can be visible in Store for public user" },
        "purchasable": { "type": "boolean", "description": "Whether can be purchased" },
        "sectionExclusive": { "type": "boolean", "description": "whether it is sold in section only" },
        "entitlementType": { "type": "string", "description": "Entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "Item use count, required when entitlement type is consumable or itemType is COINS"
        },
        "stackable": { "type": "boolean", "description": "Whether stack the CONSUMABLE entitlement" },
        "itemType": {
          "type": "string",
          "description": "Item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "thumbnailUrl": { "type": "string", "description": "thumbnail url" },
        "targetNamespace": { "type": "string", "description": "The target namespace of a cross namespace item" },
        "targetCurrencyCode": { "type": "string", "description": "Target currency code of coin item" },
        "targetItemId": { "type": "string", "description": "Target item id of mapping from game namespace to publisher namespace" },
        "title": { "type": "string", "description": "title info" },
        "description": { "type": "string", "description": "description" },
        "regionDataItem": { "description": "Region data", "$ref": "#/definitions/RegionDataItem" },
        "recurring": { "description": "recurring for subscription", "$ref": "#/definitions/Recurring" },
        "itemIds": {
          "type": "array",
          "description": "itemIds, should be empty if item type is not \"BUNDLE\"",
          "items": { "type": "string" }
        },
        "itemQty": {
          "type": "object",
          "description": "itemQty, the quantity of item in itemIds, default 1, should be empty if item type is not \"BUNDLE\"",
          "additionalProperties": { "type": "integer", "format": "int32" }
        },
        "features": { "type": "array", "description": "supported features", "uniqueItems": true, "items": { "type": "string" } },
        "maxCountPerUser": { "type": "integer", "format": "int32", "description": "Max count per user, -1 means UNLIMITED" },
        "maxCount": { "type": "integer", "format": "int32", "description": "Max count, -1 means UNLIMITED, unset when itemType is CODE" },
        "boothName": { "type": "string", "description": "booth name to get tickets while it's item type is CODE" },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" },
        "createdAt": { "type": "string", "format": "date-time", "description": "createdAt" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updatedAt" },
        "optionBoxConfig": { "description": "option box config", "$ref": "#/definitions/OptionBoxConfig" },
        "lootBoxConfig": { "description": "loot box config", "$ref": "#/definitions/LootBoxConfig" },
        "sellable": { "type": "boolean", "description": "whether allow to sell back to store" },
        "saleConfig": { "description": "sale config", "$ref": "#/definitions/SaleConfig" }
      }
    },
    "BulkEntitlementGrantResult": {
      "type": "object",
      "properties": {
        "successList": { "type": "array", "items": { "$ref": "#/definitions/EntitlementGrantResult" } },
        "failList": { "type": "array", "items": { "$ref": "#/definitions/EntitlementGrantResult" } },
        "status": { "type": "string", "enum": ["SUCCESS", "FAIL", "PARTIAL_SUCCESS"] }
      }
    },
    "EntitlementGrant": {
      "type": "object",
      "required": ["itemId", "itemNamespace", "quantity"],
      "properties": {
        "storeId": { "type": "string", "description": "storeId" },
        "itemId": { "type": "string", "description": "itemId" },
        "grantedCode": { "type": "string", "description": "grantedCode, the granted code" },
        "itemNamespace": { "type": "string", "description": "itemNamespace" },
        "quantity": { "type": "integer", "format": "int32", "description": "quantity" },
        "source": {
          "type": "string",
          "description": "source",
          "enum": ["PURCHASE", "IAP", "PROMOTION", "ACHIEVEMENT", "REFERRAL_BONUS", "REDEEM_CODE", "REWARD", "GIFT", "OTHER"]
        },
        "startDate": { "type": "string", "format": "date-time", "description": "entitlement start date time" },
        "endDate": { "type": "string", "format": "date-time", "description": "entitlement end date time" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        }
      },
      "description": "A DTO object for granting entitlement API call."
    },
    "EntitlementGrantResult": {
      "type": "object",
      "properties": {
        "userId": { "type": "string" },
        "entitlementGrants": { "$ref": "#/definitions/EntitlementGrant" },
        "reason": { "type": "string" }
      }
    },
    "BulkEntitlementGrantRequest": {
      "type": "object",
      "properties": {
        "userIds": { "type": "array", "uniqueItems": true, "items": { "type": "string" } },
        "entitlementGrantList": { "type": "array", "items": { "$ref": "#/definitions/EntitlementGrant" } }
      },
      "description": "A DTO object for granting entitlement in bulk"
    },
    "EntitlementPagingSlicedResult": {
      "type": "object",
      "properties": {
        "data": { "type": "array", "items": { "$ref": "#/definitions/EntitlementInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "BulkEntitlementRevokeResult": {
      "type": "object",
      "properties": {
        "successList": { "type": "array", "items": { "$ref": "#/definitions/EntitlementRevokeResult" } },
        "failList": { "type": "array", "items": { "$ref": "#/definitions/EntitlementRevokeResult" } },
        "status": { "type": "string", "enum": ["SUCCESS", "FAIL", "PARTIAL_SUCCESS"] }
      }
    },
    "EntitlementRevokeResult": {
      "type": "object",
      "properties": { "userId": { "type": "string" }, "entitlementId": { "type": "string" }, "reason": { "type": "string" } }
    },
    "EntitlementHistoryInfo": {
      "type": "object",
      "required": ["action", "createdAt", "entitlementId", "namespace", "operator", "updatedAt", "userId"],
      "properties": {
        "entitlementId": { "type": "string", "description": "The id of entitlement" },
        "namespace": { "type": "string", "description": "The namespace of entitlement" },
        "action": {
          "type": "string",
          "description": "The action of entitlement, like GRANT, REVOKE",
          "enum": ["GRANT", "UPDATE", "DECREMENT", "REVOKE", "DISABLE", "ENABLE", "SELL_BACK"]
        },
        "operator": { "type": "string", "description": "The operator" },
        "userId": { "type": "string", "description": "The owner id of entitlement" },
        "useCount": { "type": "integer", "format": "int32", "description": "The reminder use count of a consumable entitlement." },
        "useCountChange": { "type": "integer", "format": "int32", "description": "changed use count." },
        "reason": { "type": "string", "description": "reason" },
        "createdAt": { "type": "string", "format": "date-time", "description": "History create time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "History update time" }
      }
    },
    "RevokeUseCountRequest": {
      "type": "object",
      "properties": {
        "useCount": { "type": "integer", "format": "int32", "description": "use count" },
        "reason": { "type": "string", "description": "reason" }
      }
    },
    "EntitlementUpdate": {
      "type": "object",
      "properties": {
        "nullFieldList": { "type": "array", "description": "nullFieldList", "items": { "type": "string" } },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE", "CONSUMED", "REVOKED", "SOLD"] },
        "useCount": { "type": "integer", "format": "int32", "description": "useCount of a consumable entitlement" },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "start date of the entitlement. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        },
        "endDate": { "type": "string", "format": "date-time", "description": "end date of the entitlement. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" }
      },
      "description": "A DTO object for updating entitlement API call. Leave the field empty if don't want to update."
    },
    "TimedOwnership": {
      "type": "object",
      "required": ["owned"],
      "properties": {
        "owned": { "type": "boolean", "description": "ownership" },
        "endDate": { "type": "string", "format": "date-time", "description": "end date" }
      }
    },
    "AppEntitlementInfo": {
      "type": "object",
      "required": ["grantedAt", "namespace", "status", "userId"],
      "properties": {
        "namespace": { "type": "string", "description": "entitlement namespace" },
        "appId": { "type": "string", "description": "appId for APP type entitlement" },
        "appType": { "type": "string", "description": "appType for APP type entitlement", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
        "sku": { "type": "string", "description": "unique sku no for item" },
        "userId": { "type": "string", "description": "entitlement owner" },
        "storeId": { "type": "string", "description": "item store id, null if published store" },
        "itemId": { "type": "string", "description": "item id" },
        "startDate": { "type": "string", "format": "date-time", "description": "entitlement start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "entitlement end date" },
        "grantedAt": { "type": "string", "format": "date-time", "description": "entitlement granted at" },
        "status": { "type": "string", "description": "entitlement status", "enum": ["ACTIVE", "INACTIVE", "CONSUMED", "REVOKED", "SOLD"] },
        "itemSnapshot": { "description": "itemSnapshot", "$ref": "#/definitions/ItemSnapshot" }
      }
    },
    "Ownership": { "type": "object", "required": ["owned"], "properties": { "owned": { "type": "boolean", "description": "ownership" } } },
    "EntitlementDecrementResult": {
      "type": "object",
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": { "type": "string", "description": "entitlement id" },
        "namespace": { "type": "string", "description": "entitlement namespace" },
        "clazz": {
          "type": "string",
          "description": "entitlement class",
          "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
        },
        "type": { "type": "string", "description": "entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "status": { "type": "string", "description": "entitlement status", "enum": ["ACTIVE", "INACTIVE", "CONSUMED", "REVOKED", "SOLD"] },
        "appId": { "type": "string", "description": "appId if entitlement is an app" },
        "appType": { "type": "string", "description": "appType if entitlement is an app", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
        "sku": { "type": "string", "description": "sku for purchased item" },
        "userId": { "type": "string", "description": "userId for this entitlement" },
        "storeId": { "type": "string", "description": "storeId of the item, published store if omitted" },
        "itemId": { "type": "string", "description": "itemId of the entitlement" },
        "grantedCode": { "type": "string", "description": "grantedCode, the granted code" },
        "itemNamespace": { "type": "string", "description": "itemNamespace for the purchased item" },
        "name": { "type": "string", "description": "entitlement name" },
        "features": { "type": "array", "description": "entitlement features", "uniqueItems": true, "items": { "type": "string" } },
        "useCount": { "type": "integer", "format": "int32", "description": "useCount for entitlement" },
        "source": {
          "type": "string",
          "description": "entitlement source",
          "enum": ["PURCHASE", "IAP", "PROMOTION", "ACHIEVEMENT", "REFERRAL_BONUS", "REDEEM_CODE", "REWARD", "GIFT", "OTHER"]
        },
        "itemSnapshot": { "description": "itemSnapshot", "$ref": "#/definitions/ItemSnapshot" },
        "startDate": { "type": "string", "format": "date-time", "description": "entitlement start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "entitlement end date" },
        "stackable": { "type": "boolean", "description": "Whether the CONSUMABLE entitlement is stackable" },
        "grantedAt": { "type": "string", "format": "date-time", "description": "entitlement granted at" },
        "createdAt": { "type": "string", "format": "date-time", "description": "entitlement created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "entitlement updated at" },
        "requestId": { "type": "string", "description": "request id" },
        "replayed": {
          "type": "boolean",
          "description": "replayed, if true,the response is original successful response. This will not be included in response if client have not pass request id."
        },
        "rewards": {
          "type": "array",
          "description": "loot reward, only return when consume a loot box entitlement",
          "items": { "$ref": "#/definitions/EntitlementLootBoxReward" }
        }
      }
    },
    "EntitlementLootBoxReward": {
      "type": "object",
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "itemSku": { "type": "string", "description": "item sku" },
        "count": { "type": "integer", "format": "int32", "description": "count" }
      }
    },
    "EntitlementDecrement": {
      "type": "object",
      "properties": {
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "the count to decrease, 1 for default, option box entitlement only allow 1"
        },
        "options": {
          "type": "array",
          "description": "options, it is only available when entitlement clazz is OPTIONBOX and value should be item id.",
          "items": { "type": "string" }
        },
        "requestId": {
          "type": "string",
          "description": "Request id(Optional), client should provide a unique request id to perform at most once execution, When a request id is resubmitted, it will return original successful response"
        }
      },
      "description": "A DTO object for entitlement decrement."
    },
    "AppEntitlementPagingSlicedResult": {
      "type": "object",
      "properties": {
        "data": { "type": "array", "items": { "$ref": "#/definitions/AppEntitlementInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "EntitlementOwnership": {
      "type": "object",
      "required": ["owned"],
      "properties": { "owned": { "type": "boolean", "description": "ownership" }, "itemId": { "type": "string", "description": "item id" } }
    },
    "StackableEntitlementInfo": {
      "type": "object",
      "required": [
        "clazz",
        "createdAt",
        "grantedAt",
        "id",
        "itemId",
        "itemNamespace",
        "name",
        "namespace",
        "source",
        "status",
        "type",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": { "type": "string", "description": "entitlement id" },
        "namespace": { "type": "string", "description": "entitlement namespace" },
        "clazz": {
          "type": "string",
          "description": "entitlement class",
          "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
        },
        "type": { "type": "string", "description": "entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "status": { "type": "string", "description": "entitlement status", "enum": ["ACTIVE", "INACTIVE", "CONSUMED", "REVOKED", "SOLD"] },
        "appId": { "type": "string", "description": "appId if entitlement is an app" },
        "appType": { "type": "string", "description": "appType if entitlement is an app", "enum": ["GAME", "SOFTWARE", "DLC", "DEMO"] },
        "sku": { "type": "string", "description": "sku for purchased item" },
        "userId": { "type": "string", "description": "userId for this entitlement" },
        "storeId": { "type": "string", "description": "storeId of the item, published store if omitted" },
        "itemId": { "type": "string", "description": "itemId of the entitlement" },
        "grantedCode": { "type": "string", "description": "grantedCode, the granted code" },
        "itemNamespace": { "type": "string", "description": "itemNamespace for the purchased item" },
        "name": { "type": "string", "description": "entitlement name" },
        "features": { "type": "array", "description": "entitlement features", "uniqueItems": true, "items": { "type": "string" } },
        "useCount": { "type": "integer", "format": "int32", "description": "useCount for entitlement" },
        "source": {
          "type": "string",
          "description": "entitlement source",
          "enum": ["PURCHASE", "IAP", "PROMOTION", "ACHIEVEMENT", "REFERRAL_BONUS", "REDEEM_CODE", "REWARD", "GIFT", "OTHER"]
        },
        "itemSnapshot": { "description": "itemSnapshot", "$ref": "#/definitions/ItemSnapshot" },
        "startDate": { "type": "string", "format": "date-time", "description": "entitlement start date" },
        "endDate": { "type": "string", "format": "date-time", "description": "entitlement end date" },
        "stackable": { "type": "boolean", "description": "whether the CONSUMABLE entitlement is stackable" },
        "grantedAt": { "type": "string", "format": "date-time", "description": "entitlement granted at" },
        "createdAt": { "type": "string", "format": "date-time", "description": "entitlement created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "entitlement updated at" },
        "stackedUseCount": { "type": "integer", "format": "int32", "description": "CONSUMABLE entitlement stacked use count" }
      }
    },
    "CreditSummary": {
      "type": "object",
      "required": ["amount", "namespace", "userId", "walletId"],
      "properties": {
        "walletId": { "type": "string", "description": "wallet id" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "user id" },
        "amount": { "type": "integer", "format": "int64", "description": "amount" },
        "currencyCode": { "type": "string", "description": "currency code" }
      }
    },
    "EntitlementSoldResult": {
      "type": "object",
      "properties": {
        "requestId": { "type": "string", "description": "request id" },
        "replayed": {
          "type": "boolean",
          "description": "replayed, if true,the response is original successful response. This will not be included in response if client have not pass request id."
        },
        "creditSummaries": {
          "type": "array",
          "description": "creditSummaries, The money from the sale",
          "items": { "$ref": "#/definitions/CreditSummary" }
        },
        "entitlementInfo": { "description": "The entitlement information after the sale", "$ref": "#/definitions/EntitlementInfo" }
      }
    },
    "EntitlementSoldRequest": {
      "type": "object",
      "properties": {
        "useCount": {
          "type": "integer",
          "format": "int32",
          "description": "the use count to sell, 1 for default, durable entitlement only allow 1"
        },
        "requestId": {
          "type": "string",
          "description": "Request id(Optional), client should provide a unique request id to perform at most once execution, When a request id is resubmitted, it will return original successful response"
        }
      },
      "description": "A DTO object for sell entitlement."
    },
    "OwnershipToken": { "type": "object", "properties": { "ownershipToken": { "type": "string" } } },
    "EntitlementSummary": {
      "type": "object",
      "required": ["clazz", "createdAt", "id", "namespace", "type", "updatedAt", "userId"],
      "properties": {
        "id": { "type": "string", "description": "entitlement id" },
        "namespace": { "type": "string", "description": "entitlement namespace" },
        "name": { "type": "string", "description": "entitlement name. Most of the time entitlement name is the same as the item name." },
        "userId": { "type": "string", "description": "userId for this entitlement" },
        "clazz": {
          "type": "string",
          "description": "entitlement class",
          "enum": ["APP", "ENTITLEMENT", "CODE", "SUBSCRIPTION", "MEDIA", "OPTIONBOX", "LOOTBOX"]
        },
        "type": { "type": "string", "description": "entitlement type", "enum": ["DURABLE", "CONSUMABLE"] },
        "stackable": { "type": "boolean", "description": "Whether the CONSUMABLE entitlement is stackable" },
        "stackedUseCount": { "type": "integer", "format": "int32", "description": "CONSUMABLE entitlement stacked use count" },
        "storeId": { "type": "string", "description": "item store id, null if published store" },
        "itemId": { "type": "string", "description": "item id" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "grantedCode": { "type": "string", "description": "granted code" },
        "startDate": { "type": "string", "format": "date-time", "description": "start date time" },
        "endDate": { "type": "string", "format": "date-time", "description": "end date time" }
      }
    },
    "ExtensionFulfillmentSummary": {
      "type": "object",
      "required": ["quantity"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "userId" },
        "itemId": { "type": "string", "description": "itemId" },
        "itemType": {
          "type": "string",
          "description": "item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "itemClazz": { "type": "string", "description": "customized item sub type" },
        "itemExt": { "type": "object", "description": "customized item properties", "additionalProperties": { "type": "object" } },
        "metadata": {
          "type": "object",
          "description": "customized external fulfillment results",
          "additionalProperties": { "type": "object" }
        },
        "quantity": { "type": "integer", "format": "int32", "description": "quantity" },
        "grantedAt": { "type": "string", "format": "date-time", "description": "grantedAt" }
      }
    },
    "FulfillmentError": {
      "type": "object",
      "properties": {
        "httpStatus": { "type": "integer", "format": "int32", "description": "http status" },
        "code": { "type": "integer", "format": "int32", "description": "error code" },
        "message": { "type": "string", "description": "error message" }
      }
    },
    "FulfillmentHistoryInfo": {
      "type": "object",
      "required": ["createdAt", "id", "namespace", "status", "updatedAt", "userId"],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "userId" },
        "orderNo": { "type": "string", "description": "orderNo" },
        "code": { "type": "string", "description": "redeemed code" },
        "fulfillItems": {
          "type": "array",
          "description": "items should do fulfillment",
          "items": { "$ref": "#/definitions/FulfillmentItem" }
        },
        "grantedItemIds": { "type": "array", "description": "item ids already granted", "items": { "type": "string" } },
        "entitlementSummaries": {
          "type": "array",
          "description": "entitlement granted",
          "items": { "$ref": "#/definitions/EntitlementSummary" }
        },
        "creditSummaries": { "type": "array", "description": "credit granted", "items": { "$ref": "#/definitions/CreditSummary" } },
        "extensionFulfillmentSummaries": {
          "type": "array",
          "description": "extension fulfillment granted",
          "items": { "$ref": "#/definitions/ExtensionFulfillmentSummary" }
        },
        "status": { "type": "string", "description": "fulfillment status", "enum": ["SUCCESS", "FAIL"] },
        "fulfillmentError": { "description": "fulfillment error detail", "$ref": "#/definitions/FulfillmentError" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "FulfillmentHistoryPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/FulfillmentHistoryInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "FulfillmentItem": {
      "type": "object",
      "required": ["quantity"],
      "properties": {
        "storeId": { "type": "string", "description": "draft store id, published store if omitted" },
        "itemId": { "type": "string", "description": "item id" },
        "itemSku": { "type": "string", "description": "item sku" },
        "itemType": {
          "type": "string",
          "description": "item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "itemName": { "type": "string", "description": "item name" },
        "quantity": { "type": "integer", "format": "int32", "description": "quantity" },
        "extraSubscriptionDays": { "type": "integer", "format": "int32", "description": "extra subscription days" }
      }
    },
    "FulfillmentScriptInfo": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "id" },
        "grantDays": {
          "type": "string",
          "description": "javascript script for grant days, expression expected to return integer, -1 means unlimited. It only execute while there's no endDate specified while do fulfillment"
        }
      }
    },
    "FulfillmentScriptCreate": {
      "type": "object",
      "properties": {
        "grantDays": {
          "type": "string",
          "description": "javascript script for grant days, expression expected to return integer, -1 means unlimited. It only execute while there's no endDate specified while do fulfillment"
        }
      }
    },
    "FulfillmentScriptEvalTestResult": {
      "type": "object",
      "properties": { "result": { "type": "object" }, "errorStackTrace": { "type": "string" } }
    },
    "FulfillmentScriptContext": {
      "type": "object",
      "required": ["item", "namespace", "source"],
      "properties": {
        "namespace": { "type": "string", "description": "fulfillment namespace, default accelbyte" },
        "source": {
          "type": "string",
          "description": "fulfillment source, default PURCHASE",
          "enum": ["PURCHASE", "IAP", "PROMOTION", "ACHIEVEMENT", "REFERRAL_BONUS", "REDEEM_CODE", "REWARD", "GIFT", "DLC", "OTHER"]
        },
        "order": { "description": "order summary", "$ref": "#/definitions/OrderSummary" },
        "item": { "description": "item info", "$ref": "#/definitions/ItemInfo" }
      }
    },
    "FulfillmentScriptEvalTestRequest": {
      "type": "object",
      "required": ["context", "script", "type"],
      "properties": {
        "type": { "type": "string", "description": "type, default grantDays", "enum": ["grantDays"] },
        "context": { "description": "fulfillment script context", "$ref": "#/definitions/FulfillmentScriptContext" },
        "script": { "type": "string", "description": "script" }
      }
    },
    "OrderSummary": {
      "type": "object",
      "properties": {
        "currency": { "description": "purchase currency", "$ref": "#/definitions/CurrencySummary" },
        "ext": { "type": "object", "description": "order custom properties", "additionalProperties": { "type": "object" } },
        "free": { "type": "boolean" }
      }
    },
    "FulfillmentScriptUpdate": {
      "type": "object",
      "properties": {
        "grantDays": {
          "type": "string",
          "description": "javascript script for grant days, expression expected to return integer, -1 means unlimited. It only execute while there's no endDate specified while do fulfillment"
        }
      }
    },
    "FulfillmentResult": {
      "type": "object",
      "required": ["namespace", "userId"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "userId" },
        "entitlementSummaries": {
          "type": "array",
          "description": "entitlement granted",
          "items": { "$ref": "#/definitions/EntitlementSummary" }
        },
        "creditSummaries": { "type": "array", "description": "credit granted", "items": { "$ref": "#/definitions/CreditSummary" } },
        "subscriptionSummaries": {
          "type": "array",
          "description": "affected subscriptions",
          "items": { "$ref": "#/definitions/SubscriptionSummary" }
        }
      }
    },
    "SubscriptionSummary": {
      "type": "object",
      "required": ["id", "itemId", "namespace", "status", "userId"],
      "properties": {
        "id": { "type": "string", "description": "subscription id" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "user id" },
        "itemId": { "type": "string", "description": "item id" },
        "sku": { "type": "string", "description": "sku" },
        "status": { "type": "string", "description": "status", "enum": ["INIT", "ACTIVE", "CANCELLED", "EXPIRED"] },
        "currentPeriodStart": { "type": "string", "format": "date-time", "description": "current period start" },
        "currentPeriodEnd": { "type": "string", "format": "date-time", "description": "current period end" },
        "subscribedBy": {
          "type": "string",
          "description": "subscribed by PLATFORM(system granted) or USER(subscribed by userself)",
          "enum": ["USER", "PLATFORM"]
        }
      }
    },
    "FulfillCodeRequest": {
      "type": "object",
      "required": ["code"],
      "properties": {
        "code": { "type": "string", "description": "campaign code" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        }
      }
    },
    "PlatformReward": {
      "type": "object",
      "properties": {
        "type": { "type": "string", "description": "reward type", "enum": ["ITEM", "CURRENCY"] },
        "item": {
          "description": "required if type is ITEM, can be fulfilled by itemId or itemSku",
          "$ref": "#/definitions/PlatformRewardItem"
        },
        "currency": { "description": "required if type is CURRENCY", "$ref": "#/definitions/PlatformRewardCurrency" },
        "quantity": { "type": "integer", "format": "int32", "description": "quantity if type is ITEM, amount if type is CURRENCY" }
      }
    },
    "PlatformRewardCurrency": {
      "type": "object",
      "required": ["currencyCode", "namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace, allowed values: game namespace or publisher namespace" },
        "currencyCode": { "type": "string", "description": "currency code, alphabet uppercase" }
      }
    },
    "PlatformRewardItem": {
      "type": "object",
      "properties": { "itemType": { "type": "string" }, "itemId": { "type": "string" }, "itemSku": { "type": "string" } }
    },
    "RewardsRequest": {
      "type": "object",
      "required": ["rewards"],
      "properties": {
        "rewards": { "type": "array", "description": "reward", "items": { "$ref": "#/definitions/PlatformReward" } },
        "source": {
          "type": "string",
          "description": "source",
          "enum": ["PURCHASE", "IAP", "PROMOTION", "ACHIEVEMENT", "REFERRAL_BONUS", "REDEEM_CODE", "REWARD", "GIFT", "DLC", "OTHER"]
        },
        "origin": {
          "type": "string",
          "description": "origin, if rewards contains item icon, it will credit into related origin wallet. if not set, it will be credit into System wallet",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
        }
      },
      "description": "A DTO object for rewards request API call."
    },
    "FulfillmentRequest": {
      "type": "object",
      "required": ["quantity"],
      "properties": {
        "storeId": { "type": "string", "description": "storeId" },
        "itemId": { "type": "string", "description": "itemId" },
        "itemSku": { "type": "string", "description": "itemSku" },
        "quantity": { "type": "integer", "format": "int32", "description": "quantity" },
        "orderNo": { "type": "string", "description": "orderNo" },
        "order": { "description": "order summary for fulfillment scripts", "$ref": "#/definitions/OrderSummary" },
        "source": {
          "type": "string",
          "description": "source",
          "enum": ["PURCHASE", "IAP", "PROMOTION", "ACHIEVEMENT", "REFERRAL_BONUS", "REDEEM_CODE", "REWARD", "GIFT", "DLC", "OTHER"]
        },
        "startDate": { "type": "string", "format": "date-time", "description": "start date time" },
        "endDate": { "type": "string", "format": "date-time", "description": "end date time" },
        "duration": { "type": "integer", "format": "int32", "description": "duration in seconds, ignored if the endDate is present" },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" },
        "origin": {
          "type": "string",
          "description": "origin",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
        }
      },
      "description": "A DTO object for fulfillment request API call."
    },
    "AchievementInfo": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "achievement id" },
        "serviceConfigId": { "type": "string", "description": "service config id" },
        "name": { "type": "string", "description": "achievement display name" },
        "progressState": { "type": "string", "description": "achievement progress" },
        "progression": { "type": "object", "description": "achievement progression", "additionalProperties": { "type": "object" } }
      }
    },
    "XblUserAchievements": {
      "type": "object",
      "properties": {
        "achievements": {
          "type": "array",
          "description": "user achievements, including unlocked and in progress",
          "items": { "$ref": "#/definitions/AchievementInfo" }
        }
      },
      "description": "A DTO object for querying xbox user achievements"
    },
    "Achievement": {
      "type": "object",
      "properties": { "id": { "type": "string" }, "value": { "type": "integer", "format": "int64" } },
      "description": "steam achievement request"
    },
    "XblAchievementUpdateRequest": {
      "type": "object",
      "properties": {
        "achievements": { "type": "array", "description": "achievements to be updated", "items": { "$ref": "#/definitions/Achievement" } },
        "serviceConfigId": { "type": "string" },
        "titleId": { "type": "string" },
        "xboxUserId": { "type": "string", "description": "xbox live user id" }
      },
      "description": "A DTO object for update xbox achievement complete percentage API"
    },
    "SteamAchievementUpdateRequest": {
      "type": "object",
      "properties": {
        "steamUserId": { "type": "string", "description": "steam user id" },
        "achievements": { "type": "array", "description": "achievements to be updated", "items": { "$ref": "#/definitions/Achievement" } }
      },
      "description": "A DTO object for unlock steam achievement API"
    },
    "PlatformDLCConfigInfo": {
      "type": "object",
      "properties": { "data": { "type": "array", "items": { "$ref": "#/definitions/PlatformDlcEntry" } } }
    },
    "PlatformDlcEntry": {
      "type": "object",
      "properties": {
        "platform": {
          "type": "string",
          "description": "platform: PSN, STEAM, XBOX, EPICGAMES",
          "enum": ["PSN", "STEAM", "XBOX", "EPICGAMES"]
        },
        "platformDlcIdMap": {
          "type": "object",
          "description": "key is platform product id, value is dlc id",
          "additionalProperties": { "type": "string" }
        }
      }
    },
    "DLCItem": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "dlc id" },
        "rewards": { "type": "array", "description": "reward list", "items": { "$ref": "#/definitions/PlatformReward" } }
      }
    },
    "DLCItemConfigInfo": { "type": "object", "properties": { "data": { "type": "array", "items": { "$ref": "#/definitions/DLCItem" } } } },
    "PlatformDLCConfigUpdate": {
      "type": "object",
      "properties": {
        "data": { "type": "array", "description": "platform dlc config list", "items": { "$ref": "#/definitions/PlatformDlcEntry" } }
      }
    },
    "DLCItemConfigUpdate": {
      "type": "object",
      "properties": { "data": { "type": "array", "items": { "$ref": "#/definitions/DLCItem" } } }
    },
    "XblIAPConfigInfo": {
      "type": "object",
      "required": ["namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "relyingPartyCert": { "type": "string", "description": "relyingPartyCert" },
        "businessPartnerCertFileName": { "type": "string", "description": "businessPartnerCertFileName" },
        "password": { "type": "string", "description": "password" }
      }
    },
    "TwitchIAPConfigInfo": {
      "type": "object",
      "required": ["namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "clientId": { "type": "string", "description": "twitch client id" },
        "clientSecret": { "type": "string", "description": "twitch client secret" },
        "organizationId": { "type": "string", "description": "twitch organization Id" }
      }
    },
    "EpicGamesIAPConfigInfo": {
      "type": "object",
      "required": ["namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "sandboxId": { "type": "string", "description": "epic games sandbox id" }
      }
    },
    "EpicGamesIAPConfigRequest": {
      "type": "object",
      "required": ["sandboxId"],
      "properties": { "sandboxId": { "type": "string", "description": "sandboxId" } }
    },
    "IAPItemConfigInfo": {
      "type": "object",
      "properties": { "data": { "type": "array", "items": { "$ref": "#/definitions/IAPItemEntry" } } }
    },
    "IAPItemEntry": {
      "type": "object",
      "properties": {
        "itemIdentity": { "type": "string", "description": "item id or sku" },
        "itemIdentityType": { "type": "string", "description": "item identity type", "enum": ["ITEM_ID", "ITEM_SKU"] },
        "platformProductIdMap": {
          "type": "object",
          "description": "IAP Platform production ids related item id",
          "additionalProperties": { "type": "string" }
        }
      }
    },
    "IAPItemConfigUpdate": {
      "type": "object",
      "properties": { "data": { "type": "array", "items": { "$ref": "#/definitions/IAPItemEntry" } } }
    },
    "PlayStationIAPConfigInfo": {
      "type": "object",
      "required": ["namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "environment": { "type": "string", "description": "environment" }
      }
    },
    "PlaystationIAPConfigRequest": {
      "type": "object",
      "required": ["environment"],
      "properties": { "environment": { "type": "string", "description": "environment" } }
    },
    "GoogleIAPConfigInfo": {
      "type": "object",
      "required": ["namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "applicationName": { "type": "string", "description": "applicationName" },
        "serviceAccountId": { "type": "string", "description": "serviceAccountId" },
        "p12FileName": { "type": "string", "description": "p12 file" }
      }
    },
    "AppleIAPConfigInfo": {
      "type": "object",
      "required": ["namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "bundleId": { "type": "string", "description": "bundleId" },
        "password": { "type": "string", "description": "password" }
      }
    },
    "GoogleIAPConfigRequest": {
      "type": "object",
      "required": ["applicationName", "serviceAccountId"],
      "properties": {
        "applicationName": { "type": "string", "description": "applicationName" },
        "serviceAccountId": { "type": "string", "description": "serviceAccountId" }
      }
    },
    "SteamIAPConfig": {
      "type": "object",
      "properties": {
        "rvn": { "type": "integer", "format": "int32" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" },
        "namespace": { "type": "string" },
        "publisherAuthenticationKey": { "type": "string" },
        "appId": { "type": "string" }
      }
    },
    "SteamIAPConfigInfo": {
      "type": "object",
      "required": ["namespace", "publisherAuthenticationKey"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "publisherAuthenticationKey": { "type": "string", "description": "steam publisher authentication key" },
        "appId": { "type": "string", "description": "steam app id" }
      }
    },
    "SteamIAPConfigRequest": {
      "type": "object",
      "required": ["appId"],
      "properties": {
        "publisherAuthenticationKey": { "type": "string", "description": "publisherAuthenticationKey" },
        "appId": { "type": "string", "description": "appId" }
      }
    },
    "TwitchIAPConfigRequest": {
      "type": "object",
      "properties": {
        "clientId": { "type": "string", "description": "twitch client id" },
        "clientSecret": { "type": "string", "description": "twitch client secret" },
        "organizationId": { "type": "string", "description": "twitch organization Id" }
      }
    },
    "XblIAPConfigRequest": {
      "type": "object",
      "required": ["relyingPartyCert"],
      "properties": { "relyingPartyCert": { "type": "string", "description": "relyingPartyCert" } }
    },
    "AppleIAPConfigRequest": {
      "type": "object",
      "required": ["bundleId"],
      "properties": {
        "bundleId": { "type": "string", "description": "bundleId" },
        "password": { "type": "string", "description": "password" }
      }
    },
    "ClientRequestParameter": {
      "type": "object",
      "properties": {
        "region": { "type": "string" },
        "language": { "type": "string" },
        "price": { "type": "number", "format": "double" },
        "currencyCode": { "type": "string" }
      }
    },
    "ConsumeItem": {
      "type": "object",
      "properties": {
        "extItemId": { "type": "string" },
        "itemIdentity": { "type": "string" },
        "itemIdentityType": { "type": "string", "enum": ["ITEM_ID", "ITEM_SKU"] }
      }
    },
    "IAPConsumeHistoryInfo": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "namespace": { "type": "string" },
        "userId": { "type": "string" },
        "status": { "type": "string", "enum": ["PENDING", "FAIL", "SUCCESS"] },
        "iapType": { "type": "string", "enum": ["APPLE", "GOOGLE", "PLAYSTATION", "STEAM", "XBOX", "STADIA", "EPICGAMES", "TWITCH"] },
        "requestUrl": { "type": "string" },
        "requestBody": { "type": "object" },
        "requestHistories": { "type": "array", "items": { "$ref": "#/definitions/RequestHistory" } },
        "consumeItems": { "type": "array", "items": { "$ref": "#/definitions/ConsumeItem" } },
        "clientRequestParameter": { "$ref": "#/definitions/ClientRequestParameter" }
      }
    },
    "IAPConsumeHistoryPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/IAPConsumeHistoryInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "RequestHistory": {
      "type": "object",
      "properties": {
        "status": { "type": "string", "enum": ["PENDING", "FAIL", "SUCCESS"] },
        "requestTime": { "type": "string", "format": "date-time" },
        "responseTime": { "type": "string", "format": "date-time" },
        "statusCode": { "type": "integer", "format": "int32" },
        "responseBody": { "type": "object" }
      }
    },
    "CreditRevocation": {
      "type": "object",
      "properties": {
        "walletId": { "type": "string" },
        "currencyCode": { "type": "string" },
        "balanceOrigin": { "type": "string" },
        "amount": { "type": "integer", "format": "int64" },
        "status": { "type": "string", "enum": ["SUCCESS", "FAIL"] },
        "revocationStrategy": { "type": "string" },
        "skipped": { "type": "boolean" },
        "reason": { "type": "string" },
        "customRevocation": { "type": "object" }
      }
    },
    "DLCRecord": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "obtainedAt": { "type": "string", "format": "date-time" },
        "rewards": { "type": "array", "items": { "$ref": "#/definitions/PlatformReward" } },
        "status": { "type": "string", "enum": ["REVOKED", "FULFILLED", "REVOKE_FAILED"] },
        "revokedAt": { "type": "string", "format": "date-time" },
        "transactionId": { "type": "string" },
        "revokeResults": { "type": "array", "items": { "$ref": "#/definitions/RevokeResult" } },
        "revocationResult": { "$ref": "#/definitions/RevocationResult" },
        "sources": { "type": "array", "uniqueItems": true, "items": { "type": "string" } },
        "version": { "type": "integer", "format": "int32" }
      }
    },
    "EntitlementRevocation": {
      "type": "object",
      "properties": {
        "entitlementId": { "type": "string" },
        "status": { "type": "string", "enum": ["SUCCESS", "FAIL"] },
        "quantity": { "type": "integer", "format": "int64" },
        "itemId": { "type": "string" },
        "itemSku": { "type": "string" },
        "revocationStrategy": { "type": "string" },
        "skipped": { "type": "boolean" },
        "reason": { "type": "string" },
        "customRevocation": { "type": "object" }
      }
    },
    "ItemRevocation": {
      "type": "object",
      "properties": {
        "itemId": { "type": "string" },
        "itemSku": { "type": "string" },
        "itemType": {
          "type": "string",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "status": { "type": "string", "enum": ["SUCCESS", "FAIL"] },
        "skipped": { "type": "boolean" },
        "strategy": { "type": "string" },
        "quantity": { "type": "integer", "format": "int64" },
        "reason": { "type": "string" },
        "itemRevocations": { "type": "array", "items": { "$ref": "#/definitions/ItemRevocation" } },
        "creditRevocations": { "type": "array", "items": { "$ref": "#/definitions/CreditRevocation" } },
        "entitlementRevocations": { "type": "array", "items": { "$ref": "#/definitions/EntitlementRevocation" } },
        "customRevocation": { "type": "object" }
      }
    },
    "RevocationResult": {
      "type": "object",
      "required": ["id", "status"],
      "properties": {
        "id": { "type": "string", "description": "revocation history id" },
        "status": { "type": "string", "description": "revocation status", "enum": ["SUCCESS", "FAIL"] },
        "itemRevocations": { "type": "array", "description": "item revocations", "items": { "$ref": "#/definitions/ItemRevocation" } },
        "creditRevocations": {
          "type": "array",
          "description": "credit revocations",
          "items": { "$ref": "#/definitions/CreditRevocation" }
        },
        "entitlementRevocations": {
          "type": "array",
          "description": "entitlement revocations",
          "items": { "$ref": "#/definitions/EntitlementRevocation" }
        }
      }
    },
    "RevokeItemSummary": {
      "type": "object",
      "properties": {
        "itemId": { "type": "string" },
        "itemSku": { "type": "string" },
        "itemType": { "type": "string" },
        "revokeStatus": { "type": "string", "enum": ["SKIPPED", "COMPLETED"] }
      }
    },
    "RevokeResult": {
      "type": "object",
      "properties": {
        "reward": { "$ref": "#/definitions/PlatformReward" },
        "revokeItemSummaries": { "type": "array", "items": { "$ref": "#/definitions/RevokeItemSummary" } },
        "status": { "type": "string", "enum": ["SKIPPED", "COMPLETED"] }
      }
    },
    "UserDLC": {
      "type": "object",
      "properties": {
        "rvn": { "type": "integer", "format": "int32" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" },
        "id": { "type": "string" },
        "userId": { "type": "string" },
        "namespace": { "type": "string" },
        "platform": { "type": "string", "enum": ["PSN", "STEAM", "XBOX", "EPICGAMES"] },
        "dlcs": { "type": "array", "items": { "$ref": "#/definitions/DLCRecord" } }
      }
    },
    "UserDLCRecord": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "obtainedAt": { "type": "string", "format": "date-time" },
        "rewards": { "type": "array", "items": { "$ref": "#/definitions/PlatformReward" } },
        "status": { "type": "string", "enum": ["REVOKED", "FULFILLED", "REVOKE_FAILED"] },
        "revokedAt": { "type": "string", "format": "date-time" },
        "transactionId": { "type": "string" },
        "revokeResults": { "type": "array", "items": { "$ref": "#/definitions/RevokeResult" } },
        "revocationResult": { "$ref": "#/definitions/RevocationResult" },
        "sources": { "type": "array", "uniqueItems": true, "items": { "type": "string" } },
        "version": { "type": "integer", "format": "int32" },
        "platform": { "type": "string", "description": "platform", "enum": ["PSN", "STEAM", "XBOX", "EPICGAMES"] },
        "userId": { "type": "string", "description": "userId" },
        "namespace": { "type": "string", "description": "namespace" }
      }
    },
    "MockIAPReceipt": {
      "type": "object",
      "required": ["productId", "type"],
      "properties": {
        "type": {
          "type": "string",
          "description": "The IAP type.",
          "enum": ["APPLE", "GOOGLE", "PLAYSTATION", "STEAM", "XBOX", "STADIA", "EPICGAMES", "TWITCH"]
        },
        "productId": { "type": "string", "description": "The product identifier of the item that was purchased." },
        "itemIdentityType": { "type": "string", "description": "The item identity type", "enum": ["ITEM_ID", "ITEM_SKU"] },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        }
      }
    },
    "IAPOrderInfo": {
      "type": "object",
      "required": ["createdAt", "iapOrderNo", "namespace", "status", "type", "updatedAt", "userId"],
      "properties": {
        "iapOrderNo": { "type": "string", "description": "iap order No" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "user id" },
        "productId": { "type": "string", "description": "product id" },
        "receiptData": { "type": "string", "description": "receipt data" },
        "transactionId": { "type": "string", "description": "transaction id" },
        "status": { "type": "string", "description": "status", "enum": ["VERIFIED", "FULFILLED", "FAILED"] },
        "statusReason": { "type": "string", "description": "status reason" },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" },
        "quantity": { "type": "integer", "format": "int32", "description": "quantity" },
        "sandbox": { "type": "boolean", "description": "sandbox" },
        "type": {
          "type": "string",
          "description": "IAP type",
          "enum": ["APPLE", "GOOGLE", "PLAYSTATION", "STEAM", "XBOX", "STADIA", "EPICGAMES", "TWITCH"]
        },
        "fulfilledTime": { "type": "string", "format": "date-time", "description": "fulfill time if fulfilled" },
        "retryCount": { "type": "integer", "format": "int32", "description": "retry count" },
        "entitlements": { "type": "array", "description": "entitlement summary", "items": { "$ref": "#/definitions/EntitlementSummary" } },
        "credits": { "type": "array", "description": "credit summary", "items": { "$ref": "#/definitions/CreditSummary" } },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "price": { "type": "number", "format": "double", "description": "price" },
        "currencyCode": { "type": "string", "description": "currency code" }
      }
    },
    "IAPOrderPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/IAPOrderInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "XblUserSessionRequest": {
      "type": "object",
      "required": ["gameSessionId", "payload", "scid", "sessionTemplateName"],
      "properties": {
        "scid": { "type": "string", "description": "service config id" },
        "sessionTemplateName": { "type": "string", "description": "session template name" },
        "gameSessionId": { "type": "string", "description": "game session id" },
        "payload": { "type": "object", "description": "session objects" }
      },
      "description": "A DTO object for xbl user session"
    },
    "IAPItemFlatEntry": {
      "type": "object",
      "properties": {
        "platform": {
          "type": "string",
          "description": "iap platform",
          "enum": ["APPLE", "GOOGLE", "PLAYSTATION", "STEAM", "XBOX", "STADIA", "EPICGAMES", "TWITCH"]
        },
        "itemIdentityType": { "type": "string", "description": "item identity type", "enum": ["ITEM_ID", "ITEM_SKU"] },
        "itemIdentity": { "type": "string", "description": "item id or sku" },
        "platformProductId": { "type": "string", "description": "IAP Platform production id related item id" }
      }
    },
    "IAPItemMappingInfo": {
      "type": "object",
      "properties": { "data": { "type": "array", "items": { "$ref": "#/definitions/IAPItemFlatEntry" } } }
    },
    "TwitchSyncResult": {
      "type": "object",
      "properties": {
        "transactionId": { "type": "string", "description": "Twitch entitlement id" },
        "itemSku": { "type": "string", "description": "Item sku" },
        "iapOrderStatus": { "type": "string", "description": "order status", "enum": ["VERIFIED", "FULFILLED", "FAILED"] }
      }
    },
    "TwitchSyncRequest": {
      "type": "object",
      "properties": {
        "gameId": { "type": "string", "description": "game id" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        }
      }
    },
    "SteamDLCSyncRequest": {
      "type": "object",
      "required": ["steamId"],
      "properties": {
        "steamId": { "type": "string", "description": "Steam ID of the user" },
        "appId": { "type": "string", "description": "Steam app id, this field is deprecated" }
      }
    },
    "XblDLCSyncRequest": { "type": "object", "properties": { "xstsToken": { "type": "string", "description": "xstsToken" } } },
    "PlayStationDLCSyncRequest": {
      "type": "object",
      "properties": { "serviceLabel": { "type": "integer", "format": "int32", "description": "service label" } }
    },
    "EpicGamesDLCSyncRequest": {
      "type": "object",
      "properties": { "epicGamesJwtToken": { "type": "string", "description": "epicGamesJwtToken" } }
    },
    "PlayStationDLCSyncMultiServiceLabelsRequest": {
      "type": "object",
      "properties": {
        "serviceLabels": {
          "type": "array",
          "description": "service labels",
          "uniqueItems": true,
          "items": { "type": "integer", "format": "int32" }
        }
      }
    },
    "SteamSyncRequest": {
      "type": "object",
      "required": ["appId", "steamId"],
      "properties": {
        "steamId": { "type": "string", "description": "Steam ID of the user" },
        "appId": { "type": "string", "description": "Steam app id" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        },
        "productId": { "type": "string", "description": "steamdefid" },
        "price": { "type": "number", "format": "double", "description": "product price" },
        "currencyCode": { "type": "string", "description": "product price currency" }
      }
    },
    "AppleIAPReceipt": {
      "type": "object",
      "required": ["productId", "receiptData", "transactionId"],
      "properties": {
        "productId": { "type": "string", "description": "The product identifier of the item that was purchased." },
        "transactionId": { "type": "string", "description": "The transaction identifier of the item that was purchased." },
        "receiptData": { "type": "string", "description": "The base64 encoded receipt data." },
        "excludeOldTransactions": {
          "type": "boolean",
          "description": "Only used for iOS7 style app receipts that contain auto-renewable or non-renewing subscriptions. If value is true, response includes only the latest renewal transaction for any subscriptions."
        },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        }
      }
    },
    "PlayStationReconcileResult": {
      "type": "object",
      "properties": {
        "transactionId": { "type": "string" },
        "psnItemId": { "type": "string" },
        "itemId": { "type": "string" },
        "sku": { "type": "string" },
        "status": { "type": "string", "enum": ["VERIFIED", "FULFILLED", "FAILED"] }
      }
    },
    "PlayStationMultiServiceLabelsReconcileRequest": {
      "type": "object",
      "properties": {
        "productId": { "type": "string", "description": "productId" },
        "price": { "type": "number", "format": "double", "description": "product price" },
        "currencyCode": { "type": "string", "description": "product price currency" },
        "serviceLabels": {
          "type": "array",
          "description": "service labels",
          "uniqueItems": true,
          "items": { "type": "integer", "format": "int32" }
        }
      }
    },
    "PlayStationReconcileRequest": {
      "type": "object",
      "properties": {
        "productId": { "type": "string", "description": "productId" },
        "price": { "type": "number", "format": "double", "description": "product price" },
        "currencyCode": { "type": "string", "description": "product price currency" },
        "serviceLabel": { "type": "integer", "format": "int32", "description": "service label" }
      }
    },
    "GoogleReceiptResolveResult": {
      "type": "object",
      "properties": {
        "needConsume": {
          "type": "boolean",
          "description": "if client side need consume this receipt's product by invoke Google Billing client's consumeAsync"
        }
      }
    },
    "GoogleIAPReceipt": {
      "type": "object",
      "required": ["orderId", "packageName", "productId", "purchaseTime", "purchaseToken"],
      "properties": {
        "orderId": { "type": "string", "description": "OrderId returned from google play" },
        "packageName": { "type": "string", "description": "App package name" },
        "productId": { "type": "string", "description": "Product id (SKU)" },
        "purchaseTime": { "type": "integer", "format": "int64", "description": "Purchase time returned from google play" },
        "purchaseToken": { "type": "string", "description": "Google play purchase token returned from google play" },
        "autoAck": { "type": "boolean", "description": "If invoke Google play's Acknowledge after sync & fulfill item" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        }
      }
    },
    "XblReconcileResult": {
      "type": "object",
      "properties": {
        "transactionId": { "type": "string" },
        "xboxProductId": { "type": "string" },
        "itemId": { "type": "string" },
        "sku": { "type": "string" },
        "iapOrderStatus": { "type": "string", "enum": ["VERIFIED", "FULFILLED", "FAILED"] }
      }
    },
    "XblReconcileRequest": {
      "type": "object",
      "properties": {
        "xstsToken": { "type": "string", "description": "xstsToken" },
        "productId": { "type": "string", "description": "productId" },
        "price": { "type": "number", "format": "double", "description": "product price" },
        "currencyCode": { "type": "string", "description": "product price currency" }
      }
    },
    "EpicGamesReconcileResult": {
      "type": "object",
      "properties": {
        "transactionId": { "type": "string" },
        "epicGamesItemId": { "type": "string" },
        "itemId": { "type": "string" },
        "sku": { "type": "string" },
        "status": { "type": "string", "enum": ["VERIFIED", "FULFILLED", "FAILED"] }
      }
    },
    "EpicGamesReconcileRequest": {
      "type": "object",
      "properties": { "epicGamesJwtToken": { "type": "string", "description": "epicGamesJwtToken" } }
    },
    "InvoiceCurrencySummary": {
      "type": "object",
      "required": ["currency", "salesVolume", "subtotalPrice", "totalPrice", "totalTax"],
      "properties": {
        "currency": { "description": "currency", "$ref": "#/definitions/CurrencySummary" },
        "subtotalPrice": { "type": "integer", "format": "int64", "description": "subtotal price" },
        "totalTax": { "type": "integer", "format": "int64", "description": "total tax" },
        "totalPrice": { "type": "integer", "format": "int64", "description": "total price" },
        "salesVolume": { "type": "integer", "format": "int64", "description": "sales volume" }
      }
    },
    "InvoiceSummary": {
      "type": "object",
      "required": ["invoiceCurrencySummary", "totalSalesVolume"],
      "properties": {
        "totalSalesVolume": { "type": "integer", "format": "int64", "description": "total sales volume" },
        "invoiceCurrencySummary": {
          "type": "array",
          "description": "invoice currency summary",
          "items": { "$ref": "#/definitions/InvoiceCurrencySummary" }
        }
      }
    },
    "OrderStatistics": {
      "type": "object",
      "required": ["statusCount", "total"],
      "properties": {
        "total": { "type": "integer", "format": "int64", "description": "Total" },
        "statusCount": { "type": "object", "description": "Status count", "additionalProperties": { "type": "integer", "format": "int64" } }
      }
    },
    "OrderCreationOptions": {
      "type": "object",
      "properties": { "skipPriceValidation": { "type": "boolean", "description": "skip price validation" } },
      "description": "A DTO object for order creation options"
    },
    "OrderInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "currency",
        "discountedPrice",
        "itemId",
        "namespace",
        "orderNo",
        "paymentRemainSeconds",
        "price",
        "quantity",
        "sandbox",
        "status",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "orderNo": { "type": "string", "description": "Order number" },
        "paymentOrderNo": { "type": "string", "description": "Payment order number" },
        "namespace": { "type": "string", "description": "Order namespace" },
        "userId": { "type": "string", "description": "User id" },
        "itemId": { "type": "string", "description": "Item id" },
        "sandbox": { "type": "boolean", "description": "isSandbox, indicate if order is sandbox" },
        "quantity": { "type": "integer", "format": "int32", "description": "Order quantity" },
        "price": { "type": "integer", "format": "int32", "description": "Order price" },
        "discountedPrice": { "type": "integer", "format": "int32", "description": "Order discounted price" },
        "creationOptions": { "description": "The creation options of this order", "$ref": "#/definitions/OrderCreationOptions" },
        "paymentProvider": {
          "type": "string",
          "description": "Payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "paymentMethod": { "type": "string", "description": "Payment method" },
        "tax": { "type": "integer", "format": "int32", "description": "Order total tax" },
        "vat": { "type": "integer", "format": "int32", "description": "Order VAT" },
        "salesTax": { "type": "integer", "format": "int32", "description": "Order sales tax" },
        "paymentProviderFee": { "type": "integer", "format": "int32", "description": "Payment provider fee" },
        "paymentMethodFee": { "type": "integer", "format": "int32", "description": "Payment method fee" },
        "currency": { "description": "Order currency info", "$ref": "#/definitions/CurrencySummary" },
        "paymentStationUrl": { "type": "string", "description": "Payment url info" },
        "itemSnapshot": { "description": "Item snapshot", "$ref": "#/definitions/ItemSnapshot" },
        "region": { "type": "string", "description": "Order created region" },
        "language": { "type": "string", "description": "Order created language" },
        "status": {
          "type": "string",
          "description": "Order status",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSED",
            "DELETED"
          ]
        },
        "statusReason": { "type": "string", "description": "Order status reason" },
        "createdTime": { "type": "string", "format": "date-time", "description": "The time of the order created" },
        "chargedTime": { "type": "string", "format": "date-time", "description": "The time of the order charged" },
        "fulfilledTime": { "type": "string", "format": "date-time", "description": "The time of the order fulfilled" },
        "refundedTime": { "type": "string", "format": "date-time", "description": "The time of the order refunded" },
        "chargebackTime": { "type": "string", "format": "date-time", "description": "The time of the order chargeback" },
        "chargebackReversedTime": { "type": "string", "format": "date-time", "description": "The time of the order chargeback reversed" },
        "expireTime": { "type": "string", "format": "date-time", "description": "payment expire time" },
        "paymentRemainSeconds": { "type": "integer", "format": "int32", "description": "payment remain seconds" },
        "ext": {
          "type": "object",
          "description": "extra field to store external order information",
          "additionalProperties": { "type": "object" }
        },
        "totalTax": { "type": "integer", "format": "int32", "description": "total tax" },
        "totalPrice": { "type": "integer", "format": "int32", "description": "total price" },
        "subtotalPrice": { "type": "integer", "format": "int32", "description": "subtotal price" },
        "createdAt": { "type": "string", "format": "date-time", "description": "createdAt" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updatedAt" }
      }
    },
    "OrderRefundCreate": {
      "type": "object",
      "required": ["description"],
      "properties": { "description": { "type": "string", "description": "order refund description" } }
    },
    "OrderPagingResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/OrderInfo" } },
        "paging": { "$ref": "#/definitions/Paging" },
        "total": { "type": "integer", "format": "int64" }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "rvn": { "type": "integer", "format": "int32" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" },
        "orderNo": { "type": "string" },
        "namespace": { "type": "string" },
        "userId": { "type": "string" },
        "paymentOrderNo": { "type": "string" },
        "status": {
          "type": "string",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSED",
            "DELETED"
          ]
        },
        "creationOptions": { "$ref": "#/definitions/OrderCreationOptions" },
        "sandbox": { "type": "boolean" },
        "itemId": { "type": "string" },
        "quantity": { "type": "integer", "format": "int32" },
        "price": { "type": "integer", "format": "int32" },
        "discountedPrice": { "type": "integer", "format": "int32" },
        "paymentProvider": { "type": "string", "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"] },
        "paymentMethod": { "type": "string" },
        "tax": { "type": "integer", "format": "int32" },
        "vat": { "type": "integer", "format": "int32" },
        "salesTax": { "type": "integer", "format": "int32" },
        "paymentProviderFee": { "type": "integer", "format": "int32" },
        "paymentMethodFee": { "type": "integer", "format": "int32" },
        "currency": { "$ref": "#/definitions/CurrencySummary" },
        "paymentStationUrl": { "type": "string" },
        "statusReason": { "type": "string" },
        "createdTime": { "type": "string", "format": "date-time" },
        "chargedTime": { "type": "string", "format": "date-time" },
        "fulfilledTime": { "type": "string", "format": "date-time" },
        "refundedTime": { "type": "string", "format": "date-time" },
        "chargebackTime": { "type": "string", "format": "date-time" },
        "chargebackReversedTime": { "type": "string", "format": "date-time" },
        "returnUrl": { "type": "string" },
        "ext": { "type": "object", "additionalProperties": { "type": "object" } },
        "itemSnapshot": { "$ref": "#/definitions/ItemSnapshot" },
        "region": { "type": "string" },
        "language": { "type": "string" },
        "countNamespace": { "type": "string" },
        "countItemId": { "type": "string" },
        "countUserId": { "type": "string" },
        "expireTime": { "type": "string", "format": "date-time" },
        "paymentRemainSeconds": { "type": "integer", "format": "int32" },
        "charged": { "type": "boolean" },
        "free": { "type": "boolean" },
        "totalTax": { "type": "integer", "format": "int32" },
        "totalPrice": { "type": "integer", "format": "int32" },
        "subtotalPrice": { "type": "integer", "format": "int32" }
      }
    },
    "OrderSyncResult": {
      "type": "object",
      "properties": { "orders": { "type": "array", "items": { "$ref": "#/definitions/Order" } }, "nextEvaluatedKey": { "type": "string" } }
    },
    "OrderHistoryInfo": {
      "type": "object",
      "required": ["action", "createdAt", "namespace", "operator", "orderNo", "updatedAt", "userId"],
      "properties": {
        "orderNo": { "type": "string", "description": "The Order number" },
        "operator": { "type": "string", "description": "The operator to this order" },
        "action": {
          "type": "string",
          "description": "The action of the order",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSE",
            "DELETED",
            "SET_STATUS"
          ]
        },
        "reason": { "type": "string", "description": "The reason of this operation" },
        "namespace": { "type": "string", "description": "The namespace of this order" },
        "userId": { "type": "string", "description": "The owner of the order" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "OrderPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/OrderInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "PurchasedItemCount": { "type": "object", "properties": { "count": { "type": "integer", "format": "int64" } } },
    "OrderUpdate": {
      "type": "object",
      "required": ["status", "statusReason"],
      "properties": {
        "status": {
          "type": "string",
          "description": "status",
          "enum": [
            "INIT",
            "CHARGED",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "FULFILLED",
            "FULFILL_FAILED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "CLOSED",
            "DELETED"
          ]
        },
        "statusReason": { "type": "string", "description": "update status reason" }
      },
      "description": "A DTO object for updating order API call."
    },
    "AdditionalData": { "type": "object", "properties": { "cardSummary": { "type": "string" } } },
    "TradeNotification": {
      "type": "object",
      "required": [
        "currency",
        "extOrderNo",
        "issuedAt",
        "namespace",
        "nonceStr",
        "paymentOrderNo",
        "paymentProvider",
        "price",
        "sandbox",
        "status",
        "type"
      ],
      "properties": {
        "namespace": { "type": "string", "description": "namespace which event issues from" },
        "userId": { "type": "string", "description": "user id in namespace, will be null if there's targetUserId" },
        "issuedAt": { "type": "string", "format": "date-time", "description": "event issued at" },
        "type": { "type": "string", "description": "notification type: payment" },
        "targetNamespace": { "type": "string", "description": "target namespace, usually it's the game namespace" },
        "targetUserId": { "type": "string", "description": "target user id, usually it's the user id in game namespace" },
        "nonceStr": { "type": "string", "description": "Random string" },
        "paymentOrderNo": { "type": "string", "description": "Payment order number" },
        "extOrderNo": { "type": "string", "description": "Order number" },
        "sku": { "type": "string", "description": "optional, unique identity for the item" },
        "extUserId": { "type": "string", "description": "optional, external user id, can be the character id" },
        "sandbox": { "type": "boolean", "description": "isSandbox, indicate if order is sandbox" },
        "price": { "type": "integer", "format": "int32", "description": "Payment order price" },
        "paymentProvider": {
          "type": "string",
          "description": "Payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "paymentMethod": { "type": "string", "description": "Payment method" },
        "tax": { "type": "integer", "format": "int32", "description": "Payment total tax" },
        "vat": { "type": "integer", "format": "int32", "description": "Payment order VAT" },
        "salesTax": { "type": "integer", "format": "int32", "description": "Payment order sales tax" },
        "paymentProviderFee": { "type": "integer", "format": "int32", "description": "Payment provider fee" },
        "paymentMethodFee": { "type": "integer", "format": "int32", "description": "Payment method fee" },
        "currency": { "description": "Payment order currency info", "$ref": "#/definitions/CurrencySummary" },
        "paymentStationUrl": { "type": "string", "description": "Payment station url" },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "statusReason": { "type": "string", "description": "Payment order status reason" },
        "authorisedTime": { "type": "string", "format": "date-time", "description": "The time of the order authorised" },
        "createdTime": { "type": "string", "format": "date-time", "description": "The time of the order created" },
        "chargedTime": { "type": "string", "format": "date-time", "description": "The time of the order charged" },
        "refundedTime": { "type": "string", "format": "date-time", "description": "The time of the order refunded" },
        "chargebackTime": { "type": "string", "format": "date-time", "description": "The time of the order chargeback" },
        "chargebackReversedTime": { "type": "string", "format": "date-time", "description": "The time of the order chargeback reversed" },
        "customParameters": { "type": "object", "description": "User custom parameters", "additionalProperties": { "type": "object" } },
        "metadata": { "type": "object", "description": "metadata", "additionalProperties": { "type": "string" } },
        "subscriptionId": { "type": "string", "description": "Subscription id if exist" },
        "totalTax": { "type": "integer", "format": "int32", "description": "total tax" },
        "totalPrice": { "type": "integer", "format": "int32", "description": "total price" },
        "subtotalPrice": { "type": "integer", "format": "int32", "description": "subtotal price" },
        "extTxId": { "type": "string", "description": "External transaction id" },
        "txEndTime": { "type": "string", "format": "date-time", "description": "Transaction end date time" },
        "additionalData": { "description": "additional data", "$ref": "#/definitions/AdditionalData" }
      }
    },
    "AdminOrderCreate": {
      "type": "object",
      "required": ["currencyCode", "discountedPrice", "itemId", "price", "quantity", "region"],
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "quantity": { "type": "integer", "format": "int32", "description": "Quantity of item, min is 1" },
        "price": { "type": "integer", "format": "int32", "description": "Price of order, should match (item_price * quantity)" },
        "discountedPrice": {
          "type": "integer",
          "format": "int32",
          "description": "Discounted price of order, this should match (item_discounted_price * quantity) ifitem discounted price is available, otherwise it should equal to (item_price * quantity)"
        },
        "currencyCode": { "type": "string", "description": "currency code, should match currency code in item region data" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        },
        "sectionId": { "type": "string", "description": "section Id, required if order consists of section item" },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        },
        "ext": {
          "type": "object",
          "description": "extra field to store external order information",
          "additionalProperties": { "type": "object" }
        },
        "sandbox": { "type": "boolean", "description": "sandbox" },
        "platform": {
          "type": "string",
          "description": "platform",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Nintendo", "Other"]
        },
        "options": { "description": "Creation options", "$ref": "#/definitions/OrderCreationOptions" },
        "currencyNamespace": {
          "type": "string",
          "description": "currency namespace, if options.skipPriceValidation is true, then this is required. If current namespace is publisher namespace, then currency namespace must be publisher namespace; if current is game namespace, currency namespace must be the same game namespace or publisher namespace"
        }
      }
    },
    "OrderGrantInfo": {
      "type": "object",
      "properties": {
        "entitlements": {
          "type": "array",
          "description": "Order entitlement list",
          "items": { "$ref": "#/definitions/EntitlementSummary" }
        },
        "credits": { "type": "array", "description": "Order credit list", "items": { "$ref": "#/definitions/CreditSummary" } }
      }
    },
    "OrderCreate": {
      "type": "object",
      "required": ["currencyCode", "discountedPrice", "itemId", "price", "quantity"],
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "quantity": { "type": "integer", "format": "int32", "description": "Quantity of item, min is 1" },
        "price": { "type": "integer", "format": "int32", "description": "Price of order, should match (item_price * quantity)" },
        "discountedPrice": {
          "type": "integer",
          "format": "int32",
          "description": "Discounted price of order, this should match (item_discounted_price * quantity) ifitem discounted price is available, otherwise it should equal to (item_price * quantity)"
        },
        "currencyCode": { "type": "string", "description": "currency code, should match currency code in item region data" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        },
        "sectionId": { "type": "string", "description": "section Id, required if order consists of section item" },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        },
        "ext": {
          "type": "object",
          "description": "extra field to store external order information",
          "additionalProperties": { "type": "object" }
        }
      }
    },
    "PaymentCallbackConfigInfo": {
      "type": "object",
      "required": ["namespace"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace" },
        "privateKey": { "type": "string", "description": "private key to encode/decode ECommerce payload" },
        "notifyUrl": { "type": "string", "description": "notify url for ECommerce payment notification" },
        "dryRun": { "type": "boolean", "description": "mock workflow while set true, default false" }
      }
    },
    "PaymentCallbackConfigUpdate": {
      "type": "object",
      "properties": {
        "privateKey": { "type": "string", "description": "private key to encode/decode ECommerce payload" },
        "notifyUrl": { "type": "string", "description": "notify url for ECommerce payment notification" },
        "dryRun": { "type": "boolean", "description": "mock workflow while set true, default false" }
      }
    },
    "AdyenConfig": {
      "type": "object",
      "properties": {
        "apiKey": { "type": "string", "description": "api key, max length is 4096" },
        "clientKey": { "type": "string", "description": "client key, max length is 4096" },
        "merchantAccount": { "type": "string", "description": "merchant account, max length is 255" },
        "notificationHmacKey": { "type": "string", "description": "notification hmac key, max length is 4096" },
        "notificationUsername": { "type": "string", "description": "notification username, max length is 255" },
        "notificationPassword": { "type": "string", "description": "notification password, max length is 255" },
        "returnUrl": { "type": "string", "description": "return url, max length is 2000" },
        "liveEndpointUrlPrefix": {
          "type": "string",
          "description": "Provide the unique live url prefix from the \"API URLs and Response\" menu in the Adyen Customer Area. Under sandbox env, please input random words."
        },
        "authoriseAsCapture": { "type": "boolean", "description": "authorise as capture means no separated capture event" },
        "allowedPaymentMethods": {
          "type": "array",
          "description": "specifying the payment methods that are allowed to appear with the paymentMethod.type. paymentMethod.type of each payment method link: https://docs.adyen.com/developers/payment-methods",
          "items": { "type": "string" }
        },
        "blockedPaymentMethods": {
          "type": "array",
          "description": "specifying the payment methods that are blocked with the paymentMethod.type. paymentMethod.type of each payment method link: https://docs.adyen.com/developers/payment-methods",
          "items": { "type": "string" }
        },
        "settings": {
          "type": "string",
          "example": "{\"autoFocusOnLoad\":true,\"consolidateCards\":true,\"initialPMCount\":5,\"translations\":{\"deliveryAddress\":{\"en_US\":\"Shipping Address\",\"nl_NL\":\"Verzendadres\"}},\"paymentMethods\":{\"card\":{\"sfStyles\":{\"base\":{\"color\":\"#000\",\"fontSize\":\"14px\",\"lineHeight\":\"14px\",\"fontSmoothing\":\"antialiased\"},\"error\":{\"color\":\"red\"},\"placeholder\":{\"color\":\"#d8d8d8\"},\"validated\":{\"color\":\"green\"}},\"separateDateInputs\":false,\"placeholders\":{\"encryptedCardNumber\":\"4111 1111 1111 1111\",\"encryptedExpiryDate\":\"08/18\",\"encryptedSecurityCode\":\"737\"}}}}",
          "description": "Adyen settings json string(Deprecated, please use dropInSettings field) adyen settings docs: https://docs.adyen.com/checkout/web-sdk/customization/settings/"
        },
        "dropInSettings": { "type": "string", "description": "Adyen drop in settings json string" }
      },
      "description": "A DTO object for updating adyen config."
    },
    "AliPayConfig": {
      "type": "object",
      "properties": {
        "appId": { "type": "string", "description": "appId" },
        "privateKey": { "type": "string", "description": "privateKey" },
        "publicKey": { "type": "string", "description": "publicKey" },
        "returnUrl": { "type": "string", "description": "returnUrl" }
      },
      "description": "A DTO object for updating alipay config."
    },
    "CheckoutConfig": {
      "type": "object",
      "properties": {
        "publicKey": { "type": "string", "description": "public key, max length is 4096" },
        "secretKey": { "type": "string", "description": "secret key, max length is 4096" }
      },
      "description": "A DTO object for updating checkout.com config."
    },
    "PayPalConfig": {
      "type": "object",
      "properties": {
        "clientID": { "type": "string", "description": "client id" },
        "clientSecret": { "type": "string", "description": "client secret, max length is 4096" },
        "webHookId": { "type": "string", "description": "web hook id" },
        "returnUrl": { "type": "string", "description": "return url, max length is 2048" }
      },
      "description": "A DTO object for updating PayPal config."
    },
    "PaymentMerchantConfigInfo": {
      "type": "object",
      "required": ["createdAt", "id", "updatedAt"],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "aliPayConfig": { "description": "aliPayConfig", "$ref": "#/definitions/AliPayConfig" },
        "aliPaySandboxConfig": { "description": "aliPaySandboxConfig", "$ref": "#/definitions/AliPayConfig" },
        "wxPayConfig": { "description": "wxPayConfig", "$ref": "#/definitions/WxPayConfigInfo" },
        "xsollaConfig": { "description": "xsollaConfig", "$ref": "#/definitions/XsollaConfig" },
        "xsollaPaywallConfig": { "description": "xsollaPaywallConfig", "$ref": "#/definitions/XsollaPaywallConfig" },
        "adyenConfig": { "description": "adyenConfig", "$ref": "#/definitions/AdyenConfig" },
        "adyenSandboxConfig": { "description": "adyenSandboxConfig", "$ref": "#/definitions/AdyenConfig" },
        "payPalConfig": { "description": "payPalConfig", "$ref": "#/definitions/PayPalConfig" },
        "payPalSandboxConfig": { "description": "payPalSandboxConfig", "$ref": "#/definitions/PayPalConfig" },
        "stripeConfig": { "description": "stripeConfig", "$ref": "#/definitions/StripeConfig" },
        "stripeSandboxConfig": { "description": "stripeSandboxConfig", "$ref": "#/definitions/StripeConfig" },
        "checkoutConfig": { "description": "checkoutConfig", "$ref": "#/definitions/CheckoutConfig" },
        "checkoutSandboxConfig": { "description": "checkoutSandboxConfig", "$ref": "#/definitions/CheckoutConfig" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "StripeConfig": {
      "type": "object",
      "properties": {
        "publishableKey": { "type": "string", "description": "publishable key, max length is 4096" },
        "secretKey": { "type": "string", "description": "secret key, max length is 4096" },
        "webhookSecret": { "type": "string", "description": "webhook secret max length is 4096" },
        "allowedPaymentMethodTypes": {
          "type": "array",
          "description": "specifying the payment methods that are allowed to create payment intent. ",
          "items": { "type": "string" }
        }
      },
      "description": "A DTO object for updating stripe config."
    },
    "WxPayConfigInfo": {
      "type": "object",
      "properties": {
        "appId": { "type": "string", "description": "wxpay appId" },
        "mchid": { "type": "string", "description": "wxpay mchid" },
        "key": { "type": "string", "description": "wxpay key" },
        "certPath": { "type": "string", "description": "wxpay cert file name" },
        "returnUrl": { "type": "string", "description": "return url" }
      },
      "description": "A DTO object for wxpay config."
    },
    "XsollaConfig": {
      "type": "object",
      "properties": {
        "merchantId": { "type": "integer", "format": "int32", "description": "merchant id" },
        "projectId": { "type": "integer", "format": "int32", "description": "project id" },
        "projectSecretKey": { "type": "string", "description": "project secret key, max length is 4096" },
        "apiKey": { "type": "string", "description": "api key, max length is 4096" },
        "flowCompletionUrl": { "type": "string", "description": "flow completion url, max length is 2000" }
      },
      "description": "A DTO object for updating xsolla config."
    },
    "XsollaPaywallConfig": {
      "type": "object",
      "required": ["device", "showCloseButton", "size", "theme"],
      "properties": {
        "theme": { "type": "string", "description": "theme", "enum": ["DEFAULT", "DARK", "DEFAULT_DARK"] },
        "size": { "type": "string", "description": "size", "enum": ["SMALL", "MEDIUM", "LARGE"] },
        "device": { "type": "string", "description": "device", "enum": ["DESKTOP", "MOBILE"] },
        "showCloseButton": { "type": "boolean", "description": "showCloseButton" }
      }
    },
    "TestResult": {
      "type": "object",
      "required": ["success"],
      "properties": {
        "success": { "type": "boolean", "description": "success" },
        "msg": { "type": "string", "description": "error message" }
      }
    },
    "WxPayConfigRequest": {
      "type": "object",
      "properties": {
        "appId": { "type": "string", "description": "wxpay appId" },
        "mchid": { "type": "string", "description": "wxpay mchid" },
        "key": { "type": "string", "description": "wxpay key" },
        "returnUrl": { "type": "string", "description": "return url" }
      },
      "description": "A DTO object for updating wxpay config."
    },
    "XsollaPaywallConfigRequest": {
      "type": "object",
      "properties": {
        "theme": { "type": "string", "description": "Payment UI theme, DEFAULT for default.", "enum": ["DEFAULT", "DARK", "DEFAULT_DARK"] },
        "size": { "type": "string", "description": "Payment UI size, MEDIUM for default.", "enum": ["SMALL", "MEDIUM", "LARGE"] },
        "device": { "type": "string", "description": "Payment UI device type, DESKTOP for default", "enum": ["DESKTOP", "MOBILE"] },
        "showCloseButton": { "type": "boolean", "description": "Whether to show a Close button in pay station. false by default" }
      }
    },
    "PaymentNotificationInfo": {
      "type": "object",
      "required": [
        "createdAt",
        "id",
        "namespace",
        "notification",
        "notificationSource",
        "notificationType",
        "paymentOrderNo",
        "status",
        "updatedAt"
      ],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "paymentOrderNo": { "type": "string", "description": "payment order No" },
        "externalId": { "type": "string", "description": "external id" },
        "namespace": { "type": "string", "description": "namespace" },
        "notificationType": { "type": "string", "description": "notification type" },
        "notification": { "type": "object", "description": "notification payload" },
        "status": { "type": "string", "description": "status", "enum": ["PROCESSED", "ERROR", "WARN", "IGNORED"] },
        "notificationSource": {
          "type": "string",
          "description": "payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "statusReason": { "type": "string", "description": "status reason" },
        "createdAt": { "type": "string", "format": "date-time", "description": "createdAt" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updatedAt" }
      }
    },
    "PaymentNotificationPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/PaymentNotificationInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "PaymentOrderInfo": {
      "type": "object",
      "required": [
        "channel",
        "createdAt",
        "currency",
        "extOrderNo",
        "namespace",
        "paymentOrderNo",
        "price",
        "sandbox",
        "status",
        "title",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "paymentOrderNo": { "type": "string", "description": "Payment order number" },
        "namespace": { "type": "string", "description": "Payment order namespace" },
        "userId": { "type": "string", "description": "User id" },
        "targetNamespace": {
          "type": "string",
          "description": "The game namespace if it's an external in-game-purchase that resides in publisher namespace"
        },
        "targetUserId": {
          "type": "string",
          "description": "The user id in game namespace if it's an external in-game-purchase that resides in publisher namespace"
        },
        "extOrderNo": { "type": "string", "description": "External order number" },
        "sku": { "type": "string", "description": "optional, unique identity for the item" },
        "extUserId": { "type": "string", "description": "optional, external user id, can be the character id" },
        "sandbox": { "type": "boolean", "description": "isSandbox, indicate if order is sandbox" },
        "price": { "type": "integer", "format": "int32", "description": "Payment order price" },
        "paymentProvider": {
          "type": "string",
          "description": "Payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "paymentMethod": { "type": "string", "description": "Payment method" },
        "region": { "type": "string", "description": "Payment user region" },
        "language": { "type": "string", "description": "Payment user language" },
        "tax": { "type": "integer", "format": "int32", "description": "Payment total tax" },
        "vat": { "type": "integer", "format": "int32", "description": "Payment order VAT" },
        "salesTax": { "type": "integer", "format": "int32", "description": "Payment order sales tax" },
        "paymentProviderFee": { "type": "integer", "format": "int32", "description": "Payment provider fee" },
        "paymentMethodFee": { "type": "integer", "format": "int32", "description": "Payment method fee" },
        "currency": { "description": "Payment order currency info", "$ref": "#/definitions/CurrencySummary" },
        "paymentStationUrl": { "type": "string", "description": "Payment url" },
        "transactions": { "type": "array", "description": "Payment order transactions", "items": { "$ref": "#/definitions/Transaction" } },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "statusReason": { "type": "string", "description": "Payment order status reason" },
        "createdTime": { "type": "string", "format": "date-time", "description": "The time of the order created" },
        "authorisedTime": { "type": "string", "format": "date-time", "description": "The time of the order authorised" },
        "chargedTime": { "type": "string", "format": "date-time", "description": "The time of the order charged" },
        "refundedTime": { "type": "string", "format": "date-time", "description": "The time of the order refunded" },
        "chargebackTime": { "type": "string", "format": "date-time", "description": "The time of the order chargeback time" },
        "chargebackReversedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the order chargeback reversed time"
        },
        "returnUrl": { "type": "string", "description": "The return url if customized" },
        "notifyUrl": { "type": "string", "description": "The notify url if customized" },
        "title": { "type": "string", "description": "Order title" },
        "description": { "type": "string", "description": "Order description" },
        "itemType": {
          "type": "string",
          "description": "Order item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "channel": { "type": "string", "description": "Payment order channel: EXTERNAL or INTERNAL", "enum": ["EXTERNAL", "INTERNAL"] },
        "customParameters": { "type": "object", "description": "User custom parameters", "additionalProperties": { "type": "object" } },
        "subscriptionId": { "type": "string", "description": "subscriptionId, payment token will be saved for recurring payment" },
        "recurringPaymentOrderNo": {
          "type": "string",
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow"
        },
        "charging": {
          "type": "boolean",
          "description": "if charging is true, means user have finished transaction, platform is waiting for payment notification"
        },
        "omitNotification": {
          "type": "boolean",
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox"
        },
        "metadata": { "type": "object", "description": "metadata", "additionalProperties": { "type": "string" } },
        "totalTax": { "type": "integer", "format": "int32", "description": "total tax" },
        "totalPrice": { "type": "integer", "format": "int32", "description": "total price" },
        "subtotalPrice": { "type": "integer", "format": "int32", "description": "subtotal price" },
        "createdAt": { "type": "string", "format": "date-time", "description": "createdAt" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updatedAt" }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "txId": { "type": "string" },
        "amount": { "type": "integer", "format": "int32" },
        "tax": { "type": "integer", "format": "int32" },
        "vat": { "type": "integer", "format": "int32" },
        "salesTax": { "type": "integer", "format": "int32" },
        "paymentProviderFee": { "type": "integer", "format": "int32" },
        "paymentMethodFee": { "type": "integer", "format": "int32" },
        "currency": { "$ref": "#/definitions/CurrencySummary" },
        "type": {
          "type": "string",
          "enum": [
            "AUTHORISATION",
            "CHARGE",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUND",
            "REFUND_FAILED"
          ]
        },
        "status": { "type": "string", "enum": ["FINISHED", "FAILED"] },
        "provider": { "type": "string", "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"] },
        "paymentMethod": { "type": "string" },
        "merchantId": { "type": "string" },
        "extTxId": { "type": "string" },
        "extStatusCode": { "type": "string" },
        "extMessage": { "type": "string" },
        "txEndTime": { "type": "string", "format": "date-time" },
        "additionalData": { "$ref": "#/definitions/AdditionalData" },
        "notified": { "type": "boolean" }
      }
    },
    "PaymentOrderChargeRequest": {
      "type": "object",
      "required": ["paymentProvider"],
      "properties": {
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "paymentMethod": { "type": "string", "description": "payment method" },
        "extTxId": { "type": "string", "description": "external transaction id" }
      }
    },
    "NotificationProcessResult": {
      "type": "object",
      "properties": {
        "status": { "type": "string", "enum": ["PROCESSED", "ERROR", "WARN", "IGNORED"] },
        "code": { "type": "string" },
        "customParam": { "type": "object" },
        "severity": { "type": "integer", "format": "int32" }
      }
    },
    "PaymentOrderNotifySimulation": {
      "type": "object",
      "required": ["currencyCode", "notifyType", "paymentProvider"],
      "properties": {
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "notifyType": { "type": "string", "description": "notify type", "enum": ["CHARGE", "REFUND"] },
        "currencyCode": { "type": "string", "description": "currency code" },
        "amount": { "type": "integer", "format": "int32", "description": "amount" },
        "vat": { "type": "integer", "format": "int32", "description": "vat for xsolla" },
        "salesTax": { "type": "integer", "format": "int32", "description": "salesTax for xsolla" }
      }
    },
    "PaymentOrderChargeStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "charging": { "type": "boolean" }
      }
    },
    "PaymentOrderPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/PaymentOrderInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "PaymentOrder": {
      "type": "object",
      "properties": {
        "rvn": { "type": "integer", "format": "int32" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" },
        "paymentOrderNo": { "type": "string" },
        "namespace": { "type": "string" },
        "userId": { "type": "string" },
        "status": {
          "type": "string",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "sandbox": { "type": "boolean" },
        "extOrderNo": { "type": "string" },
        "title": { "type": "string" },
        "description": { "type": "string" },
        "itemType": {
          "type": "string",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "price": { "type": "integer", "format": "int32" },
        "sku": { "type": "string" },
        "extUserId": { "type": "string" },
        "targetNamespace": { "type": "string" },
        "targetUserId": { "type": "string" },
        "paymentProvider": { "type": "string", "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"] },
        "paymentMethod": { "type": "string" },
        "region": { "type": "string" },
        "language": { "type": "string" },
        "zipCode": { "type": "string" },
        "state": { "type": "string" },
        "tax": { "type": "integer", "format": "int32" },
        "vat": { "type": "integer", "format": "int32" },
        "salesTax": { "type": "integer", "format": "int32" },
        "paymentProviderFee": { "type": "integer", "format": "int32" },
        "paymentMethodFee": { "type": "integer", "format": "int32" },
        "currency": { "$ref": "#/definitions/CurrencySummary" },
        "paymentStationUrl": { "type": "string" },
        "transactions": { "type": "array", "items": { "$ref": "#/definitions/Transaction" } },
        "statusReason": { "type": "string" },
        "createdTime": { "type": "string", "format": "date-time" },
        "chargedTime": { "type": "string", "format": "date-time" },
        "authorisedTime": { "type": "string", "format": "date-time" },
        "refundedTime": { "type": "string", "format": "date-time" },
        "chargebackTime": { "type": "string", "format": "date-time" },
        "chargebackReversedTime": { "type": "string", "format": "date-time" },
        "returnUrl": { "type": "string" },
        "channel": { "type": "string", "enum": ["EXTERNAL", "INTERNAL"] },
        "notifyUrl": { "type": "string" },
        "customParameters": { "type": "object", "additionalProperties": { "type": "object" } },
        "charging": { "type": "boolean" },
        "subscriptionId": { "type": "string" },
        "recurringPaymentOrderNo": { "type": "string" },
        "omitNotification": { "type": "boolean" },
        "platform": { "type": "string" },
        "metadata": { "type": "object", "additionalProperties": { "type": "string" } },
        "totalTax": { "type": "integer", "format": "int32" },
        "totalPrice": { "type": "integer", "format": "int32" },
        "subtotalPrice": { "type": "integer", "format": "int32" }
      }
    },
    "PaymentOrderSyncResult": {
      "type": "object",
      "properties": {
        "paymentOrders": { "type": "array", "items": { "$ref": "#/definitions/PaymentOrder" } },
        "nextEvaluatedKey": { "type": "string" }
      }
    },
    "PaymentProviderConfigInfo": {
      "type": "object",
      "required": ["id", "namespace", "region"],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "region": { "type": "string", "description": "region" },
        "aggregate": { "type": "string", "description": "aggregate payment provider, allow empty value", "enum": ["XSOLLA", "ADYEN"] },
        "specials": {
          "type": "array",
          "description": "special payment providers = ['ALIPAY', 'WXPAY'], allow empty value",
          "items": { "type": "string", "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"] }
        },
        "paymentMerchantConfigId": { "type": "string", "description": "paymentMerchantConfigId" },
        "taxJarEnabled": { "type": "boolean", "description": "taxjar integration enabled" },
        "taxJarApiToken": {
          "type": "string",
          "description": "taxjar api token, required when taxJarEnabled=true and useGlobalTaxJarApiToken=false"
        },
        "sandboxTaxJarApiToken": { "type": "string", "description": "sandbox taxjar api token" },
        "useGlobalTaxJarApiToken": { "type": "boolean", "description": "if use global taxjar token" }
      }
    },
    "PaymentProviderConfigEdit": {
      "type": "object",
      "required": ["namespace", "region"],
      "properties": {
        "namespace": { "type": "string", "description": "namespace, * indicates all namespace" },
        "region": { "type": "string", "description": "region, * indicates all regions" },
        "aggregate": { "type": "string", "description": "aggregate payment provider, allow empty value", "enum": ["XSOLLA", "ADYEN"] },
        "specials": {
          "type": "array",
          "description": "special payment providers = ['ALIPAY', 'WXPAY'], allow empty value",
          "items": { "type": "string", "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"] }
        },
        "taxJarEnabled": { "type": "boolean", "description": "taxjar api integration enable" },
        "taxJarApiToken": {
          "type": "string",
          "description": "taxjar api token, required when taxJarEnabled=true and useGlobalTaxJarApiToken=false"
        },
        "sandboxTaxJarApiToken": { "type": "string", "description": "sandbox taxjar api token" },
        "useGlobalTaxJarApiToken": {
          "type": "boolean",
          "description": "only works when taxJarEnabled=true, and if useGlobalTaxJarApiToken is true, we will reset the taxJarApiToken as null"
        }
      },
      "description": "A DTO object for creating/updating payment provider config"
    },
    "PaymentProviderConfigPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/PaymentProviderConfigInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "PaymentTaxConfigInfo": {
      "type": "object",
      "properties": {
        "taxJarEnabled": { "type": "boolean", "description": "if taxJar integration is enabled" },
        "taxJarApiToken": { "type": "string", "description": "taxJar API token" },
        "sandboxTaxJarApiToken": { "type": "string", "description": "sandbox taxJar API token" },
        "taxJarProductCodesMapping": {
          "type": "object",
          "description": "taxJar product codes mappings",
          "additionalProperties": { "type": "string" }
        }
      }
    },
    "PaymentTaxConfigEdit": {
      "type": "object",
      "properties": {
        "taxJarEnabled": { "type": "boolean", "description": "if taxJar integration is enabled" },
        "taxJarApiToken": { "type": "string", "description": "taxJar API token" },
        "sandboxTaxJarApiToken": { "type": "string", "description": "sandbox taxJar API token" },
        "taxJarProductCodesMapping": {
          "type": "object",
          "description": "taxJar product codes mappings, allow item types: APP, COINS, INGAMEITEM, BUNDLE, CODE, SUBSCRIPTION",
          "additionalProperties": { "type": "string" }
        }
      },
      "description": "A DTO object for updating payment tax config"
    },
    "PaymentOrderCreate": {
      "type": "object",
      "required": ["description", "extOrderNo", "price", "title"],
      "properties": {
        "extOrderNo": { "type": "string", "description": "External order id" },
        "sku": { "type": "string", "description": "optional, unique identity for the item" },
        "extUserId": { "type": "string", "description": "optional, external user id, can be the character id" },
        "price": { "type": "integer", "format": "int32", "description": "Price of order" },
        "title": { "type": "string", "description": "Order title" },
        "description": { "type": "string", "description": "Order desc, max length 2000" },
        "itemType": {
          "type": "string",
          "description": "item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "currencyCode": { "type": "string", "description": "currency code, default is USD" },
        "currencyNamespace": { "type": "string", "description": "currency namespace, default is publisher namespace" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        },
        "sandbox": { "type": "boolean", "description": "TEST PURPOSE, sandbox(Active in real currency mode), default is false" },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        },
        "notifyUrl": {
          "type": "string",
          "description": "custom notify url for real payment, send notification to this url once payment action is finished"
        },
        "customParameters": { "type": "object", "description": "custom parameters", "additionalProperties": { "type": "object" } },
        "subscriptionId": { "type": "string", "description": "subscriptionId, payment token will be saved for recurring payment" },
        "recurringPaymentOrderNo": {
          "type": "string",
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow"
        },
        "omitNotification": {
          "type": "boolean",
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox"
        },
        "metadata": { "type": "object", "description": "metadata", "additionalProperties": { "type": "string" } },
        "platform": { "type": "string", "description": "platform" }
      }
    },
    "PaymentOrderRefund": {
      "type": "object",
      "required": ["description"],
      "properties": { "description": { "type": "string", "description": "order refund description" } }
    },
    "PaymentOrderCreateResult": {
      "type": "object",
      "required": ["createdTime", "namespace", "paymentOrderNo", "status"],
      "properties": {
        "paymentOrderNo": { "type": "string", "description": "Payment order number" },
        "namespace": { "type": "string", "description": "Payment order namespace" },
        "targetNamespace": { "type": "string", "description": "Game namespace" },
        "targetUserId": { "type": "string", "description": "User id in game namespace" },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "paymentStationUrl": { "type": "string", "description": "Payment url" },
        "createdTime": { "type": "string", "format": "date-time", "description": "The time of the order created" }
      }
    },
    "ExternalPaymentOrderCreate": {
      "type": "object",
      "required": ["description", "extOrderNo", "price", "targetNamespace", "targetUserId", "title"],
      "properties": {
        "extOrderNo": { "type": "string", "description": "External order id" },
        "sku": { "type": "string", "description": "optional, unique identity for the item" },
        "extUserId": { "type": "string", "description": "optional, external user id, can be the character id" },
        "price": { "type": "integer", "format": "int32", "description": "Price of order" },
        "title": { "type": "string", "description": "Order title" },
        "description": { "type": "string", "description": "Order desc, max length 2000" },
        "itemType": {
          "type": "string",
          "description": "item type",
          "enum": ["APP", "COINS", "INGAMEITEM", "BUNDLE", "CODE", "SUBSCRIPTION", "SEASON", "MEDIA", "OPTIONBOX", "EXTENSION", "LOOTBOX"]
        },
        "currencyCode": { "type": "string", "description": "currency code, default is USD" },
        "currencyNamespace": { "type": "string", "description": "currency namespace, default is publisher namespace" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        },
        "sandbox": { "type": "boolean", "description": "TEST PURPOSE, sandbox(Active in real currency mode), default is false" },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        },
        "notifyUrl": {
          "type": "string",
          "description": "custom notify url for real payment, send notification to this url once payment action is finished"
        },
        "customParameters": { "type": "object", "description": "custom parameters", "additionalProperties": { "type": "object" } },
        "subscriptionId": { "type": "string", "description": "subscriptionId, payment token will be saved for recurring payment" },
        "recurringPaymentOrderNo": {
          "type": "string",
          "description": "recurring payment order which has recurring token, will do recurring payment if present, otherwise start normal payment flow"
        },
        "omitNotification": {
          "type": "boolean",
          "description": "TEST PURPOSE, if set it will not send async notification to the API invoker, only can set true while this payment is sandbox"
        },
        "metadata": { "type": "object", "description": "metadata", "additionalProperties": { "type": "string" } },
        "platform": { "type": "string", "description": "platform" },
        "targetNamespace": { "type": "string", "description": "The game namespace" },
        "targetUserId": { "type": "string", "description": "The user id in game namespace" }
      }
    },
    "PaymentOrderRefundResult": {
      "type": "object",
      "required": ["createdTime", "namespace", "paymentOrderNo", "status"],
      "properties": {
        "paymentOrderNo": { "type": "string", "description": "Payment order number" },
        "namespace": { "type": "string", "description": "Payment order namespace" },
        "targetNamespace": { "type": "string", "description": "Game namespace" },
        "targetUserId": { "type": "string", "description": "User id in game namespace" },
        "status": {
          "type": "string",
          "description": "Payment order status",
          "enum": [
            "INIT",
            "AUTHORISED",
            "AUTHORISE_FAILED",
            "CHARGED",
            "CHARGE_FAILED",
            "NOTIFICATION_OF_CHARGEBACK",
            "REQUEST_FOR_INFORMATION",
            "CHARGEBACK",
            "CHARGEBACK_REVERSED",
            "REFUNDING",
            "REFUNDED",
            "REFUND_FAILED",
            "DELETED"
          ]
        },
        "createdTime": { "type": "string", "format": "date-time", "description": "The time of the order created" },
        "refundedTime": { "type": "string", "format": "date-time", "description": "The time of the order refunded" }
      }
    },
    "PaymentAccount": {
      "type": "object",
      "required": ["id", "name", "type"],
      "properties": {
        "id": { "type": "string", "description": "Payment account id" },
        "type": { "type": "string", "description": "Payment account type", "enum": ["card", "paypal"] },
        "name": { "type": "string", "description": "Payment account name, generally mask credit card number" }
      }
    },
    "PaymentOrderPaidResult": {
      "type": "object",
      "required": ["charging", "success"],
      "properties": {
        "success": { "type": "boolean", "description": "success" },
        "charging": { "type": "boolean", "description": "charging" }
      }
    },
    "TaxResult": {
      "type": "object",
      "properties": {
        "enableTax": { "type": "boolean", "description": "if enable tax" },
        "tax": { "type": "integer", "format": "int32", "description": "tax" },
        "formattedTax": { "type": "string", "description": "formattedTax" },
        "state": { "type": "string", "description": "state" }
      }
    },
    "PaymentProcessResult": {
      "type": "object",
      "required": ["pending", "success"],
      "properties": {
        "success": { "type": "boolean", "description": "payment request process result" },
        "pending": { "type": "boolean", "description": "payment request process is pending" },
        "redirectUrl": { "type": "string", "description": "redirect url, exists when pending is true" },
        "reason": { "type": "string", "description": "failed reason" }
      }
    },
    "PaymentToken": {
      "type": "object",
      "properties": { "token": { "type": "string", "description": "payment token(for checkout.com, this is card token)" } }
    },
    "PaymentMethod": {
      "type": "object",
      "required": ["name", "paymentProvider"],
      "properties": {
        "name": { "type": "string", "description": "name" },
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        }
      }
    },
    "PaymentOrderDetails": {
      "type": "object",
      "required": ["charging", "currencyCode", "currencySymbol", "price", "sandbox", "title"],
      "properties": {
        "displayName": { "type": "string", "description": "Payment user display name" },
        "title": { "type": "string", "description": "Order title" },
        "description": { "type": "string", "description": "Order description" },
        "price": { "type": "string", "description": "Payment order price" },
        "currencyCode": { "type": "string", "description": "currency code" },
        "currencySymbol": { "type": "string", "description": "currency symbol" },
        "sandbox": { "type": "boolean", "description": "isSandbox, indicate if order is sandbox" },
        "region": { "type": "string", "description": "Payment user region" },
        "charging": { "type": "boolean", "description": "charging" }
      }
    },
    "Customization": { "type": "object", "properties": { "settings": { "type": "string", "description": "settings" } } },
    "PaymentUrl": {
      "type": "object",
      "required": ["paymentProvider", "paymentType"],
      "properties": {
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "paymentUrl": { "type": "string", "description": "payment url" },
        "returnUrl": { "type": "string", "description": "return url" },
        "paymentType": { "type": "string", "description": "payment type", "enum": ["QR_CODE", "LINK"] },
        "sessionId": { "type": "string", "description": "adyen session id" },
        "sessionData": { "type": "string", "description": "adyen session data" }
      }
    },
    "PaymentUrlCreate": {
      "type": "object",
      "required": ["paymentOrderNo", "paymentProvider"],
      "properties": {
        "paymentOrderNo": { "type": "string", "description": "payment order number" },
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "zipCode": { "type": "string", "description": "payment zipCode" },
        "returnUrl": { "type": "string", "description": "returnUrl" },
        "ui": {
          "type": "string",
          "example": "{\"theme\":\"dark\",\"size\":\"medium\",\"version\":\"desktop\",\"desktop\":{\"header\":{\"close_button\": false}}}",
          "description": "ui, custom json string, ignore if payment provider not support or invalid setting."
        }
      }
    },
    "ConsumableEntitlementRevocationConfig": {
      "type": "object",
      "properties": {
        "enabled": { "type": "boolean", "description": "will do revocation if enabled, otherwise will skip do revocation." },
        "strategy": {
          "type": "string",
          "description": "consumable entitlement revocation strategy",
          "enum": ["REVOKE_OR_REPORT", "CUSTOM"]
        }
      }
    },
    "DurableEntitlementRevocationConfig": {
      "type": "object",
      "properties": {
        "enabled": { "type": "boolean", "description": "will do revocation if enabled, otherwise will skip do revocation." },
        "strategy": { "type": "string", "description": "durable entitlement revocation strategy", "enum": ["REVOKE_OR_REPORT", "CUSTOM"] }
      }
    },
    "EntitlementRevocationConfig": {
      "type": "object",
      "properties": {
        "durable": { "description": "durable entitlement revocation config", "$ref": "#/definitions/DurableEntitlementRevocationConfig" },
        "consumable": {
          "description": "consumable entitlement revocation config",
          "$ref": "#/definitions/ConsumableEntitlementRevocationConfig"
        }
      }
    },
    "RevocationConfigInfo": {
      "type": "object",
      "properties": {
        "namespace": { "type": "string" },
        "entitlement": { "$ref": "#/definitions/EntitlementRevocationConfig" },
        "wallet": { "$ref": "#/definitions/WalletRevocationConfig" }
      }
    },
    "WalletRevocationConfig": {
      "type": "object",
      "properties": {
        "enabled": { "type": "boolean", "description": "will do revocation if enabled, otherwise will skip do revocation." },
        "strategy": {
          "type": "string",
          "description": "wallet revocation strategy",
          "enum": ["REVOKE_OR_REPORT", "ALWAYS_REVOKE", "CUSTOM"]
        }
      }
    },
    "RevocationConfigUpdate": {
      "type": "object",
      "properties": {
        "entitlement": { "description": "entitlement revocation config", "$ref": "#/definitions/EntitlementRevocationConfig" },
        "wallet": { "description": "wallet revocation config", "$ref": "#/definitions/WalletRevocationConfig" }
      }
    },
    "RevocationError": {
      "type": "object",
      "properties": {
        "httpStatus": { "type": "integer", "format": "int32", "description": "http status" },
        "code": { "type": "integer", "format": "int32", "description": "error code" },
        "message": { "type": "string", "description": "error message" }
      }
    },
    "RevocationHistoryInfo": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "userId" },
        "meta": { "type": "object", "description": "meta", "additionalProperties": { "type": "object" } },
        "source": { "type": "string", "description": "source" },
        "status": { "type": "string", "description": "status", "enum": ["SUCCESS", "FAIL"] },
        "revokeEntries": { "type": "array", "description": "revoke entries", "items": { "$ref": "#/definitions/RevokeEntry" } },
        "itemRevocations": { "type": "array", "description": "item revocations", "items": { "$ref": "#/definitions/ItemRevocation" } },
        "creditRevocations": {
          "type": "array",
          "description": "credit revocations",
          "items": { "$ref": "#/definitions/CreditRevocation" }
        },
        "entitlementRevocations": {
          "type": "array",
          "description": "entitlement revocations",
          "items": { "$ref": "#/definitions/EntitlementRevocation" }
        },
        "revocationErrors": { "type": "array", "description": "revocation errors", "items": { "$ref": "#/definitions/RevocationError" } },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "transactionId": { "type": "string", "description": "transactionId, Order No, DLC Order No." }
      }
    },
    "RevocationHistoryPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/RevocationHistoryInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "RevokeCurrency": {
      "type": "object",
      "properties": {
        "namespace": { "type": "string", "description": "currency namespace" },
        "currencyCode": { "type": "string", "description": "currency code" },
        "balanceOrigin": {
          "type": "string",
          "description": "balance origin",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
        }
      }
    },
    "RevokeEntitlement": { "type": "object", "properties": { "entitlementId": { "type": "string", "description": "entitlement id" } } },
    "RevokeEntry": {
      "type": "object",
      "properties": {
        "type": { "type": "string", "description": "revoke entry type", "enum": ["ITEM", "CURRENCY", "ENTITLEMENT"] },
        "item": { "description": "revoke item", "$ref": "#/definitions/RevokeItem" },
        "entitlement": { "description": "revoke entitlement", "$ref": "#/definitions/RevokeEntitlement" },
        "currency": { "description": "revoke currency", "$ref": "#/definitions/RevokeCurrency" },
        "quantity": { "type": "integer", "format": "int32", "description": "revoke quantity" }
      }
    },
    "RevokeItem": {
      "type": "object",
      "properties": {
        "itemIdentityType": { "type": "string", "description": "item identity type", "enum": ["ITEM_ID", "ITEM_SKU"] },
        "itemIdentity": { "type": "string", "description": "item identity" },
        "origin": {
          "type": "string",
          "description": "balance origin, it is used to debit the wallet of the specified balance origin, only available in COINS item",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
        }
      }
    },
    "RevocationRequest": {
      "type": "object",
      "properties": {
        "revokeEntries": { "type": "array", "description": "revoke entries", "items": { "$ref": "#/definitions/RevokeEntry" } },
        "source": { "type": "string", "description": "revoke source", "enum": ["DLC", "ORDER", "OTHER"] },
        "transactionId": { "type": "string", "description": "transaction id: DLC Order No, Order No." },
        "meta": {
          "type": "object",
          "description": "source meta info, like DLC transaction id, order no.",
          "additionalProperties": { "type": "object" }
        }
      }
    },
    "RewardCondition": {
      "type": "object",
      "properties": {
        "conditionName": { "type": "string" },
        "condition": { "type": "string" },
        "eventName": { "type": "string" },
        "rewardItems": { "type": "array", "items": { "$ref": "#/definitions/RewardItem" } }
      }
    },
    "RewardInfo": {
      "type": "object",
      "required": ["eventTopic", "namespace", "rewardId"],
      "properties": {
        "rewardId": { "type": "string", "description": "Reward id" },
        "namespace": { "type": "string", "description": "Reward namespace" },
        "rewardCode": { "type": "string", "description": "Reward code" },
        "description": { "type": "string", "description": "Description" },
        "eventTopic": { "type": "string", "description": "event topic to listen to" },
        "rewardConditions": {
          "type": "array",
          "description": "list of reward condition",
          "items": { "$ref": "#/definitions/RewardCondition" }
        },
        "maxAwarded": { "type": "integer", "format": "int32", "description": "Max awarded" },
        "maxAwardedPerUser": { "type": "integer", "format": "int32", "description": "Max awarded per user" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "userIdExpression": {
          "type": "string",
          "description": "The path to get userId from event payload, if not present, will use default value"
        },
        "namespaceExpression": {
          "type": "string",
          "description": " The path to get namespace from event payload, if not present, will use default value"
        }
      }
    },
    "RewardItem": {
      "type": "object",
      "properties": {
        "itemId": { "type": "string" },
        "quantity": { "type": "integer", "format": "int32" },
        "duration": { "type": "integer", "format": "int32" },
        "endDate": { "type": "string", "format": "date-time" }
      }
    },
    "DeleteRewardConditionRequest": {
      "type": "object",
      "properties": { "userId": { "type": "string" }, "conditionName": { "type": "string" } }
    },
    "RewardCreate": {
      "type": "object",
      "required": ["eventTopic", "rewardCode"],
      "properties": {
        "rewardCode": { "type": "string", "description": "Reward code" },
        "description": { "type": "string", "description": "Description" },
        "eventTopic": { "type": "string", "description": "event topic to listen to" },
        "rewardConditions": {
          "type": "array",
          "description": "list of reward condition",
          "items": { "$ref": "#/definitions/RewardCondition" }
        },
        "maxAwarded": { "type": "integer", "format": "int32", "description": "Max awarded" },
        "maxAwardedPerUser": { "type": "integer", "format": "int32", "description": "Max awarded per user" },
        "userIdExpression": {
          "type": "string",
          "description": "The path to get userId from event payload, if not present, will use default value \"$.[0].userId\""
        },
        "namespaceExpression": {
          "type": "string",
          "description": " The path to get namespace from event payload, if not present, will use default value \"$.[0].namespace\""
        }
      }
    },
    "RewardUpdate": {
      "type": "object",
      "required": ["eventTopic", "rewardCode"],
      "properties": {
        "rewardCode": { "type": "string", "description": "rewardCode" },
        "description": { "type": "string", "description": "Description" },
        "eventTopic": { "type": "string", "description": "event topic to listen to" },
        "rewardConditions": {
          "type": "array",
          "description": "list of reward condition",
          "items": { "$ref": "#/definitions/RewardCondition" }
        },
        "maxAwarded": { "type": "integer", "format": "int32", "description": "Max awarded" },
        "maxAwardedPerUser": { "type": "integer", "format": "int32", "description": "Max awarded per user" },
        "userIdExpression": {
          "type": "string",
          "description": "The path to get userId from event payload, if not present, will use default value \"$.[0].userId\""
        },
        "namespaceExpression": {
          "type": "string",
          "description": " The path to get namespace from event payload, if not present, will use default value \"$.[0].namespace\""
        }
      }
    },
    "RewardPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/RewardInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "ConditionMatchResult": {
      "type": "object",
      "properties": {
        "matched": { "type": "boolean" },
        "matchedConditions": { "type": "array", "items": { "type": "object" } },
        "notMatchReason": { "type": "string" }
      }
    },
    "EventPayload": { "type": "object", "properties": { "payload": { "type": "object", "additionalProperties": { "type": "object" } } } },
    "RecurringChargeResult": {
      "type": "object",
      "required": ["triggered"],
      "properties": {
        "triggered": { "type": "boolean", "description": "triggered or not" },
        "code": { "type": "string", "description": "code for fail to trigger" },
        "detail": { "type": "string", "description": "detail for fail to trigger" }
      }
    },
    "BillingAccount": {
      "type": "object",
      "properties": {
        "paymentProvider": {
          "type": "string",
          "description": "payment provider",
          "enum": ["WALLET", "XSOLLA", "ADYEN", "STRIPE", "CHECKOUT", "ALIPAY", "WXPAY", "PAYPAL"]
        },
        "paymentMethod": { "type": "string", "description": "payment method" },
        "additionalData": { "description": "payment addition data", "$ref": "#/definitions/AdditionalData" }
      }
    },
    "SubscriptionInfo": {
      "type": "object",
      "required": [
        "chargeStatus",
        "createdAt",
        "id",
        "inFixedCycleTrial",
        "inFixedFreeDays",
        "itemId",
        "namespace",
        "paymentFlowRequired",
        "recurring",
        "status",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": { "type": "string", "description": "id" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "user id" },
        "itemId": { "type": "string", "description": "item id" },
        "sku": { "type": "string", "description": "sku" },
        "title": { "type": "string", "description": "title" },
        "description": { "type": "string", "description": "description" },
        "currency": { "description": "currency", "$ref": "#/definitions/CurrencySummary" },
        "price": { "type": "integer", "format": "int32", "description": "normal price" },
        "trialPrice": { "type": "integer", "format": "int32", "description": "trial price" },
        "recurring": { "description": "recurring", "$ref": "#/definitions/Recurring" },
        "status": { "type": "string", "description": "status", "enum": ["INIT", "ACTIVE", "CANCELLED", "EXPIRED"] },
        "chargeStatus": {
          "type": "string",
          "description": "charge status",
          "enum": ["NEVER", "SETUP", "RECURRING_CHARGING", "CHARGED", "CHARGE_FAILED"]
        },
        "nextBillingDate": { "type": "string", "format": "date-time", "description": "next billing date" },
        "entitlements": {
          "type": "array",
          "description": "granted entitlement summary",
          "items": { "$ref": "#/definitions/EntitlementSummary" }
        },
        "itemSnapshot": { "description": "item snapshot", "$ref": "#/definitions/ItemSnapshot" },
        "currentPeriodStart": { "type": "string", "format": "date-time", "description": "current period start" },
        "currentPeriodEnd": { "type": "string", "format": "date-time", "description": "current period end" },
        "start": { "type": "string", "format": "date-time", "description": "start date time, it will record the first time subscribed" },
        "end": { "type": "string", "format": "date-time", "description": "end date time if exist, at current it's not used" },
        "currentCycle": { "type": "integer", "format": "int32", "description": "current cycle in" },
        "chargedCycles": { "type": "integer", "format": "int32", "description": "already charged cycles" },
        "trialedCycles": { "type": "integer", "format": "int32", "description": "already trialed cycles if exist fixedCycleTrial" },
        "inFixedFreeDays": { "type": "boolean", "description": "whether in fixed free days" },
        "inFixedCycleTrial": { "type": "boolean", "description": "whether in fixed cycle trial" },
        "firstSubscribe": {
          "type": "boolean",
          "description": "is first subscribe, will enjoy trial if trial available if it's first time subscribe"
        },
        "paid": { "type": "boolean", "description": "whether user paid from the subscription start" },
        "paymentFlowRequired": { "type": "boolean", "description": "whether need to go to payment station for payment" },
        "paymentStationUrl": { "type": "string", "description": "payment station url" },
        "source": { "type": "string", "description": "source" },
        "subscribedBy": {
          "type": "string",
          "description": "subscribed by PLATFORM(system granted) or USER(subscribed by userself)",
          "enum": ["USER", "PLATFORM"]
        },
        "subscribedAt": { "type": "string", "format": "date-time", "description": "subscribed date time" },
        "unsubscribedAt": { "type": "string", "format": "date-time", "description": "unsubscribed date time" },
        "unsubscribeReason": { "type": "string", "description": "unsubscribe reason" },
        "paymentOrderNo": { "type": "string", "description": "current payment order no" },
        "billingAccount": { "description": "saved billing account", "$ref": "#/definitions/BillingAccount" },
        "returnUrl": { "type": "string", "description": "payment returnUrl for payment station" },
        "region": { "type": "string", "description": "created region" },
        "language": { "type": "string", "description": "created language" },
        "sandbox": { "type": "boolean", "description": "is sandbox mode" },
        "retryAttempted": { "type": "integer", "format": "int32", "description": "payment retry attempted" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "SubscriptionPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/SubscriptionInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "CancelRequest": {
      "type": "object",
      "properties": {
        "immediate": { "type": "boolean", "description": "immediate, default false" },
        "reason": { "type": "string", "description": "cancel reason" }
      }
    },
    "BillingHistoryInfo": {
      "type": "object",
      "required": [
        "amount",
        "createdAt",
        "currency",
        "itemId",
        "namespace",
        "paymentOrderNo",
        "recurringOrderNo",
        "sandbox",
        "status",
        "subscriptionId",
        "title",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "recurringOrderNo": { "type": "string", "description": "Recurring order No for this billing" },
        "namespace": { "type": "string", "description": "namespace" },
        "userId": { "type": "string", "description": "user id" },
        "subscriptionId": { "type": "string", "description": "subscription id" },
        "itemId": { "type": "string", "description": "item id" },
        "sku": { "type": "string", "description": "subscription sku" },
        "title": { "type": "string", "description": "subscription title" },
        "description": { "type": "string", "description": "subscription description" },
        "amount": { "type": "integer", "format": "int32", "description": "charge amount" },
        "totalTax": { "type": "integer", "format": "int32", "description": "total tax" },
        "totalPrice": { "type": "integer", "format": "int32", "description": "total price" },
        "subtotalPrice": { "type": "integer", "format": "int32", "description": "subtotal price" },
        "sandbox": { "type": "boolean", "description": "sandbox" },
        "currency": { "description": "currency", "$ref": "#/definitions/CurrencySummary" },
        "paymentOrderNo": { "type": "string", "description": "payment order No" },
        "billingAccount": { "description": "billing account", "$ref": "#/definitions/BillingAccount" },
        "status": {
          "type": "string",
          "description": "billing history status",
          "enum": ["INIT", "CHARGED", "CHARGE_FAILED", "REFUNDED", "REFUND_FAILED"]
        },
        "statusReason": { "type": "string", "description": "status reason" },
        "txEndTime": { "type": "string", "format": "date-time", "description": "transaction end time" },
        "extTxId": { "type": "string", "description": "external transaction id" },
        "changeBillingAccount": { "type": "boolean", "description": "Is this payment for billing account change" },
        "retryAttempted": { "type": "integer", "format": "int32", "description": "Already retry attempted No" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "BillingHistoryPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/BillingHistoryInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "PlatformSubscribeRequest": {
      "type": "object",
      "required": ["grantDays", "itemId"],
      "properties": {
        "itemId": { "type": "string", "description": "subscription item id" },
        "grantDays": { "type": "integer", "format": "int32", "description": "grant days" },
        "source": { "type": "string", "description": "source" },
        "reason": { "type": "string", "description": "subscribe reason" },
        "region": { "type": "string", "description": "region" },
        "language": { "type": "string", "description": "language" }
      }
    },
    "GrantSubscriptionDaysRequest": {
      "type": "object",
      "required": ["grantDays"],
      "properties": {
        "grantDays": { "type": "integer", "format": "int32", "description": "grant days" },
        "reason": { "type": "string", "description": "grant reason" }
      }
    },
    "SubscriptionActivityInfo": {
      "type": "object",
      "required": [
        "action",
        "chargedCycles",
        "createdAt",
        "currentCycle",
        "namespace",
        "operator",
        "subscribedBy",
        "subscriptionId",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "namespace": { "type": "string", "description": "Subscription namespace" },
        "userId": { "type": "string", "description": "Subscription user id" },
        "subscriptionId": { "type": "string", "description": "Subscription id" },
        "operator": { "type": "string", "description": "operator" },
        "action": {
          "type": "string",
          "description": "subscription action",
          "enum": ["SUBSCRIBE", "CANCEL", "IMMEDIATE_CANCEL", "RESUBSCRIBE", "GRANT_DAYS", "CHANGE_BILLING_ACCOUNT"]
        },
        "subscribedBy": { "type": "string", "description": "subscription subscribed by", "enum": ["USER", "PLATFORM"] },
        "currentCycle": { "type": "integer", "format": "int32", "description": "subscription current cycle number" },
        "chargedCycles": { "type": "integer", "format": "int32", "description": "subscription already charged cycle" },
        "trialedCycles": { "type": "integer", "format": "int32", "description": "Subscription already trialed cycles if exist" },
        "inFixedFreeDays": { "type": "boolean", "description": "Subscription in fixed free days or not" },
        "inFixedCycleTrial": { "type": "boolean", "description": "Subscription in fixed cycle trial or not" },
        "reason": { "type": "string", "description": "subscription action reason" },
        "grantDays": { "type": "integer", "format": "int32", "description": "subscription grant days, negative indicates decrease" },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "SubscriptionActivityPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/SubscriptionActivityInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "Subscribable": {
      "type": "object",
      "required": ["subscribable"],
      "properties": { "subscribable": { "type": "boolean", "description": "subscribable" } }
    },
    "SubscribeRequest": {
      "type": "object",
      "required": ["currencyCode", "itemId"],
      "properties": {
        "itemId": { "type": "string", "description": "item id" },
        "currencyCode": { "type": "string", "description": "currency code, should match currency code in item region data" },
        "source": { "type": "string", "description": "subscription source" },
        "region": { "type": "string", "description": "country value from ISO countries" },
        "language": {
          "type": "string",
          "description": "language value from language tag, allowed format: en, en-US.<p>Supported language tag : [RFC5646](https://gist.github.com/msikma/8912e62ed866778ff8cd) and [IETF](https://datahub.io/core/language-codes#resource-ietf-language-tags)</p>"
        },
        "returnUrl": {
          "type": "string",
          "description": "custom return url for real payment, user will be redirected to this url once payment is finished"
        }
      }
    },
    "PlatformWalletConfigInfo": {
      "type": "object",
      "required": ["allowedBalanceOrigins", "namespace", "platform"],
      "properties": {
        "id": { "type": "string", "description": "config id" },
        "platform": { "type": "string", "description": "platform" },
        "namespace": { "type": "string", "description": "namespace" },
        "allowedBalanceOrigins": { "type": "array", "description": "allowed balance origin, sorted list", "items": { "type": "string" } },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" }
      }
    },
    "PlatformWalletConfigUpdate": {
      "type": "object",
      "properties": {
        "allowedBalanceOrigins": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
          }
        }
      },
      "description": "A DTO object for updating item API call."
    },
    "DetailedWalletTransactionInfo": {
      "type": "object",
      "required": ["amount", "createdAt", "currencyCode", "namespace", "operator", "updatedAt", "userId", "walletId"],
      "properties": {
        "walletId": { "type": "string", "description": "wallet id" },
        "amount": { "type": "integer", "format": "int64", "description": "Transaction amount, it is absolute value." },
        "reason": { "type": "string", "description": "Reason of the transaction" },
        "namespace": { "type": "string", "description": "Wallet namespace" },
        "userId": { "type": "string", "description": "Wallet owner's userId" },
        "operator": { "type": "string", "description": "Operator userId or ClientId" },
        "walletAction": {
          "type": "string",
          "description": "Action type, remove expired limited time balance will not have wallet action.",
          "enum": ["CREDIT", "PAYMENT", "DEBIT"]
        },
        "currencyCode": { "type": "string", "description": "Transaction currency code" },
        "balanceSource": { "type": "string", "description": "The source of credit" },
        "createdAt": { "type": "string", "format": "date-time", "description": "Transaction created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Transaction updated time" }
      }
    },
    "DetailedWalletTransactionPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/DetailedWalletTransactionInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "Time-limited balance": {
      "type": "object",
      "properties": {
        "balance": { "type": "integer", "format": "int64", "description": "balance" },
        "balanceSource": { "type": "string", "description": "balance source" },
        "expireAt": { "type": "string", "format": "date-time", "description": "balance expire time" }
      }
    },
    "WalletInfo": {
      "type": "object",
      "required": [
        "balance",
        "balanceOrigin",
        "createdAt",
        "currencyCode",
        "currencySymbol",
        "id",
        "namespace",
        "status",
        "updatedAt",
        "userId"
      ],
      "properties": {
        "id": { "type": "string", "description": "wallet id" },
        "namespace": { "type": "string", "description": "wallet namespace" },
        "userId": { "type": "string", "description": "user id" },
        "currencyCode": { "type": "string", "description": "currency code" },
        "currencySymbol": { "type": "string", "description": "currency symbol" },
        "balance": { "type": "integer", "format": "int64", "description": "total balance, include effective time-limited balance" },
        "balanceOrigin": { "type": "string", "description": "origin of balance" },
        "timeLimitedBalances": {
          "type": "array",
          "description": "time-limited balances info",
          "items": { "$ref": "#/definitions/Time-limited balance" }
        },
        "createdAt": { "type": "string", "format": "date-time", "description": "created at" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "updated at" },
        "totalPermanentBalance": { "type": "integer", "format": "int64", "description": "total permanent balance" },
        "totalTimeLimitedBalance": { "type": "integer", "format": "int64", "description": "total time limited balance" },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE"] }
      }
    },
    "DebitRequest": {
      "type": "object",
      "required": ["amount"],
      "properties": {
        "amount": { "type": "integer", "format": "int64", "description": "amount", "minimum": 1 },
        "reason": { "type": "string", "description": "reason" }
      },
      "description": "A DTO for wallet's debit"
    },
    "DebitByCurrencyCodeRequest": {
      "type": "object",
      "required": ["amount"],
      "properties": {
        "amount": { "type": "integer", "format": "int64", "description": "amount", "minimum": 1 },
        "reason": { "type": "string", "description": "reason" },
        "balanceOrigin": {
          "type": "string",
          "description": "balance origin",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
        },
        "allowOverdraft": { "type": "boolean", "description": "allow to debit wallet balance to negative value" }
      },
      "description": "A DTO for wallet's debit"
    },
    "TransactionAmountDetails": {
      "type": "object",
      "properties": {
        "origin": { "type": "string" },
        "amount": { "type": "integer", "format": "int64" },
        "walletId": { "type": "string" },
        "expireAt": { "type": "string", "format": "date-time" }
      }
    },
    "WalletTransactionInfo": {
      "type": "object",
      "required": ["amount", "createdAt", "currencyCode", "namespace", "operator", "updatedAt", "userId"],
      "properties": {
        "amount": { "type": "integer", "format": "int64", "description": "Transaction amount, it is absolute value." },
        "reason": { "type": "string", "description": "Reason of the transaction" },
        "namespace": { "type": "string", "description": "Wallet namespace" },
        "userId": { "type": "string", "description": "Wallet owner's userId" },
        "operator": { "type": "string", "description": "Operator userId or ClientId" },
        "walletAction": {
          "type": "string",
          "description": "Action type, remove expired limited time balance will not have wallet action.",
          "enum": ["CREDIT", "PAYMENT", "DEBIT"]
        },
        "currencyCode": { "type": "string", "description": "Transaction currency code" },
        "balanceSource": { "type": "string", "description": "The source of credit" },
        "transactionAmountDetails": {
          "type": "array",
          "description": "Transaction amount details",
          "items": { "$ref": "#/definitions/TransactionAmountDetails" }
        },
        "createdAt": { "type": "string", "format": "date-time", "description": "Transaction created time" },
        "updatedAt": { "type": "string", "format": "date-time", "description": "Transaction updated time" }
      }
    },
    "WalletTransactionPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/WalletTransactionInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "CurrencyWallet": {
      "type": "object",
      "required": ["balance", "currencyCode", "currencySymbol", "namespace", "userId"],
      "properties": {
        "namespace": { "type": "string", "description": "wallet namespace" },
        "userId": { "type": "string", "description": "user id" },
        "currencyCode": { "type": "string", "description": "currency code" },
        "currencySymbol": { "type": "string", "description": "currency symbol" },
        "balance": { "type": "integer", "format": "int64", "description": "total balance, include time-limited balance" },
        "walletInfos": { "type": "array", "description": "wallets balances info", "items": { "$ref": "#/definitions/WalletInfo" } },
        "totalPermanentBalance": { "type": "integer", "format": "int64", "description": "total permanent balance" },
        "totalTimeLimitedBalance": { "type": "integer", "format": "int64", "description": "total time limited balance" }
      }
    },
    "CreditRequest": {
      "type": "object",
      "required": ["amount"],
      "properties": {
        "amount": { "type": "integer", "format": "int64", "description": "amount", "minimum": 1 },
        "source": {
          "type": "string",
          "description": "source, purchase for default",
          "enum": [
            "PURCHASE",
            "IAP",
            "PROMOTION",
            "ACHIEVEMENT",
            "REFERRAL_BONUS",
            "REDEEM_CODE",
            "REWARD",
            "GIFT",
            "REFUND",
            "DLC",
            "OTHER",
            "SELL_BACK"
          ]
        },
        "expireAt": {
          "type": "string",
          "format": "date-time",
          "description": "this amount expire time, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        },
        "reason": { "type": "string", "description": "reason, max length is 127" },
        "origin": {
          "type": "string",
          "description": "origin, balance origin decided on the type of wallet, default is System",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Twitch", "Nintendo", "System", "Other"]
        }
      },
      "description": "A DTO for wallet's credit"
    },
    "PlatformWallet": {
      "type": "object",
      "required": ["balance", "currencyCode", "currencySymbol", "namespace", "userId"],
      "properties": {
        "namespace": { "type": "string", "description": "platform wallet namespace" },
        "userId": { "type": "string", "description": "user id" },
        "currencyCode": { "type": "string", "description": "currency code" },
        "currencySymbol": { "type": "string", "description": "currency symbol" },
        "balance": { "type": "integer", "format": "int64", "description": "total balance, include effective time-limited balance" },
        "walletInfos": { "type": "array", "description": "wallets balances info", "items": { "$ref": "#/definitions/WalletInfo" } },
        "walletStatus": {
          "type": "string",
          "description": "wallet status will be deprecated in the feature, pls use status field.",
          "enum": ["ACTIVE", "INACTIVE"]
        },
        "status": { "type": "string", "description": "status", "enum": ["ACTIVE", "INACTIVE"] },
        "id": { "type": "string" }
      }
    },
    "PaymentRequest": {
      "type": "object",
      "required": ["amount"],
      "properties": {
        "amount": { "type": "integer", "format": "int64", "description": "amount", "minimum": 0 },
        "walletPlatform": {
          "type": "string",
          "description": "wallet platform, base on platform wallet rule to payment wallet",
          "enum": ["Playstation", "Xbox", "Steam", "Epic", "IOS", "GooglePlay", "Nintendo", "Other"]
        }
      },
      "description": "A DTO for wallet's payment"
    },
    "BulkCreditResult": {
      "type": "object",
      "properties": {
        "successList": { "type": "array", "items": { "$ref": "#/definitions/CreditResult" } },
        "failList": { "type": "array", "items": { "$ref": "#/definitions/CreditResult" } },
        "status": { "type": "string", "enum": ["SUCCESS", "FAIL", "PARTIAL_SUCCESS"] }
      }
    },
    "CreditResult": {
      "type": "object",
      "properties": {
        "userId": { "type": "string" },
        "currencyCode": { "type": "string" },
        "creditRequest": { "$ref": "#/definitions/CreditRequest" },
        "reason": { "type": "string" }
      }
    },
    "BulkCreditRequest": {
      "type": "object",
      "properties": {
        "currencyCode": { "type": "string" },
        "creditRequest": { "$ref": "#/definitions/CreditRequest" },
        "userIds": { "type": "array", "uniqueItems": true, "items": { "type": "string" } }
      }
    },
    "WalletPagingSlicedResult": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "description": "data", "items": { "$ref": "#/definitions/WalletInfo" } },
        "paging": { "$ref": "#/definitions/Paging" }
      }
    },
    "BulkDebitResult": {
      "type": "object",
      "properties": {
        "successList": { "type": "array", "items": { "$ref": "#/definitions/DebitResult" } },
        "failList": { "type": "array", "items": { "$ref": "#/definitions/DebitResult" } },
        "status": { "type": "string", "enum": ["SUCCESS", "FAIL", "PARTIAL_SUCCESS"] }
      }
    },
    "DebitResult": {
      "type": "object",
      "properties": {
        "userId": { "type": "string" },
        "currencyCode": { "type": "string" },
        "request": { "$ref": "#/definitions/DebitByCurrencyCodeRequest" },
        "reason": { "type": "string" }
      }
    },
    "BulkDebitRequest": {
      "type": "object",
      "properties": {
        "currencyCode": { "type": "string" },
        "request": { "$ref": "#/definitions/DebitByCurrencyCodeRequest" },
        "userIds": { "type": "array", "uniqueItems": true, "items": { "type": "string" } }
      }
    }
  }
}
