{
  "swagger": "2.0",
  "info": {
    "description": "Justice UGC Service",
    "title": "justice-ugc-service",
    "contact": {
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io",
      "email": "engineering@accelbyte.io"
    },
    "version": "2.10.1"
  },
  "paths": {
    "/ugc/v1/admin/namespaces/{namespace}/channels": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Channel"],
        "summary": "Get Channels",
        "operationId": "SingleAdminGetChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetChannelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Channel"],
        "summary": "Create Channel",
        "operationId": "AdminCreateChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ChannelRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Channel"],
        "summary": "Update Channel",
        "operationId": "SingleAdminUpdateChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channelID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateChannelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Channel"],
        "summary": "Delete Channel",
        "operationId": "SingleAdminDeleteChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channelID",
            "name": "channelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents": {
      "post": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.\\n \n\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Upload content to a channel",
        "operationId": "AdminUploadContentDirect",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/s3": {
      "post": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.\n\nAll request body are required except \u003ccode\u003epreview\u003c/code\u003e, \u003ccode\u003etags\u003c/code\u003e, \u003ccode\u003econtentType\u003c/code\u003e, \u003ccode\u003ecustomAttributes\u003c/code\u003e and \u003ccode\u003eshareCode\u003c/code\u003e.\n\n\u003ccode\u003econtentType\u003c/code\u003e values is used to enforce the Content-Type header needed by the client when uploading the content using the S3 presigned URL. If not specified, it will use fileExtension value.\n\n\u003ccode\u003eshareCode\u003c/code\u003e format should follows: \n\nLength: 7\nAvailable characters: abcdefhkpqrstuxyz\n\n\u003cbr\u003e\u003cp\u003e\u003cb\u003eNOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u003c/b\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Upload content to S3 bucket",
        "operationId": "AdminUploadContentS3",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequestS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/s3/{contentId}": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\n\nAll request body are required except \u003ccode\u003epayload\u003c/code\u003e, \u003ccode\u003epreview\u003c/code\u003e, \u003ccode\u003etags\u003c/code\u003e,\u003ccode\u003econtentType\u003c/code\u003e, \u003ccode\u003eupdateContentFile\u003c/code\u003e, \u003ccode\u003ecustomAttributes\u003c/code\u003e and \u003ccode\u003eshareCode\u003c/code\u003e.\n\n\u003ccode\u003econtentType\u003c/code\u003e values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\nIf not specified, it will use \u003ccode\u003efileExtension\u003c/code\u003e value.\n\nTo update content file, set \u003ccode\u003eupdateContentFile\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e and upload the file using URL in \u003ccode\u003epayloadURL.url\u003c/code\u003e in response body.\n\n\u003ccode\u003eshareCode\u003c/code\u003e format should follows:\n\nMax length: 7\nAvailable characters: abcdefhkpqrstuxyz\n\n\u003cbr\u003e\u003cp\u003e\u003cb\u003eNOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u003c/b\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Update content to S3 bucket",
        "operationId": "SingleAdminUpdateContentS3",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminUpdateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/search": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u003c/b\u003e\n\nFor advance tag filtering supports \u0026 as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u003ccode\u003etags=red\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal\u003c/code\u003e\n\n\u003ccode\u003etags=red|animal\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal|wild\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026(animal|wild)\u003c/code\u003e\n\nThe precedence of logical operator is AND \u003e OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u003ccode\u003e_\u003c/code\u003e and dash \u003ccode\u003e-\u003c/code\u003e\n\nAllowed character for operator: \u003ccode\u003e\u0026\u003c/code\u003e \u003ccode\u003e|\u003c/code\u003e \u003ccode\u003e(\u003c/code\u003e \u003ccode\u003e)\u003c/code\u003e\n\n\u003cb\u003ePlease note that value of tags query param should be URL encoded\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Search contents specific to a channel",
        "operationId": "AdminSearchChannelSpecificContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "sorting criteria: name,download,like,date. default=date",
            "name": "sortby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sorting order: asc, desc. default=desc",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "creator name",
            "name": "creator",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content subtype",
            "name": "subtype",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "content tag",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter only official contents (boolean)",
            "name": "isofficial",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/channels/{channelId}/contents/{contentId}": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\\n \n\t\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Update content to a channel",
        "operationId": "SingleAdminUpdateContentDirect",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Delete content",
        "operationId": "SingleAdminDeleteContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Get user's generated contents",
        "operationId": "SingleAdminGetContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/bulk": {
      "post": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u003c/b\u003e.\n\t\t\t\t\t\tMaximum contentId per request 100",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Bulk get content by content IDs",
        "operationId": "AdminGetContentBulk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminGetContentBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ContentDownloadResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/search": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u003c/b\u003e\n\nFor advance tag filtering supports \u0026 as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u003ccode\u003etags=red\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal\u003c/code\u003e\n\n\u003ccode\u003etags=red|animal\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal|wild\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026(animal|wild)\u003c/code\u003e\n\nThe precedence of logical operator is AND \u003e OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u003ccode\u003e_\u003c/code\u003e and dash \u003ccode\u003e-\u003c/code\u003e\n\nAllowed character for operator: \u003ccode\u003e\u0026\u003c/code\u003e \u003ccode\u003e|\u003c/code\u003e \u003ccode\u003e(\u003c/code\u003e \u003ccode\u003e)\u003c/code\u003e\n\n\u003cb\u003ePlease note that value of tags query param should be URL encoded\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Search contents",
        "operationId": "AdminSearchContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "sorting criteria: name,download,like,date. default=date",
            "name": "sortby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sorting order: asc, desc. default=desc",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "creator name",
            "name": "creator",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content subtype",
            "name": "subtype",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "content tag",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter only official contents  (boolean)",
            "name": "isofficial",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/sharecodes/{shareCode}": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Get content by sharecode",
        "operationId": "AdminGetUserContentByShareCode",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content sharecode",
            "name": "shareCode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Get user specific content",
        "operationId": "AdminGetSpecificContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/preview": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]\u003c/b\u003e\u003cp\u003e\u003cb\u003eNOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u003c/b\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Get content preview",
        "operationId": "AdminDownloadContentPreview",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetContentPreviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/screenshots": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\\n \n\t\t\t\t\tMaximum description length: 1024.\n\t\t\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Update screenshot of content",
        "operationId": "AdminUpdateScreenshots",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.\\n \n\t\t\t\tAll request body are required except for contentType field. \n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tSupported file extensions: pjp, jpg, jpeg, jfif, bmp, png. \\n\n\t\t\t\tMaximum description length: 1024.\n\t\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Upload screenshots for content",
        "operationId": "AdminUploadContentScreenshot",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/contents/{contentId}/screenshots/{screenshotId}": {
      "delete": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.\n\t\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Delete screenshots content",
        "operationId": "AdminDeleteContentScreenshot",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "screenshot ID",
            "name": "screenshotId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/groups": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Get all user groups",
        "operationId": "SingleAdminGetAllGroups",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Create groups",
        "operationId": "AdminCreateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/groups/{groupId}": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Get specific user group",
        "operationId": "SingleAdminGetGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "put": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]\n\t\t\t\t\treplace group name and contents with new ones.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Update group",
        "operationId": "SingleAdminUpdateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Delete group",
        "operationId": "SingleAdminDeleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/groups/{groupId}/contents": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Get contents belong to a group",
        "operationId": "SingleAdminGetGroupContents",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/tags": {
      "get": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Tag"],
        "summary": "Get tags",
        "operationId": "AdminGetTag",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTagResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]\n\t\t\t\tcreates a new tag",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Tag"],
        "summary": "Create tags",
        "operationId": "AdminCreateTag",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTagRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateTagResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/tags/{tagId}": {
      "put": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]\n\t\t\t\tupdates a tag",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Tag"],
        "summary": "Update tag",
        "operationId": "AdminUpdateTag",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "tag ID",
            "name": "tagId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTagRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateTagResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Tag"],
        "summary": "Delete tags",
        "operationId": "AdminDeleteTag",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "tag ID",
            "name": "tagId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/types": {
      "get": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [READ]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Type"],
        "summary": "Get types",
        "operationId": "AdminGetType",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTypeResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [CREATE]\n\t\t\tcreates a new type and subtype",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Type"],
        "summary": "Create types",
        "operationId": "AdminCreateType",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTypeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/types/{typeId}": {
      "put": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [UPDATE]\n\t\t\tupdates a type and subtype",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Type"],
        "summary": "Update types",
        "operationId": "AdminUpdateType",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "type ID",
            "name": "typeId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:UGCCONFIG [DELETE]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Type"],
        "summary": "Delete types",
        "operationId": "AdminDeleteType",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "type ID",
            "name": "typeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Channel"],
        "summary": "Get Channels",
        "operationId": "AdminGetChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetChannelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Delete all user channel",
        "operationId": "AdminDeleteAllUserChannels",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Channel"],
        "summary": "Update Channel",
        "operationId": "AdminUpdateChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channelID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateChannelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u003c/b\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Channel"],
        "summary": "Delete Channel",
        "operationId": "AdminDeleteChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channelID",
            "name": "channelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/s3/{contentId}": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\n\nAll request body are required except \u003ccode\u003epayload\u003c/code\u003e, \u003ccode\u003epreview\u003c/code\u003e, \u003ccode\u003etags\u003c/code\u003e,\u003ccode\u003econtentType\u003c/code\u003e, \u003ccode\u003eupdateContentFile\u003c/code\u003e, \u003ccode\u003ecustomAttributes\u003c/code\u003e and \u003ccode\u003eshareCode\u003c/code\u003e.\n\n\u003ccode\u003econtentType\u003c/code\u003e values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\nIf not specified, it will use \u003ccode\u003efileExtension\u003c/code\u003e value.\n\nTo update content file, set \u003ccode\u003eupdateContentFile\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e and upload the file using URL in \u003ccode\u003epayloadURL.url\u003c/code\u003e in response body.\n\n\u003ccode\u003eshareCode\u003c/code\u003e format should follows:\n\nMax length: 7\nAvailable characters: abcdefhkpqrstuxyz\n\n\u003cbr\u003e\u003cp\u003e\u003cb\u003eNOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u003c/b\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Update content to S3 bucket",
        "operationId": "AdminUpdateContentS3",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminUpdateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\\n \n\t\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Update content to a channel",
        "operationId": "AdminUpdateContentDirect",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Delete content",
        "operationId": "AdminDeleteContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/contents": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Get user's generated contents",
        "operationId": "AdminGetContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Delete all user content",
        "operationId": "AdminDeleteAllUserContents",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/contents/{contentId}/hide": {
      "put": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content"],
        "summary": "Hide/Unhide user's generated contents",
        "operationId": "AdminHideUserContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.HideContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/groups": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Get all user groups",
        "operationId": "AdminGetAllGroups",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Delete all user group",
        "operationId": "AdminDeleteAllUserGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/groups/{groupId}": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Get specific user group",
        "operationId": "AdminGetGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "put": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]\n\t\t\t\t\treplace group name and contents with new ones.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Update group",
        "operationId": "AdminUpdateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Delete group",
        "operationId": "AdminDeleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/groups/{groupId}/contents": {
      "get": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Group"],
        "summary": "Get contents belong to a group",
        "operationId": "AdminGetGroupContents",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/admin/namespaces/{namespace}/users/{userId}/states": {
      "delete": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Remove all user related state: likes, downloads, followers, following",
        "operationId": "AdminDeleteAllUserStates",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/channels/{channelId}/contents": {
      "get": {
        "description": "Requires valid user token.\n\nFor advance tag filtering supports \u0026 as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u003ccode\u003etags=red\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal\u003c/code\u003e\n\n\u003ccode\u003etags=red|animal\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal|wild\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026(animal|wild)\u003c/code\u003e\n\nThe precedence of logical operator is AND \u003e OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u003ccode\u003e_\u003c/code\u003e and dash \u003ccode\u003e-\u003c/code\u003e\n\nAllowed character for operator: \u003ccode\u003e\u0026\u003c/code\u003e \u003ccode\u003e|\u003c/code\u003e \u003ccode\u003e(\u003c/code\u003e \u003ccode\u003e)\u003c/code\u003e\n\n\u003cb\u003ePlease note that value of tags query param should be URL encoded\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Search contents specific to a channel",
        "operationId": "SearchChannelSpecificContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "sorting criteria: name,download,like,date. default=date",
            "name": "sortby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sorting order: asc, desc. default=desc",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "creator name",
            "name": "creator",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content subtype",
            "name": "subtype",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "content tag",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter only official contents (boolean)",
            "name": "isofficial",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token.\n\nFor advance tag filtering supports \u0026 as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u003ccode\u003etags=red\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal\u003c/code\u003e\n\n\u003ccode\u003etags=red|animal\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal|wild\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026(animal|wild)\u003c/code\u003e\n\nThe precedence of logical operator is AND \u003e OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u003ccode\u003e_\u003c/code\u003e and dash \u003ccode\u003e-\u003c/code\u003e\n\nAllowed character for operator: \u003ccode\u003e\u0026\u003c/code\u003e \u003ccode\u003e|\u003c/code\u003e \u003ccode\u003e(\u003c/code\u003e \u003ccode\u003e)\u003c/code\u003e\n\n\u003cb\u003ePlease note that value of tags query param should be URL encoded\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Search contents",
        "operationId": "PublicSearchContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "sorting criteria: name,download,like,date. default=date",
            "name": "sortby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sorting order: asc, desc. default=desc",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "creator name",
            "name": "creator",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content subtype",
            "name": "subtype",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "content tag",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter only official contents (boolean)",
            "name": "isofficial",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/bulk": {
      "post": {
        "description": "Maximum requested Ids: 100.\n\t\t\tPublic user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Get contents by content Ids ",
        "operationId": "PublicGetContentBulk",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicGetContentBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ContentDownloadResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/followed": {
      "get": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Follow"],
        "summary": "Get contents from followed creators",
        "operationId": "GetFollowedContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/liked": {
      "get": {
        "description": "Requires valid user token.\n\nFor advance tag filtering supports \u0026 as AND operator and | as OR operator and parentheses () for priority. e.g: \n\n\u003ccode\u003etags=red\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal\u003c/code\u003e\n\n\u003ccode\u003etags=red|animal\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026animal|wild\u003c/code\u003e\n\n\u003ccode\u003etags=red\u0026(animal|wild)\u003c/code\u003e\n\nThe precedence of logical operator is AND \u003e OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u003ccode\u003e_\u003c/code\u003e and dash \u003ccode\u003e-\u003c/code\u003e\n\nAllowed character for operator: \u003ccode\u003e\u0026\u003c/code\u003e \u003ccode\u003e|\u003c/code\u003e \u003ccode\u003e(\u003c/code\u003e \u003ccode\u003e)\u003c/code\u003e\n\n\u003cb\u003ePlease note that value of tags query param should be URL encoded\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Like (Legacy)"],
        "summary": "Get liked contents",
        "operationId": "GetLikedContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "tags",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "string",
            "description": "content name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "subtype",
            "name": "subtype",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "filter content by official or community",
            "name": "isofficial",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sorting criteria: name,download,like,date. default=date",
            "name": "sortby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sorting order: asc, desc. default=desc",
            "name": "orderby",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/sharecodes/{shareCode}": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Get content by sharecode",
        "operationId": "PublicDownloadContentByShareCode",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content sharecode",
            "name": "shareCode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Get user specific content",
        "operationId": "PublicDownloadContentByContentID",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}/downloadcount": {
      "post": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Download Count (Legacy)"],
        "summary": "Add unique download count to a content",
        "operationId": "AddDownloadCount",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AddDownloadCountResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}/like": {
      "put": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Like (Legacy)"],
        "summary": "Update like/unlike status to a content",
        "operationId": "UpdateContentLikeStatus",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ContentLikeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentLikeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/contents/{contentId}/preview": {
      "get": {
        "description": "\u003cp\u003eRequires valid user token\u003c/p\u003e\u003cp\u003e\u003cb\u003eNOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u003c/b\u003e\u003c/p\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Get content preview",
        "operationId": "PublicDownloadContentPreview",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetContentPreviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/tags": {
      "get": {
        "description": "Publicly accessible",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Tag"],
        "summary": "Get tags",
        "operationId": "GetTag",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTagResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/types": {
      "get": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Type"],
        "summary": "Get types",
        "operationId": "GetType",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetTypeResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Creator"],
        "summary": "Search creator",
        "operationId": "PublicSearchCreator",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "sorting criteria: followCount, totalLikedContent. default=object id",
            "name": "sortby",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sorting order: asc, desc. default=desc",
            "name": "orderby",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/followed": {
      "get": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Follow"],
        "summary": "Get followed creators",
        "operationId": "GetFollowedUsers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of user per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Creator"],
        "summary": "Get creator stats: number of total like by other user, number of total following and follower user",
        "operationId": "PublicGetCreator",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreatorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels": {
      "get": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CHANNEL [READ]\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Channel"],
        "summary": "Get Channels",
        "operationId": "GetChannels",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGetChannelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CHANNEL [CREATE]\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Channel"],
        "summary": "Create Channel",
        "operationId": "PublicCreateChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicChannelRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Delete all user channel",
        "operationId": "DeleteAllUserChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}": {
      "put": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CHANNEL [UPDATE]\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Channel"],
        "summary": "Update Channel",
        "operationId": "UpdateChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channelID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateChannelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CHANNEL [DELETE]\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Channel"],
        "summary": "Delete Channel",
        "operationId": "DeleteChannel",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channelID",
            "name": "channelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents": {
      "post": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.\\n \n\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Upload content to a channel",
        "operationId": "CreateContentDirect",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/s3": {
      "post": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.\\n \n\t\t\t\tAll request body are required except payload, preview, tags, contentType and customAttributes.\n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\t\u003cbr\u003e\u003cp\u003e\u003cb\u003eNOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u003c/b\u003e\u003c/p\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Upload content to S3 bucket",
        "operationId": "CreateContentS3",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicCreateContentRequestS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/s3/{contentId}": {
      "put": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\n\t\t\t\tAll request body are required except payload, preview, tags, contentType, updateContentFile and customAttributes.\n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the S3 presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tTo update content's file, set \u003ccode\u003eupdateContentFile\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e and upload the file using URL in \u003ccode\u003epayloadURL.url\u003c/code\u003e in response body. \n\t\t\t\t\u003cbr\u003e\u003cp\u003e\u003cb\u003eNOTE: Preview is Legacy Code, please use Screenshot for better solution to display preview of a content\u003c/b\u003e\u003c/p\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Update content to S3 bucket",
        "operationId": "UpdateContentS3",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}": {
      "put": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\\n \n\t\t\t\tAll request body are required except preview, tags and customAttributes.\n\t\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Update content to a channel",
        "operationId": "UpdateContentDirect",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Delete content",
        "operationId": "DeleteContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/contents": {
      "get": {
        "description": "Public user can access without token or if token specified, required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Get user's generated contents",
        "operationId": "PublicGetUserContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Delete all user content",
        "operationId": "DeleteAllUserContents",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/contents/{contentId}/screenshots": {
      "put": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.\\n \n\t\t\t\t\tMaximum description length: 1024.\n\t\t\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Update screenshot of content",
        "operationId": "UpdateScreenshots",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.\\n \n\t\t\t\tAll request body are required except for contentType field. \n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tSupported file extensions: pjp, jpg, jpeg, jfif, bmp, png. \\n\n\t\t\t\tMaximum description length: 1024.\n\t\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Upload screenshots for content",
        "operationId": "UploadContentScreenshot",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/contents/{contentId}/screenshots/{screenshotId}": {
      "delete": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.\n\t\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content (Legacy)"],
        "summary": "Delete screenshots content",
        "operationId": "DeleteContentScreenshot",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "screenshot ID",
            "name": "screenshotId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/follow": {
      "put": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Follow"],
        "summary": "Update follow/unfollow status to a user",
        "operationId": "UpdateUserFollowStatus",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID to be followed",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UserFollowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserFollowResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/followers": {
      "get": {
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Follow"],
        "summary": "Get list of followers",
        "operationId": "GetPublicFollowers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of user per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/following": {
      "get": {
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Follow"],
        "summary": "Get list of following",
        "operationId": "GetPublicFollowing",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of user per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedCreatorOverviewResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/groups": {
      "get": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Group"],
        "summary": "Get all user groups",
        "operationId": "GetGroups",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [CREATE]",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Group"],
        "summary": "Create groups",
        "operationId": "CreateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Delete all user group",
        "operationId": "DeleteAllUserGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/groups/{groupId}": {
      "get": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [READ]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Group"],
        "summary": "Get user's groups",
        "operationId": "GetGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "put": {
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [UPDATE]\n\t\t\t\treplace group name and contents with new ones",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Group"],
        "summary": "Update group",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.CreateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}:CONTENTGROUP [DELETE]",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Group"],
        "summary": "Delete group",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/groups/{groupId}/contents": {
      "get": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Group"],
        "summary": "Get contents belong to a group",
        "operationId": "GetGroupContent",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "group ID",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v1/public/namespaces/{namespace}/users/{userId}/states": {
      "delete": {
        "description": "Required permission NAMESPACE:{namespace}:USER:{userId}\" [DELETE]",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["Anonymization"],
        "summary": "Remove all user related state: likes, downloads, followers, following",
        "operationId": "DeleteAllUserStates",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/admin/namespaces/{namespace}/channels/{channelId}/contents": {
      "post": {
        "description": "Required permission \u003cb\u003eADMIN:NAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["[Admin] Content V2"],
        "summary": "Create a content",
        "operationId": "AdminCreateContentV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AdminContentRequestV2"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponseV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/channels/{channelId}/contents": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "List contents specific to a channel",
        "operationId": "PublicGetContentByChannelID",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponseV2"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/contents": {
      "get": {
        "description": "\nFor advance tag filtering supports \u0026 as AND operator and | as OR operator and parentheses () for priority. e.g:\n\n\u003ccode\u003etags=red\u003c/code\u003e\n\u003ccode\u003etags=red\u0026animal\u003c/code\u003e\n\u003ccode\u003etags=red|animal\u003c/code\u003e\n\u003ccode\u003etags=red\u0026animal|wild\u003c/code\u003e\n\u003ccode\u003etags=red\u0026(animal|wild)\u003c/code\u003e\n\nThe precedence of logical operator is AND \u003e OR, so if no parentheses, AND logical operator will be executed first.\n\nAllowed character for operand: alphanumeric, underscore \u003ccode\u003e_\u003c/code\u003e and dash \u003ccode\u003e-\u003c/code\u003e\nAllowed character for operator: \u003ccode\u003e\u0026\u003c/code\u003e \u003ccode\u003e|\u003c/code\u003e \u003ccode\u003e(\u003c/code\u003e \u003ccode\u003e)\u003c/code\u003e\n\n\u003cb\u003ePlease note that value of tags query param should be URL encoded\u003c/b\u003e",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "List contents",
        "operationId": "PublicListContentV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "filter by content name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter by content type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter by content subType",
            "name": "subType",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "content tag",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "default value: createdTime:desc. \n\navailable value:\n\u003cul\u003e\n\u003cli\u003ecreatedTime, createdTime:desc, createdTime:asc\u003c/li\u003e\n\u003cli\u003edownload, download:desc, download:asc\u003c/li\u003e\n\u003cli\u003elike, like:desc, like:asc\u003c/li\u003e\n\u003cli\u003ename, name:desc, name:asc\u003c/li\u003e\n\u003c/ul\u003e",
            "name": "sortBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponseV2"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/contents/bulk": {
      "post": {
        "description": "Maximum requested Ids: 100.\n\t\t\tPublic user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Get contents by content Ids ",
        "operationId": "PublicBulkGetContentByIDV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicGetContentBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ContentDownloadResponseV2"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/contents/sharecodes/{shareCode}": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Get content by sharecode",
        "operationId": "PublicGetContentByShareCodeV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content sharecode",
            "name": "shareCode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponseV2"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/contents/{contentId}": {
      "get": {
        "description": "Public user can access without token or if token specified, requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Get content by content ID",
        "operationId": "PublicGetContentByIDV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponseV2"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/contents/{contentId}/downloadcount": {
      "post": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Download Count V2"],
        "summary": "Add unique download count to a content",
        "operationId": "AddDownloadCountV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AddDownloadCountResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/contents/{contentId}/downloader": {
      "get": {
        "description": "This endpoint will only display the list of users who performed add download count from v2 endpoint.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Download Count V2"],
        "summary": "List content downloader",
        "operationId": "ListContentDownloader",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "default": "createdTime:desc",
            "description": "default value: createdTime:desc. \n\navailable value:\n\u003cul\u003e\n\u003cli\u003ecreatedTime, createdTime:desc, createdTime:asc\u003c/li\u003e\n\u003c/ul\u003e",
            "name": "sortBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloaderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/contents/{contentId}/like": {
      "get": {
        "description": "This endpoint will only display the list of users who performed like from v2 endpoint.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Like V2"],
        "summary": "Retrieve list of user that like specified content.",
        "operationId": "ListContentLike",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 20,
            "description": "maximum result of data",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "default": "createdTime:desc",
            "description": "default value: createdTime:desc. \n\navailable value:\n\u003cul\u003e\n\u003cli\u003ecreatedTime, createdTime:desc, createdTime:asc\u003c/li\u003e\n\u003c/ul\u003e",
            "name": "sortBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentLikersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "put": {
        "description": "Requires valid user token",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Like V2"],
        "summary": "Update like/unlike status to a content",
        "operationId": "UpdateContentLikeStatusV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ContentLikeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentLikeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents": {
      "post": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Create a content",
        "operationId": "PublicCreateContentV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ContentRequestV2"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateContentResponseV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}": {
      "delete": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Delete content",
        "operationId": "PublicDeleteContentV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "patch": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Update content",
        "operationId": "PublicUpdateContentV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateContentRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ContentDownloadResponseV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/users/{userId}/channels/{channelId}/contents/{contentId}/uploadUrl": {
      "patch": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Generate content upload URL",
        "operationId": "PublicGenerateContentUploadURL",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "channel ID",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GenerateContentUploadURLRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GenerateContentUploadURLResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/users/{userId}/contents": {
      "get": {
        "description": "Public user can access without token or if token specified, required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [READ]\u003c/b\u003e.",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Get content by user ID",
        "operationId": "PublicGetContentByUserIDV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "number of content per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "the offset number to retrieve",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedContentDownloadResponseV2"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/users/{userId}/contents/{contentId}/screenshots": {
      "put": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [UPDATE]\u003c/b\u003e. \n\t\t\t\t\tMaximum description length: 1024.\n\t\t\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Update screenshot of content",
        "operationId": "UpdateScreenshotsV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UpdateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      },
      "post": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [CREATE]\u003c/b\u003e. \n\t\t\t\tAll request body are required except for contentType field. \n\t\t\t\tcontentType values is used to enforce the Content-Type header needed by the client to upload the content using the presigned URL.\n\t\t\t\tIf not specified, it will use fileExtension value.\n\t\t\t\tSupported file extensions: pjp, jpg, jpeg, jfif, bmp, png.\n\t\t\t\tMaximum description length: 1024.\n\t\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Upload screenshots for content",
        "operationId": "UploadContentScreenshotV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.CreateScreenshotResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/ugc/v2/public/namespaces/{namespace}/users/{userId}/contents/{contentId}/screenshots/{screenshotId}": {
      "delete": {
        "description": "Required permission \u003cb\u003eNAMESPACE:{namespace}:USER:{userId}:CONTENT [DELETE]\u003c/b\u003e.\n\t\t\t\t",
        "consumes": ["application/json", "application/octet-stream"],
        "produces": ["application/json"],
        "tags": ["[Public] Content V2"],
        "summary": "Delete screenshots content",
        "operationId": "DeleteContentScreenshotV2",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of the game",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "content ID",
            "name": "contentId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "screenshot ID",
            "name": "screenshotId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "models.AddDownloadCountResponse": {
      "required": ["contentId"],
      "properties": {
        "contentId": {
          "type": "string"
        }
      }
    },
    "models.AdminContentRequestV2": {
      "required": ["name"],
      "properties": {
        "contentType": {
          "description": "S3 content type",
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.AdminGetContentBulkRequest": {
      "required": ["contentIds"],
      "properties": {
        "contentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.AdminUpdateContentRequest": {
      "required": ["name", "type", "subType", "preview", "tags", "payload", "fileExtension", "contentType", "updateContentFile"],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updateContentFile": {
          "type": "boolean"
        }
      }
    },
    "models.ChannelRequest": {
      "required": ["name"],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.ChannelResponse": {
      "required": ["id", "namespace", "userId", "name"],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.ContentDownloadResponse": {
      "required": [
        "createdTime",
        "id",
        "namespace",
        "channelId",
        "userId",
        "name",
        "type",
        "subType",
        "shareCode",
        "creatorName",
        "isHidden",
        "isOfficial",
        "tags",
        "likeCount",
        "creatorFollowState",
        "downloadCount",
        "fileExtension",
        "updatedTime"
      ],
      "properties": {
        "channelId": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "creatorFollowState": {
          "$ref": "#/definitions/models.CreatorFollowState"
        },
        "creatorName": {
          "description": "Creator Name is deprecated",
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "downloadCount": {
          "type": "integer",
          "format": "int32"
        },
        "fileExtension": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "isHidden": {
          "type": "boolean"
        },
        "isOfficial": {
          "type": "boolean"
        },
        "likeCount": {
          "type": "integer",
          "format": "int32"
        },
        "likeState": {
          "$ref": "#/definitions/models.LikeState"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "payloadURL": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PayloadURL"
          }
        },
        "previewURL": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PreviewURL"
          }
        },
        "screenshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ScreenshotResponse"
          }
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updatedTime": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.ContentDownloadResponseV2": {
      "required": [
        "createdTime",
        "id",
        "namespace",
        "channelId",
        "userId",
        "name",
        "shareCode",
        "isHidden",
        "isOfficial",
        "tags",
        "likeCount",
        "creatorFollowState",
        "downloadCount"
      ],
      "properties": {
        "channelId": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "creatorFollowState": {
          "$ref": "#/definitions/models.CreatorFollowState"
        },
        "customAttributes": {
          "type": "object"
        },
        "downloadCount": {
          "type": "integer",
          "format": "int32"
        },
        "fileExtension": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "isHidden": {
          "type": "boolean"
        },
        "isOfficial": {
          "type": "boolean"
        },
        "likeCount": {
          "type": "integer",
          "format": "int32"
        },
        "likeState": {
          "$ref": "#/definitions/models.LikeState"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "payloadURL": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PayloadURL"
          }
        },
        "screenshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ScreenshotResponse"
          }
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updatedTime": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.ContentDownloaderResponse": {
      "required": ["namespace", "contentId", "downloadedBy", "createdTime"],
      "properties": {
        "contentId": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time"
        },
        "downloadedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "models.ContentLikeRequest": {
      "required": ["likeStatus"],
      "properties": {
        "likeStatus": {
          "type": "boolean"
        }
      }
    },
    "models.ContentLikeResponse": {
      "required": ["contentId", "likeStatus"],
      "properties": {
        "contentId": {
          "type": "string"
        },
        "likeStatus": {
          "type": "boolean"
        }
      }
    },
    "models.ContentLikersResponse": {
      "required": ["namespace", "contentId", "likedBy", "createdTime"],
      "properties": {
        "contentId": {
          "type": "string"
        },
        "createdTime": {
          "type": "string",
          "format": "date-time"
        },
        "likedBy": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "models.ContentRequestV2": {
      "required": ["name"],
      "properties": {
        "contentType": {
          "description": "S3 content type",
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.CreateContentRequest": {
      "required": ["subType", "preview", "tags", "name", "type", "payload"],
      "properties": {
        "customAttributes": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.CreateContentRequestS3": {
      "required": ["tags", "name", "type", "subType", "preview"],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.CreateContentResponse": {
      "required": [
        "createdTime",
        "id",
        "namespace",
        "parentNamespace",
        "channelId",
        "userId",
        "name",
        "type",
        "subType",
        "shareCode",
        "creatorName",
        "isOfficial",
        "isHidden",
        "preview",
        "tags",
        "fileExtension",
        "updatedTime"
      ],
      "properties": {
        "channelId": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "creatorName": {
          "description": "Creator Name is deprecated",
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isHidden": {
          "type": "boolean"
        },
        "isOfficial": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "payloadURL": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PayloadURL"
          }
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewURL": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PreviewURL"
          }
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updatedTime": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.CreateContentResponseV2": {
      "required": [
        "createdTime",
        "id",
        "namespace",
        "parentNamespace",
        "channelId",
        "userId",
        "name",
        "shareCode",
        "isOfficial",
        "isHidden",
        "tags"
      ],
      "properties": {
        "channelId": {
          "type": "string"
        },
        "contentType": {
          "description": "S3 content type",
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isHidden": {
          "type": "boolean"
        },
        "isOfficial": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "payloadURL": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PayloadURL"
          }
        },
        "shareCode": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updatedTime": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.CreateGroupRequest": {
      "required": ["name", "contents"],
      "properties": {
        "contents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.CreateGroupResponse": {
      "required": ["id", "userId", "namespace", "parentNamespace", "name", "createdAt", "contents"],
      "properties": {
        "contents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.CreateScreenshotRequest": {
      "required": ["screenshots"],
      "properties": {
        "screenshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.createScreenshotRequest"
          }
        }
      }
    },
    "models.CreateScreenshotResponse": {
      "required": ["screenshots"],
      "properties": {
        "screenshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ScreenshotResponse"
          }
        }
      }
    },
    "models.CreateTagRequest": {
      "required": ["tag"],
      "properties": {
        "tag": {
          "type": "string"
        }
      }
    },
    "models.CreateTagResponse": {
      "required": ["id", "namespace", "tag"],
      "properties": {
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "models.CreateTypeRequest": {
      "required": ["type", "subtype"],
      "properties": {
        "subtype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.CreateTypeResponse": {
      "required": ["id", "namespace", "parentNamespace", "type", "subtype"],
      "properties": {
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "subtype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.CreatorFollowState": {
      "required": ["userId", "state"],
      "properties": {
        "state": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.CreatorOverviewResponse": {
      "required": ["id", "namespace", "parentNamespace", "followCount", "followingCount", "totalLikedContent"],
      "properties": {
        "followCount": {
          "description": "Number of followers",
          "type": "integer",
          "format": "int32"
        },
        "followingCount": {
          "description": "Number of following",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "totalLikedContent": {
          "description": "Total all other user's like to creator content",
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.CreatorResponse": {
      "required": ["id", "namespace", "parentNamespace", "followCount", "followingCount", "totalLikedContent", "creatorFollowState"],
      "properties": {
        "creatorFollowState": {
          "$ref": "#/definitions/models.CreatorFollowState"
        },
        "followCount": {
          "description": "Number of followers",
          "type": "integer",
          "format": "int32"
        },
        "followingCount": {
          "description": "Number of following",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "totalLikedContent": {
          "description": "Total all other user's like to creator content",
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.GenerateContentUploadURLRequest": {
      "properties": {
        "contentType": {
          "description": "S3 content type",
          "type": "string"
        },
        "fileExtension": {
          "type": "string"
        }
      }
    },
    "models.GenerateContentUploadURLResponse": {
      "required": ["url"],
      "properties": {
        "contentType": {
          "description": "S3 content type",
          "type": "string"
        },
        "fileExtension": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "models.GetContentPreviewResponse": {
      "required": ["preview"],
      "properties": {
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewURL": {
          "$ref": "#/definitions/models.PreviewURL"
        }
      }
    },
    "models.HideContentRequest": {
      "required": ["isHidden"],
      "properties": {
        "isHidden": {
          "type": "boolean"
        }
      }
    },
    "models.LikeState": {
      "required": ["userId", "state"],
      "properties": {
        "state": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.PaginatedContentDownloadResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ContentDownloadResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedContentDownloadResponseV2": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ContentDownloadResponseV2"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedContentDownloaderResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ContentDownloaderResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedContentLikersResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ContentLikersResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedCreatorOverviewResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.CreatorOverviewResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedGetChannelResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ChannelResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedGetTagResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.CreateTagResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedGetTypeResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.CreateTypeResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PaginatedGroupResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.CreateGroupResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.PagingCursor"
        }
      }
    },
    "models.PagingCursor": {
      "required": ["next", "previous", "first", "last"],
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "models.PayloadURL": {
      "required": ["source", "url"],
      "properties": {
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "models.PreviewURL": {
      "properties": {
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "models.PublicChannelRequest": {
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "models.PublicCreateContentRequestS3": {
      "required": ["name", "type", "subType", "preview", "tags"],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.PublicGetContentBulkRequest": {
      "required": ["contentIds"],
      "properties": {
        "contentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.ScreenshotResponse": {
      "required": ["screenshotId", "source", "url", "description", "fileExtension"],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fileExtension": {
          "type": "string"
        },
        "screenshotId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "models.UpdateChannelRequest": {
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "models.UpdateContentRequest": {
      "required": ["preview", "tags", "name", "type", "subType", "payload", "fileExtension", "contentType", "updateContentFile"],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "customAttributes": {
          "type": "object"
        },
        "fileExtension": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updateContentFile": {
          "type": "boolean"
        }
      }
    },
    "models.UpdateContentRequestV2": {
      "properties": {
        "customAttributes": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.UpdateScreenshotRequest": {
      "required": ["screenshots"],
      "properties": {
        "screenshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.updateScreenshot"
          }
        }
      }
    },
    "models.UpdateScreenshotResponse": {
      "required": ["screenshots"],
      "properties": {
        "screenshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.updateScreenshot"
          }
        }
      }
    },
    "models.UserFollowRequest": {
      "required": ["followStatus"],
      "properties": {
        "followStatus": {
          "type": "boolean"
        }
      }
    },
    "models.UserFollowResponse": {
      "required": ["userId", "followStatus"],
      "properties": {
        "followStatus": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.contentRequest": {
      "required": ["name", "type", "subType", "preview", "tags"],
      "properties": {
        "customAttributes": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "preview": {
          "description": "Preview is legacy code, please use Screenshot instead",
          "type": "string"
        },
        "previewMetadata": {
          "$ref": "#/definitions/models.previewMetadata"
        },
        "subType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.createScreenshotRequest": {
      "required": ["description", "fileExtension", "contentType"],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fileExtension": {
          "type": "string",
          "enum": ["pjp", "jpg", "jpeg", "jfif", "bmp", "png"]
        }
      }
    },
    "models.previewMetadata": {
      "required": ["previewFileExtension", "previewContentType"],
      "properties": {
        "previewContentType": {
          "type": "string"
        },
        "previewFileExtension": {
          "type": "string"
        }
      }
    },
    "models.updateScreenshot": {
      "required": ["screenshotId", "description"],
      "properties": {
        "description": {
          "type": "string"
        },
        "screenshotId": {
          "type": "string"
        }
      }
    },
    "response.Error": {
      "required": ["errorCode", "errorMessage"],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "authorization": []
    }
  ]
}
