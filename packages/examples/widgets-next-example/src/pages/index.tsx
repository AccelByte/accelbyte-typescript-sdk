/*
 * Copyright (c) 2023 AccelByte Inc. All Rights Reserved
 * This is licensed software from AccelByte Inc, for limitations
 * and restrictions contact your company contract manager.
 */

import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { RouteUtils, SdkWidget, SingleInGameItemsStore, SingleGameStoreWrapper, BundleStore, StoreWidget } from '@accelbyte/widgets-v2'
import '@accelbyte/widgets-v2/dist/style.css'
import React, { useMemo } from 'react'

import styles from '~/styles/Home.module.css'
import Link from 'next/link'
import { useRouter } from 'next/router'

const inter = Inter({ subsets: ['latin'] })
const routes = RouteUtils.createWidgetRoutes({})

const WidgetLink = (props: any) => {
  return <Link {...props} href={props.to} />
}

export default function Home() {
  const router = useRouter()

  const location = useMemo(() => {
    return {
      pathname: router.pathname,
      search: new URLSearchParams(router.query as Record<string, string>).toString(),
      state: undefined,
      key: '',
      hash: ''
    }
  }, [router.pathname, router.query])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>src/pages/index.tsx</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer">
              By <Image src="/vercel.svg" alt="Vercel Logo" className={styles.vercelLogo} width={100} height={24} priority />
            </a>
          </div>
        </div>

        <div style={{ height: '100%', width: '100%' }}>
          <SdkWidget
            sdkOptions={{
              baseURL: 'http://localhost:3030/api',
              clientId: '77f88506b6174c3ea4d925f5b4096ce8',
              namespace: 'accelbyte',
              redirectURI: 'http://localhost:3030'
            }}
            Link={WidgetLink}
            NavLink={WidgetLink}
            history={{
              // This is to support remix with a dynamic base path and make it similar to any other application.
              // We need to remove the base path from location.pathname and add the base path when navigating.
              location,
              push: to => router.push(to),
              replace: to => router.replace(to)
            }}
            onInitializeSDK={sdk => console.info('initialized', sdk)}
            routes={routes}>
            <StoreWidget>
              {({ isSingleGame }) => {
                return <StoreSection isSingleGame={isSingleGame} />
              }}
            </StoreWidget>
          </SdkWidget>
        </div>
      </main>
    </>
  )
}

// Components.
function StoreSection(props: { isSingleGame: boolean }) {
  const router = useRouter()

  if (props.isSingleGame) {
    return (
      <SingleGameStoreWrapper>
        {storeProps => {
          return <SingleInGameItemsStore {...storeProps} />
        }}
      </SingleGameStoreWrapper>
    )
  }

  const page = router.query.page ? Number(router.query.page) : 1
  return <BundleStore page={page} />
}
