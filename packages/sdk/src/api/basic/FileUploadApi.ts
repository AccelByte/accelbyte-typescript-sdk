/*
 * Copyright (c) 2022 AccelByte Inc. All Rights Reserved
 * This is licensed software from AccelByte Inc, for limitations
 * and restrictions contact your company contract manager.
 */
import { SDKRequestConfig } from '@accelbyte/sdk/AccelbyteSDK'
import { FileUpload$ } from '@accelbyte/sdk/generated-public/basic/FileUpload$'
import { Network } from '@accelbyte/sdk/utils/Network'
import { Validate } from '@accelbyte/sdk/utils/Validate'
import { z } from 'zod'

export class FileUploadApi {
  /**
   * @internal
   */
  constructor(private readonly conf: SDKRequestConfig, private readonly namespace: string) {}

  /**
   * Generate an upload URL. It's valid for 10 minutes.<br/>Other detail info: <ul><li><i>Required permission</i>: resource = <b>"NAMESPACE:{namespace}:FILEUPLOAD"</b>, action=1 <b>(CREATE)</b></li><li><i>Action code</i>: 11101</li><li><i>Returns</i>: URL data</li></ul>
   */
  generateFolderUploadFileUrl = ({
    folder,
    queryParams
  }: {
    folder: string
    queryParams: Parameters<FileUpload$['postV1FoldersByFolderFiles']>[1]
  }) => {
    return this.newInstance().postV1FoldersByFolderFiles(folder, queryParams)
  }

  /**
   * Upload the file based on the URL generated by the `generateFolderUploadFileUrl` method
   */
  uploadFile = (fileInfo: { url: string; contentType: string }, file: File) => {
    const axios = Network.create({
      ...this.conf,
      headers: { 'Content-Type': fileInfo.contentType }
    })
    return Validate.responseType(() => axios.put(fileInfo.url, file), z.string())
  }

  private newInstance() {
    return new FileUpload$(Network.create(this.conf), this.namespace, false)
  }
}
