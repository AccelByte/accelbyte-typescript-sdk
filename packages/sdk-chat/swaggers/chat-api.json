{
  "swagger": "2.0",
  "info": {
    "description": "Justice Chat Service",
    "title": "justice-chat-service",
    "version": "dev"
  },
  "paths": {
    "/chat": {
      "get": {
        "description": "This endpoint need valid user access token. No specific permission is required. Upgrade connection to websocket upon successful request.",
        "tags": ["chat"],
        "summary": "Connect to chat server",
        "operationId": "connect",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/chats": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t<br>get chat history in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get chat history",
        "operationId": "adminChatHistory",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "chat ID of chat",
            "name": "chatId",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "start date",
            "name": "startCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "end date",
            "name": "endCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "shard id",
            "name": "shardId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "keyword containing in message",
            "name": "keyword",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sender user ID",
            "name": "senderUserId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "anyof: createdAt:asc / createdAt:desc",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChatMessageWithPaginationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t<br>get chat list of topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get list of topic",
        "operationId": "adminTopicList",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "PERSONAL or GROUP",
            "name": "topicType",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.TopicResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [CREATE]</code> with scope <code>social</code>\n\t\t\t<br>create new group topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "Use to create group. Only group admin can use this operation",
        "operationId": "adminCreateTopic",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.CreateTopicParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/api.CreateTopicResponse"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/channel": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t<br>get channel chat list of topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get list of channel topic",
        "operationId": "adminChannelTopicList",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name",
            "name": "topicName",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelTopicWithPaginationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/channel/summary": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t\t<br>get chat list of topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get channel topic summary",
        "operationId": "adminChannelTopicSummary",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelTopicSummaryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/log": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t<br>get chat log of topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin query topic log",
        "operationId": "adminQueryTopicLog",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topicId",
            "name": "topicId",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "topicIds",
            "name": "topicIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "userId",
            "name": "userId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "senderUserId (actor, can be admin or the user itself)",
            "name": "senderUserId",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "start date",
            "name": "startCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "end date",
            "name": "endCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "default: 1000",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.TopicLogWithPaginationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}": {
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>update group topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "Use to update group information. Only group admin can use this operation",
        "operationId": "adminUpdateTopic",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.UpdateTopicParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/api.CreateTopicResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [DELETE]</code> with scope <code>social</code>\n\t\t\t<br>delete topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "Use to delete group. Only group admin can use this operation",
        "operationId": "adminDeleteTopic",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/message.ActionDeleteTopicResult"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/ban-members": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>ban users in some topic. banned user not assigned to shard for channel topic, and cannot send and query chat.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admins ban user in group topic",
        "operationId": "adminBanTopicMembers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.BanTopicMemberParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.BanTopicMemberResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/channel": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t\t<br>get chat list of topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get channel topic detail",
        "operationId": "adminChannelTopicInfo",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID",
            "name": "topic",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChannelTopicResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/chats": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t<br>get chat history in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get chat history",
        "operationId": "adminTopicChatHistory",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "start date",
            "name": "startCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "end date",
            "name": "endCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "shard id",
            "name": "shardId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "keyword containing in message",
            "name": "keyword",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sender user ID",
            "name": "senderUserId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "anyof: createdAt:asc / createdAt:desc",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChatMessageWithPaginationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>send message to chat topic as system.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admins send chat to group topic",
        "operationId": "adminSendChat",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.SendChatParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ChatMessageResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/chats/{chatId}": {
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [DELETE]</code> with scope <code>social</code>\n\t\t\t\t<br>Delete chat.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admins delete chat",
        "operationId": "adminDeleteChat",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID of the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "chat ID od the chat",
            "name": "chatId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/members": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t<br>get topic members.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get topic member",
        "operationId": "adminTopicMembers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "shard ID",
            "name": "shardId",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "only show moderator member",
            "name": "isModerator",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "only show banned member",
            "name": "isBanned",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.TopicMemberWithPaginationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/shards": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t<br>get shard list from topic.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin get shard list of topic",
        "operationId": "adminTopicShards",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID",
            "name": "topic",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/unban-members": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>unban users in some topic.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admins unban user in group topic",
        "operationId": "adminUnbanTopicMembers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UnbanTopicMemberParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UnbanTopicMemberResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topic/{topic}/user/{userId}": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>add new member for topic in a namespace.",
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin add user to topic",
        "operationId": "adminAddTopicMember",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that will added user to",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID that will be added to topic",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.AddMemberParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/message.ActionAddUserToTopicResult"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>remove member from topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin remove user from topic",
        "operationId": "adminRemoveTopicMember",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that will removed user from",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user ID that will be removed from topic",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/message.ActionAddUserToTopicResult"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/topics": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t<br>get topics in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin query topics",
        "operationId": "adminQueryTopic",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "topic",
            "name": "topic",
            "in": "query"
          },
          {
            "type": "string",
            "description": "userId",
            "name": "userId",
            "in": "query"
          },
          {
            "enum": ["PERSONAL", "GROUP"],
            "type": "string",
            "description": "topicType",
            "name": "topicType",
            "in": "query"
          },
          {
            "enum": ["NORMAL", "PARTY", "SESSION", "CLAN"],
            "type": "string",
            "description": "topicSubType",
            "name": "topicSubType",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "include topic's members",
            "name": "includeMembers",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "include past members (user that had left topic)",
            "name": "includePastMembers",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "include topic that has been removed.<br/><b>NOTE:</b> only soft deleted topics are available",
            "name": "includePastTopics",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "default: 100",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.TopicInfo"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/namespaces/{namespace}/users/{userId}/topics": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> with scope <code>social</code>\n\t\t\t\t<br>get user's topics in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "admin query user's topics",
        "operationId": "adminQueryUsersTopic",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userId",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "enum": ["PERSONAL", "GROUP"],
            "type": "string",
            "description": "topicType",
            "name": "topicType",
            "in": "query"
          },
          {
            "enum": ["NORMAL", "PARTY", "SESSION", "CLAN"],
            "type": "string",
            "description": "topicSubType",
            "name": "topicSubType",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "when true will include topics that user already left",
            "name": "includePastTopics",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "default: 100",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.TopicLogWithPaginationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/admin/version": {
      "get": {
        "operationId": "extendedVersionHandler",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chat/healthz": {
      "get": {
        "operationId": "HealthCheckHandler",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/muted": {
      "get": {
        "description": "get chat muted topics in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public get muted at topics",
        "operationId": "publicGetMutedTopics",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api.MutedTopicResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/topic": {
      "get": {
        "description": "get chat list of topic in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public get list of topic",
        "operationId": "publicTopicList",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "PERSONAL or GROUP",
            "name": "topicType",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ChatMessageResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/topic/{topic}/ban-members": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>ban topic members in a group topic.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public ban topic members in a group topic",
        "operationId": "publicBanTopicMembers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicBanTopicMembersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/models.PublicBanTopicMembersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/topic/{topic}/chats": {
      "get": {
        "description": "get chat history in a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public get chat history",
        "operationId": "publicChatHistory",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID that receive the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "lastChatCreatedAt",
            "name": "startCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "anyof: createdAt:asc / createdAt:desc",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ChatMessageResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/topic/{topic}/chats/{chatId}": {
      "delete": {
        "description": "Required group permission : <code>NAMESPACE:{namespace}:CHAT:TOPIC [DELETE]</code> with scope <code>social</code>\n\t\t\t\t<br>Delete chat.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public delete chat",
        "operationId": "publicDeleteChat",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID of the chat",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "chat ID od the chat",
            "name": "chatId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/topic/{topic}/mute": {
      "put": {
        "description": "Required group permission : <code>NAMESPACE:{namespace}:CHAT:TOPIC [DELETE]</code> with scope <code>social</code>\n\t\t\t\t<br>Mute user.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public mute user in a topic",
        "operationId": "publicMuteUser",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "description": "Duration is in seconds",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.MuteUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/topic/{topic}/unban-members": {
      "post": {
        "description": "Required permission : <code>NAMESPACE:{namespace}:CHAT:TOPIC [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>unban topic members in a group topic.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public unban topic members in a group topic",
        "operationId": "publicUnbanTopicMembers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PublicUnbanTopicMembersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/models.PublicUnbanTopicMembersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/public/namespaces/{namespace}/topic/{topic}/unmute": {
      "put": {
        "description": "Required group permission : <code>NAMESPACE:{namespace}:CHAT:TOPIC [DELETE]</code> with scope <code>social</code>\n\t\t\t\t<br>Unmute user.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["topic"],
        "summary": "public unmute user in a topic",
        "operationId": "publicUnmuteUser",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic ID",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "description": "Duration is in seconds",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.UnmuteUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/readiness": {
      "get": {
        "operationId": "ReadinessCheckHandler",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chat/v1/admin/config": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:*:CHAT:CONFIG [READ]</code> with scope <code>social</code>\n\t\t\t<br>get chat config of all namespaces.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["config"],
        "summary": "admin get all namespaces config",
        "operationId": "adminGetAllConfigV1",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/config/namespaces/{namespace}": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:CONFIG [READ]</code> with scope <code>social</code>\n\t\t\t<br>get chat config of a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["config"],
        "summary": "admin get namespace config",
        "operationId": "adminGetConfigV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "put": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:CONFIG [UPDATE]</code> with scope <code>social</code>\n\t\t\t<br>update chat config of a namespace.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["config"],
        "summary": "admin update namespace config",
        "operationId": "adminUpdateConfigV1",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "chat config",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ConfigRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/config/namespaces/{namespace}/export": {
      "get": {
        "description": "\n\t\t\t\tRequired permission ADMIN:NAMESPACE:{namespace}:CHAT:CONFIG [READ]\n\n\t\t\t\tRequired Scope: social\n\n\t\t\t\tExport chat configuration to a json file. The file can then be imported from the /import endpoint. \n\t\t\t",
        "tags": ["config"],
        "summary": "Export chat config to a json file.",
        "operationId": "ExportConfig",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.ConfigExport"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/chat/v1/admin/config/namespaces/{namespace}/import": {
      "post": {
        "description": "\n\t\t\t\tRequired permission ADMIN:NAMESPACE:{namespace}:CHAT:CONFIG [UPDATE]\n\n\t\t\t\tRequired Scope: social\n\n\t\t\t\tImport config configuration from file. The existing configuration will be replaced.\n\t\t\t\tThe json file to import can be obtained from the /export endpoint. \n\t\t\t",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["config"],
        "summary": "Import chat config from a json file.",
        "operationId": "ImportConfig",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "file to be imported",
            "name": "file",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ImportConfigResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/response.Error"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/categories": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:CATEGORY [READ]</code> with scope <code>inbox</code><br>get inbox categories.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin get inbox categories",
        "operationId": "adminGetInboxCategories",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.GetInboxCategoriesResponseItem"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:CATEGORY [CREATE]</code> with scope <code>inbox</code><br>add inbox category.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "add inbox category",
        "operationId": "adminAddInboxCategory",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.AddInboxCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.AddInboxCategoryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/categories/{category}": {
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:CATEGORY [DELETE]</code> with scope <code>inbox</code><br>delete inbox category.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin delete inbox category",
        "operationId": "adminDeleteInboxCategory",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "category",
            "name": "category",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "patch": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:CATEGORY [UPDATE]</code> with scope <code>inbox</code><br>update inbox category.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin update inbox category",
        "operationId": "adminUpdateInboxCategory",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "category",
            "name": "category",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateInboxCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/categories/{category}/schema.json": {
      "get": {
        "description": "Required permission : valid audience.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin get category schema",
        "operationId": "adminGetCategorySchema",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "category",
            "name": "category",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.JSONSchemaType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/message/{messageId}": {
      "delete": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [DELETE]</code> with scope <code>inbox</code><br>delete inbox message.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin delete inbox message",
        "operationId": "adminDeleteInboxMessage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "message",
            "name": "messageId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "only for testing purposes, to force delete data",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/messages": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [READ]</code> with scope <code>inbox</code><br>get inbox messages.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin get inbox messages",
        "operationId": "adminGetInboxMessages",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "message ids",
            "name": "messageId",
            "in": "query"
          },
          {
            "enum": ["DRAFT", "SENT", "UNSENT"],
            "type": "string",
            "description": "message status",
            "name": "status",
            "in": "query"
          },
          {
            "enum": ["NAMESPACE", "USER"],
            "type": "string",
            "description": "message scope",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "start created at",
            "name": "startCreatedAt",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "end created at",
            "name": "endCreatedAt",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "active only",
            "name": "activeOnly",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "transient message filter",
            "name": "transient",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "anyof: createdAt:asc / createdAt:desc",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetInboxMessagesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [CREATE]</code> with scope <code>inbox</code><br>save inbox message.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin save inbox message",
        "operationId": "adminSaveInboxMessage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.SaveInboxMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.SaveInboxMessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/messages/{inbox}/unsend": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [UPDATE]</code> with scope <code>inbox</code><br>unsend inbox message.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin unsend inbox message",
        "operationId": "adminUnsendInboxMessage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "message",
            "name": "inbox",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UnsendInboxMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UnsendInboxMessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/messages/{inbox}/users": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [READ]</code> with scope <code>inbox</code><br>get inbox users.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin get inbox users",
        "operationId": "adminGetInboxUsers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "message id",
            "name": "inbox",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "userId",
            "name": "userId",
            "in": "query"
          },
          {
            "enum": ["READ", "UNREAD"],
            "type": "string",
            "description": "message status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetInboxUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/messages/{messageId}": {
      "patch": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [UPDATE]</code> with scope <code>inbox</code><br>update inbox message.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin update inbox message",
        "operationId": "adminUpdateInboxMessage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "message",
            "name": "messageId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateInboxMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/messages/{messageId}/send": {
      "post": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [UPDATE]</code> with scope <code>inbox</code><br>send inbox message.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin send inbox message",
        "operationId": "adminSendInboxMessage",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "message",
            "name": "messageId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.SendInboxMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.SendInboxMessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/inbox/namespaces/{namespace}/stats": {
      "get": {
        "description": "Required permission : <code>ADMIN:NAMESPACE:{namespace}:CHAT:INBOX [READ]</code> with scope <code>inbox</code><br>get inbox stats.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["inbox"],
        "summary": "admin get inbox stats",
        "operationId": "adminGetInboxStats",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "message ids",
            "name": "messageId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.GetInboxStatsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/namespaces/{namespace}/snapshot/{chatId}": {
      "get": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:TOPIC [READ]</code> <br>Get the chat snapshot",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["moderation"],
        "summary": "admin get chat snapshot",
        "operationId": "adminGetChatSnapshot",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the chat",
            "name": "chatId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChatSnapshots"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:TOPIC [DELETE]</code> <br>Delete the chat snapshot",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["moderation"],
        "summary": "admin delete chat snapshot",
        "operationId": "adminDeleteChatSnapshot",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the chat",
            "name": "chatId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/profanity/namespaces/{namespace}/dictionary": {
      "get": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:PROFANITY [READ]</code> <br>Query all profanity words.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["profanity"],
        "summary": "admin query profanity words",
        "operationId": "adminProfanityQuery",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "type of the word: PROFANITY, FALSEPOSITIVE, FALSENEGATIVE",
            "name": "wordType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "parent ID of the word",
            "name": "parentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "word start with",
            "name": "startWith",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "include false positives and false negatives",
            "name": "includeChildren",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter mask",
            "name": "filterMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.DictionaryQueryResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "post": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:PROFANITY [CREATE]</code> <br>Insert new word for profanity censor",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["profanity"],
        "summary": "admin insert new profanity words",
        "operationId": "adminProfanityCreate",
        "parameters": [
          {
            "description": "insert request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DictionaryInsertRequest"
            }
          },
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.Dictionary"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/profanity/namespaces/{namespace}/dictionary/bulk": {
      "post": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:PROFANITY [CREATE]</code> <br>Bulk insert new word for profanity censor",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["profanity"],
        "summary": "admin bulk insert new profanity words",
        "operationId": "adminProfanityCreateBulk",
        "parameters": [
          {
            "description": "insert request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DictionaryInsertBulkRequest"
            }
          },
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/models.Dictionary"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/profanity/namespaces/{namespace}/dictionary/group": {
      "get": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:PROFANITY [READ]</code> <br>Get profanity words group.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["profanity"],
        "summary": "admin get profanity words group",
        "operationId": "adminProfanityGroup",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "default: 100",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/models.DictionaryGroup"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/admin/profanity/namespaces/{namespace}/dictionary/{id}": {
      "put": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:PROFANITY [UPDATE]</code> <br>Update profanity word",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["profanity"],
        "summary": "admin update profanity word",
        "operationId": "adminProfanityUpdate",
        "parameters": [
          {
            "description": "update request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.DictionaryUpdateRequest"
            }
          },
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the dictionary",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.Dictionary"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission : <code> ADMIN:NAMESPACE:{namepace}:CHAT:PROFANITY [DELETE]</code> <br>Delete profanity words.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["profanity"],
        "summary": "admin delete profanity words",
        "operationId": "adminProfanityDelete",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the dictionary",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/messages": {
      "get": {
        "description": "get the list of messages.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "get service messages",
        "operationId": "publicGetMessages",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/log.AppMessageDeclaration"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/v1/public/namespaces/{namespace}/topic/{topic}/snapshot/{chatId}": {
      "get": {
        "description": "Required group permission : <code> NAMESPACE:{namespace}:CHAT:TOPIC [READ]</code> <br>Get the chat snapshot",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["moderation"],
        "summary": "public get chat snapshot",
        "operationId": "publicGetChatSnapshot",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "topic",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the chat",
            "name": "chatId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ChatSnapshots"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/restapi.ErrorResponseBody"
            }
          }
        }
      }
    },
    "/chat/version": {
      "get": {
        "operationId": "versionHandler",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "api.AddMemberParams": {
      "required": ["isAdmin"],
      "properties": {
        "isAdmin": {
          "type": "boolean"
        }
      }
    },
    "api.CreateTopicParams": {
      "required": ["name", "description", "type", "isJoinable", "isChannel", "members", "admins"],
      "properties": {
        "admins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "isChannel": {
          "type": "boolean"
        },
        "isJoinable": {
          "type": "boolean"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "shardLimit": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "api.CreateTopicResponse": {
      "required": ["namespace", "description", "topicId", "name", "type", "isJoinable", "isChannel", "createdAt", "createdBy"],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isChannel": {
          "type": "boolean"
        },
        "isJoinable": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "topicId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "api.MuteUserRequest": {
      "required": ["userId", "duration"],
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "api.MutedTopicResponse": {
      "required": ["topicId", "expirationTime", "remainingTime"],
      "properties": {
        "expirationTime": {
          "type": "integer",
          "format": "int64"
        },
        "remainingTime": {
          "type": "integer",
          "format": "int64"
        },
        "topicId": {
          "type": "string"
        }
      }
    },
    "api.SendChatParams": {
      "required": ["message"],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "api.UnmuteUserRequest": {
      "required": ["userId"],
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "api.UpdateTopicParams": {
      "required": ["name", "description", "isJoinable"],
      "properties": {
        "description": {
          "type": "string"
        },
        "isJoinable": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "log.AppMessageDeclaration": {
      "required": ["Code", "CodeName", "Text", "Attributes", "Section", "Service"],
      "properties": {
        "Attributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Code": {
          "type": "string"
        },
        "CodeName": {
          "type": "string"
        },
        "Section": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      }
    },
    "message.ActionAddUserToTopicResult": {
      "required": ["processed", "topicId", "userId"],
      "properties": {
        "processed": {
          "type": "integer",
          "format": "int64"
        },
        "topicId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "message.ActionDeleteTopicResult": {
      "required": ["processed", "topicId"],
      "properties": {
        "processed": {
          "type": "integer",
          "format": "int64"
        },
        "topicId": {
          "type": "string"
        }
      }
    },
    "models.AddInboxCategoryRequest": {
      "required": ["name", "expiresIn", "sendNotification", "saveInbox", "enabled"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64"
        },
        "hook": {
          "$ref": "#/definitions/models.CategoryHook"
        },
        "jsonSchema": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "saveInbox": {
          "type": "boolean"
        },
        "sendNotification": {
          "type": "boolean"
        }
      }
    },
    "models.AddInboxCategoryResponse": {
      "required": ["name", "hook", "expiresIn", "sendNotification", "saveInbox", "enabled"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64"
        },
        "hook": {
          "$ref": "#/definitions/models.CategoryHook"
        },
        "jsonSchema": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "saveInbox": {
          "type": "boolean"
        },
        "sendNotification": {
          "type": "boolean"
        }
      }
    },
    "models.BanTopicMemberParam": {
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.BanTopicMemberResult": {
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.CategoryHook": {
      "required": ["driver", "params"],
      "properties": {
        "driver": {
          "type": "string",
          "enum": ["KAFKA"]
        },
        "params": {
          "type": "string"
        }
      }
    },
    "models.ChannelTopicResponse": {
      "required": [
        "namespace",
        "description",
        "topicId",
        "name",
        "createdAt",
        "createdBy",
        "shardLimit",
        "shardNumber",
        "totalMember",
        "isJoinable",
        "messagePerMinutes"
      ],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isJoinable": {
          "type": "boolean"
        },
        "messagePerMinutes": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "shardLimit": {
          "type": "integer",
          "format": "int32"
        },
        "shardNumber": {
          "type": "integer",
          "format": "int32"
        },
        "topicId": {
          "type": "string"
        },
        "totalMember": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.ChannelTopicSummaryResponse": {
      "required": ["totalChannel", "totalShard"],
      "properties": {
        "totalChannel": {
          "type": "integer",
          "format": "int32"
        },
        "totalShard": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.ChannelTopicWithPaginationResponse": {
      "required": ["data", "paging", "totalData"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ChannelTopicResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        },
        "totalData": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.ChatMessageResponse": {
      "required": ["id", "from", "topicId", "message", "receivedAt", "readAt"],
      "properties": {
        "from": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "readAt": {
          "type": "integer",
          "format": "int64"
        },
        "receivedAt": {
          "type": "integer",
          "format": "int64"
        },
        "topicId": {
          "type": "string"
        }
      }
    },
    "models.ChatMessageWithPaginationResponse": {
      "required": ["data", "paging", "totalData"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ChatMessageResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        },
        "totalData": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.ChatSnapshotMessage": {
      "required": ["chatId", "senderId", "message", "createdAt"],
      "properties": {
        "chatId": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "senderId": {
          "type": "string"
        }
      }
    },
    "models.ChatSnapshots": {
      "required": ["chatId", "topicId", "ticketId", "namespace", "senderId", "createdAt", "messages", "joinedTopics"],
      "properties": {
        "chatId": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "joinedTopics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.ChatSnapshotMessage"
          }
        },
        "namespace": {
          "type": "string"
        },
        "senderId": {
          "type": "string"
        },
        "ticketId": {
          "type": "string"
        },
        "topicId": {
          "type": "string"
        }
      }
    },
    "models.Config": {
      "required": [
        "Namespace",
        "GeneralRateLimitDuration",
        "GeneralRateLimitBurst",
        "ChatRateLimitDuration",
        "ChatRateLimitBurst",
        "ConcurrentUsersLimit",
        "ShardHardLimit",
        "ShardDefaultLimit",
        "ShardCapacityLimit",
        "SpamChatBurst",
        "SpamChatDuration",
        "SpamMuteDuration",
        "EnableProfanityFilter",
        "FilterType",
        "FilterParam",
        "EnableManualTopicCreation"
      ],
      "properties": {
        "ChatRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "ChatRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "ConcurrentUsersLimit": {
          "type": "integer",
          "format": "int32"
        },
        "EnableManualTopicCreation": {
          "type": "boolean"
        },
        "EnableProfanityFilter": {
          "type": "boolean"
        },
        "FilterParam": {
          "type": "string"
        },
        "FilterType": {
          "type": "string"
        },
        "GeneralRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "GeneralRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "Namespace": {
          "type": "string"
        },
        "ShardCapacityLimit": {
          "type": "integer",
          "format": "int32"
        },
        "ShardDefaultLimit": {
          "type": "integer",
          "format": "int32"
        },
        "ShardHardLimit": {
          "type": "integer",
          "format": "int32"
        },
        "SpamChatBurst": {
          "type": "integer",
          "format": "int32"
        },
        "SpamChatDuration": {
          "type": "integer",
          "format": "integer"
        },
        "SpamMuteDuration": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.ConfigExport": {
      "required": [
        "namespace",
        "chatRateLimitDuration",
        "generalRateLimitDuration",
        "chatRateLimitBurst",
        "generalRateLimitBurst",
        "concurrentUsersLimit"
      ],
      "properties": {
        "chatRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "chatRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "concurrentUsersLimit": {
          "type": "integer",
          "format": "int32"
        },
        "enableManualTopicCreation": {
          "type": "boolean"
        },
        "enableProfanityFilter": {
          "type": "boolean"
        },
        "filterParam": {
          "type": "string"
        },
        "filterType": {
          "type": "string"
        },
        "generalRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "generalRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "namespace": {
          "type": "string"
        },
        "shardCapacityLimit": {
          "type": "integer",
          "format": "int32"
        },
        "shardDefaultLimit": {
          "type": "integer",
          "format": "int32"
        },
        "shardHardLimit": {
          "type": "integer",
          "format": "int32"
        },
        "spamChatBurst": {
          "type": "integer",
          "format": "int32"
        },
        "spamChatDuration": {
          "type": "integer",
          "format": "integer"
        },
        "spamMuteDuration": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.ConfigList": {
      "required": ["configs"],
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Config"
          }
        }
      }
    },
    "models.ConfigRequest": {
      "required": ["spamMuteDuration"],
      "properties": {
        "chatRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "chatRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "concurrentUsersLimit": {
          "type": "integer",
          "format": "int32"
        },
        "enableManualTopicCreation": {
          "type": "boolean"
        },
        "enableProfanityFilter": {
          "type": "boolean"
        },
        "filterParam": {
          "type": "string"
        },
        "filterType": {
          "type": "string"
        },
        "generalRateLimitBurst": {
          "type": "integer",
          "format": "int32"
        },
        "generalRateLimitDuration": {
          "type": "integer",
          "format": "integer"
        },
        "shardCapacityLimit": {
          "type": "integer",
          "format": "int32"
        },
        "shardDefaultLimit": {
          "type": "integer",
          "format": "int32"
        },
        "shardHardLimit": {
          "type": "integer",
          "format": "int32"
        },
        "spamChatBurst": {
          "type": "integer",
          "format": "int32"
        },
        "spamChatDuration": {
          "type": "integer",
          "format": "integer"
        },
        "spamMuteDuration": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "models.Dictionary": {
      "required": ["id", "namespace", "word", "wordType", "parentId"],
      "properties": {
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        },
        "word": {
          "type": "string"
        },
        "wordType": {
          "type": "string"
        }
      }
    },
    "models.DictionaryChild": {
      "required": ["id", "word"],
      "properties": {
        "id": {
          "type": "string"
        },
        "word": {
          "type": "string"
        }
      }
    },
    "models.DictionaryGroup": {
      "required": ["name", "count"],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "models.DictionaryInsertBulkRequest": {
      "required": ["dictionaries"],
      "properties": {
        "dictionaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.DictionaryInsertRequest"
          }
        }
      }
    },
    "models.DictionaryInsertRequest": {
      "required": ["word", "wordType", "falsePositive", "falseNegative"],
      "properties": {
        "falseNegative": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "falsePositive": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "word": {
          "type": "string"
        },
        "wordType": {
          "type": "string"
        }
      }
    },
    "models.DictionaryQueryResult": {
      "required": ["data", "previous", "next"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.DictionaryWithChildren"
          }
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "models.DictionaryUpdateRequest": {
      "required": ["word", "wordType", "falsePositive", "falseNegative"],
      "properties": {
        "falseNegative": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "falsePositive": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "word": {
          "type": "string"
        },
        "wordType": {
          "type": "string"
        }
      }
    },
    "models.DictionaryWithChildren": {
      "required": ["id", "namespace", "word", "wordType", "parentId"],
      "properties": {
        "falseNegatives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.DictionaryChild"
          }
        },
        "falsePositives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.DictionaryChild"
          }
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        },
        "word": {
          "type": "string"
        },
        "wordType": {
          "type": "string"
        }
      }
    },
    "models.GetInboxCategoriesResponseItem": {
      "required": ["name", "expiresIn", "sendNotification", "saveInbox", "enabled"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64"
        },
        "hook": {
          "$ref": "#/definitions/models.CategoryHook"
        },
        "jsonSchema": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "saveInbox": {
          "type": "boolean"
        },
        "sendNotification": {
          "type": "boolean"
        }
      }
    },
    "models.GetInboxMessagesResponse": {
      "required": ["data", "previous", "next"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.GetInboxMessagesResponseData"
          }
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "models.GetInboxMessagesResponseData": {
      "required": ["id", "senderId", "message", "status", "scope", "createdAt", "updatedAt", "expiredAt", "userIds"],
      "properties": {
        "category": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "expiredAt": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "object"
        },
        "scope": {
          "type": "string",
          "enum": ["NAMESPACE", "USER"]
        },
        "senderId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["SENT", "DRAFT", "UNSENT"]
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.GetInboxStatsResponse": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.MessageStats"
          }
        }
      }
    },
    "models.GetInboxUsersResponse": {
      "required": ["data", "previous", "next"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.UserInbox"
          }
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "models.ImportConfigResponse": {
      "required": ["replacedConfigs", "ignoredConfigs", "failedConfigs", "newConfigs"],
      "properties": {
        "failedConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoredConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "newConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replacedConfigs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.JSONSchemaType": {
      "type": "object"
    },
    "models.MessageStats": {
      "required": ["id", "messageStored", "messageRead", "notificationSent"],
      "properties": {
        "id": {
          "type": "string"
        },
        "messageRead": {
          "type": "integer",
          "format": "int32"
        },
        "messageStored": {
          "type": "integer",
          "format": "int32"
        },
        "notificationSent": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.Pagination": {
      "required": ["previous", "next"],
      "properties": {
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "models.PublicBanTopicMembersRequest": {
      "required": ["userIDs"],
      "properties": {
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.PublicBanTopicMembersResponse": {
      "required": ["userIDs"],
      "properties": {
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.PublicUnbanTopicMembersRequest": {
      "required": ["userIDs"],
      "properties": {
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.PublicUnbanTopicMembersResponse": {
      "required": ["userIDs"],
      "properties": {
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.SaveInboxMessageRequest": {
      "required": ["category", "message", "status", "scope", "expiredAt", "userIds"],
      "properties": {
        "category": {
          "type": "string"
        },
        "expiredAt": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "object"
        },
        "scope": {
          "type": "string",
          "enum": ["NAMESPACE", "USER"]
        },
        "status": {
          "type": "string",
          "enum": ["SENT", "DRAFT"]
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.SaveInboxMessageResponse": {
      "required": ["id", "category", "message", "status", "scope", "expiredAt", "userIDs"],
      "properties": {
        "category": {
          "type": "string"
        },
        "expiredAt": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "object"
        },
        "scope": {
          "type": "string",
          "enum": ["NAMESPACE", "USER"]
        },
        "status": {
          "type": "string",
          "enum": ["SENT", "DRAFT", "UNSENT"]
        },
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.SendInboxMessageRequest": {},
    "models.SendInboxMessageResponse": {},
    "models.TopicInfo": {
      "required": ["id", "name", "type", "subType", "createdAt"],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "deletedAt": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/topic.InfoMember"
          }
        },
        "name": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.TopicLogItem": {
      "required": ["id", "topicId", "senderId", "userId", "message", "type", "createdAt"],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "senderId": {
          "type": "string"
        },
        "topicId": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["TOPIC_CREATE", "TOPIC_JOIN", "TOPIC_LEAVE", "TOPIC_DELETE"]
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.TopicLogWithPaginationResponse": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.TopicLogItem"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        }
      }
    },
    "models.TopicMemberResponse": {
      "required": ["userId", "isAdmin", "isBanned", "shardId"],
      "properties": {
        "isAdmin": {
          "type": "boolean"
        },
        "isBanned": {
          "type": "boolean"
        },
        "shardId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "models.TopicMemberWithPaginationResponse": {
      "required": ["data", "paging", "totalData"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.TopicMemberResponse"
          }
        },
        "paging": {
          "$ref": "#/definitions/models.Pagination"
        },
        "totalData": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.TopicResponse": {
      "required": ["namespace", "topicId", "name", "type", "createdAt", "createdBy", "lastMessageAt"],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "string"
        },
        "lastMessageAt": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "topicId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "models.UnbanTopicMemberParam": {
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.UnbanTopicMemberResult": {
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.UnsendInboxMessageRequest": {
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.UnsendInboxMessageResponse": {},
    "models.UpdateInboxCategoryRequest": {
      "required": ["hook", "expiresIn", "sendNotification", "saveInbox", "enabled"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64"
        },
        "hook": {
          "$ref": "#/definitions/models.CategoryHook"
        },
        "jsonSchema": {
          "type": "object"
        },
        "saveInbox": {
          "type": "boolean"
        },
        "sendNotification": {
          "type": "boolean"
        }
      }
    },
    "models.UpdateInboxMessageRequest": {
      "required": ["message", "scope", "expiredAt", "userIds"],
      "properties": {
        "expiredAt": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "object"
        },
        "scope": {
          "type": "string",
          "enum": ["NAMESPACE", "USER"]
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "models.UserInbox": {
      "required": ["userId", "readAt", "keep"],
      "properties": {
        "keep": {
          "type": "boolean"
        },
        "readAt": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "response.Error": {
      "required": ["errorCode", "errorMessage"],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "restapi.ErrorResponseBody": {
      "required": ["ErrorCode", "ErrorMessage"],
      "properties": {
        "ErrorCode": {
          "type": "integer",
          "format": "int32"
        },
        "ErrorMessage": {
          "type": "string"
        }
      }
    },
    "topic.InfoMember": {
      "required": ["userId"],
      "properties": {
        "leftAt": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "authorization": []
    }
  ]
}
