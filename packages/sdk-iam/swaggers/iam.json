{
  "swagger": "2.0",
  "info": {
    "description": "Justice IAM Service",
    "title": "justice-iam-service",
    "contact": {
      "name": "Engineering Team at AccelByte",
      "url": "https://accelbyte.io",
      "email": "engineering@accelbyte.io"
    },
    "version": "5.32.0"
  },
  "paths": {
    "/iam/bans": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eRequired permission 'BAN:ADMIN [READ]' or 'ADMIN:BAN [READ]'\u003c/p\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/bans [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Bans(Deprecated)"],
        "summary": "Get list of ban types",
        "operationId": "GetBansType",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.Bans"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/bans/reasons": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eRequired permission 'BAN:ADMIN [READ]' or 'ADMIN:BAN [READ]'\u003c/p\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/bans/reasons [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Bans(Deprecated)"],
        "summary": "Get list of ban reasons",
        "operationId": "GetListBanReason",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BanReasons"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/clients": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cp\u003eRequired permission 'CLIENT [READ]'.\u003cbr/\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Get All Clients",
        "operationId": "GetClients",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/clientmodel.ClientResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eRequired permission 'CLIENT:ADMIN [CREATE]'. \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Create Client",
        "operationId": "CreateClient",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "Client exists"
          }
        }
      }
    },
    "/iam/clients/{clientId}": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cp\u003eRequired permission 'CLIENT [READ]' \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients/{clientId} [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Get Client",
        "operationId": "GetClient",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cp\u003eRequired permission 'CLIENT:ADMIN [UPDATE]'\u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients/{clientId}  [PATCH]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Update Client",
        "operationId": "UpdateClient",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cp\u003eRequired permission 'CLIENT:ADMIN [DELETE]' \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients/{clientId}  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Delete Client",
        "operationId": "DeleteClient",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/clients/{clientId}/clientpermissions": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cp\u003eRequired permission 'CLIENT:ADMIN [UPDATE]'\u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003eiam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions  [PUT]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Update Client Permissions",
        "operationId": "UpdateClientPermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/clients/{clientId}/clientpermissions/{resource}/{action}": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cp\u003eRequired permission 'CLIENT:ADMIN [UPDATE]' \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\u003c/p\u003e",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Add Client Permission",
        "operationId": "AddClientPermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\tRequired permission 'CLIENT:ADMIN [UPDATE]'\u003cbr\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions/{resource}/{action}  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Delete Client Permission",
        "operationId": "DeleteClientPermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/clients/{clientId}/secret": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cp\u003eRequired permission 'CLIENT:ADMIN [UPDATE]'\u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/{clientId}/secret  [PUT]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cp\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Update Client Secret",
        "operationId": "UpdateClientSecret",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateSecretRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/clients": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\tRequired permission 'NAMESPACE:{namespace}:CLIENT [READ]' \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e\t\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Get clients by namespace",
        "operationId": "GetClientsbyNamespace",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/clientmodel.ClientResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]' \u003c/br\u003e\t\t\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/v3/admin/namespaces/{namespace}/clients  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Create Client",
        "operationId": "CreateClientByNamespace",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "Client exists"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/clients/{clientId}": {
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT:{clientId} [DELETE]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/clients/{clientId}  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients(Deprecated)"],
        "summary": "Delete Client",
        "operationId": "DeleteClientByNamespace",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users  [POST]\u003c/i\u003e\u003c/b\u003e\n\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v4/public/namespaces/{namespace}/users  [POST]\u003c/i\u003e\u003c/b\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eNote:\u003c/b\u003e\n\t\u003cdd\u003e 1. v3 \u0026 v4 introduce optional verification code\u003c/dd\u003e\n\t\u003cdd\u003e 2. format difference（Pascal case =\u003e Camel case)\u003c/dd\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER [CREATE]'.\u003c/p\u003e\n\u003cp\u003eAvailable Authentication Types:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eEMAILPASSWD\u003c/strong\u003e: an authentication type used for new user registration through email.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePHONEPASSWD\u003c/strong\u003e: an authentication type used for new user registration through phone number.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Create User",
        "operationId": "CreateUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": ""
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/admin": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint(Public): \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/roles/{roleId}/users  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n                \u003cli\u003e\u003cb\u003eNote:\u003c/b\u003e\n                        \u003cdd\u003edifference in V3 response, format difference: Pascal case =\u003e Camel case\u003c/dd\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint search admin users which have the roleId\u003c/p\u003e\n\t\t\t\u003cp\u003eNotes : this endpoint only accept admin role. Admin Role is role which have admin status and members.\n\t\t\tUse endpoint [GET] /roles/{roleId}/admin to check the role status\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get Admin Users By RoleId",
        "operationId": "GetAdminUsersByRoleID",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID",
            "name": "roleId",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetAdminUsersResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20021\u003c/td\u003e\u003ctd\u003einvalid pagination parameter\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10157\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/byLoginId": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'NAMESPACE:{namespace}:USER [READ]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get User By Login Id",
        "operationId": "GetUserByLoginID",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Login id",
            "name": "loginId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/byPlatformUserID": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint(Public): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint(Admin): \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eNote:\u003c/b\u003e\n            \t\t\u003cdd\u003e1. difference in V3 response, format difference: Pascal case =\u003e Camel case\u003c/dd\u003e\u003c/b\u003e\n\t\t\t\t\u003c/li\u003e\n                \u003c/ul\u003e\n\t\tRequired permission 'NAMESPACE:{namespace}:USER [READ]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get User By Platform User ID",
        "operationId": "GetUserByPlatformUserID",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform User ID",
            "name": "platformUserID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/forgotPassword": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/forgot  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]' or valid basic auth header\"+\n\t\t\t\"\u003cp\u003e\u003cstrong\u003eSpecial note for publisher-game scenario:\u003c/strong\u003e Game Client should provide game namespace path parameter and Publisher Client should provide publisher namespace path parameter. \u003c/p\u003e\"+\n\t\t\t\"\u003cp\u003eThe password reset code will be sent to the publisher account's email address. \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Request Password Reset Code",
        "operationId": "ForgotPassword",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/listByLoginIds": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint(query by email list): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/bulk/basic  [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint(query by user id list): \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/search/bulk  [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n                \u003c/ul\u003e\n\t\tRequired permission 'NAMESPACE:{namespace}:USER [READ]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get a List of Users By Their Login Id",
        "operationId": "GetUsersByLoginIds",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "List of LoginIDs. Separated by comma.",
            "name": "loginIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUsersResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/resetPassword": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/reset  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:PASSWORD:USER [UPDATE]' or valid basic auth header",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Reset User Password",
        "operationId": "ResetPassword",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/search": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/search  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n                \u003c/ul\u003e\n\t\t\t\u003cp\u003eSearch all users that match the query on these fields: all login IDs (email address, phone number, and platform user id),\n\t\t\tuserID, display name, and on the specified namespace. If the query is not defined, then it searches all users on the specified namespace.\n\t\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:* [READ]'\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Search users",
        "operationId": "SearchUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "search query string (optional)",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint(Public): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint(Admin): \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\u003c/li\u003e\n\t\t\u003cli\u003e\u003cb\u003eNote:\u003c/b\u003e\n            \t\t\u003cdd\u003eformat difference in response: Pascal case =\u003e Camel case\u003c/dd\u003e\u003c/b\u003e\n\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'NAMESPACE:{namespace}:USER:{userId} [READ]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get User By User Id",
        "operationId": "GetUserByUserID",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      },
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint([PUT]): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me  [PUT]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint([PATCH]): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me  [PATCH]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint([PATCH]): \u003ci\u003e/iam/v4/public/namespaces/{namespace}/users/me  [PATCH]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n                \u003cli\u003e\u003cb\u003eNote:  \u003c/b\u003e\n\t\t\t\t\t\u003cdd\u003e1. Prefer [PATCH] if client support PATCH method\u003c/dd\u003e\n\t\t\t\t\t\u003cdd\u003e2. Difference in V3/v4 request body, format difference: Pascal case =\u003e Camel case\u003c/dd\u003e\n\t\t\t\t\u003c/li\u003e\n                \u003c/ul\u003e\n\t\t\t\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\"+\n\t\t\t\"\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \"+\n\t\t\t\"\u003cp\u003eSupported field {Country, DisplayName, LanguageTag}\u003c/p\u003e\"+\n\t\t\t\"\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\"+\n\t\t\t\"\u003cbr\u003e\u003cb\u003eSeveral case of updating email address\u003c/b\u003e\"+\n\t\t\t\"\u003cul\u003e\u003cli\u003eUser want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.\u003c/li\u003e\"+\n\t\t\t\"\u003cli\u003eUser want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. \u003c/li\u003e\"+\n\t\t\t\"\u003cli\u003eUser want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. \u003c/li\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update User",
        "operationId": "UpdateUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "\u003cul\u003e\u003cli\u003eCountry (Optional) \u003cbr\u003e use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/li\u003e\u003cli\u003eDisplayName (Optional) string \u003c/li\u003e\u003cli\u003eLanguageTag (Optional) use Language e.g. en / en-US \u003c/li\u003e\u003c/ul\u003e",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10131\u003c/td\u003e\u003ctd\u003einvalid date of birth\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10132\u003c/td\u003e\u003ctd\u003einvalid email address\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/information  [DELETE]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tRequired permission 'NAMESPACE:{namespace}:USER:{userId} [DELETE]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Delete User",
        "operationId": "DeleteUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/ban": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]'.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Ban a single user",
        "operationId": "BanUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permissions 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]'.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get user's bans history",
        "operationId": "GetUserBanHistory",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans/{banId}/disable": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans/{banId}  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\t\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]'.\u003cbr\u003e\"+\n\t\t\t\"\u003cbr\u003e\u003cb\u003eNotes for using IAM in publisher - game studio scenarios\u003c/b\u003e\u003cbr\u003e\"+\n\t\t\t\"\u003cp\u003eThe endpoint allows:\u003c/p\u003e \u003cul\u003e\"+\n\t\t\t\"\u003cli\u003eThe admin user in publisher namespace disables user’s ban in publisher namespace.\u003c/li\u003e\"+\n\t\t\t\"\u003cli\u003eThe admin user in game namespace disables user’s ban in game namespace.\u003c/li\u003e\"+\n\t\t\t\"\u003cli\u003eThe admin user in publisher namespace disables user’s ban in publisher namespace.\u003c/li\u003e\u003c/ul\u003e\"+\n\t\t\t\"\u003cp\u003eOther scenarios are not supported and will return 403: Forbidden.\u003c/p\u003e",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Disable ban for a single user.",
        "operationId": "DisableUserBan",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ban ID",
            "name": "banId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10145\u003c/td\u003e\u003ctd\u003edisallow game access publisher user's ban\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/bans/{banId}/enable": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans/{banId}  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [UPDATE]'.",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Enable ban for a single user",
        "operationId": "EnableUserBan",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ban ID",
            "name": "banId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10145\u003c/td\u003e\u003ctd\u003edisallow game access publisher user's ban\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10144\u003c/td\u003e\u003ctd\u003euser has no bans\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/crosslink": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.\u003c/p\u003e\n\u003cp\u003e\n\tAccess token from original namespace is needed as authorization header. Access token from designated account needed as form parameter to verify the ownership of that account.\n\tWhen platformID (device platfom ID) is specified, platform login method for that specific platform ID is removed.\n\tThis means to protect account from second hand device usage.\n\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Links existing account with another account in different namespace. ",
        "operationId": "ListCrossNamespaceAccountLink",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token of the targeted account",
            "name": "linkingToken",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Current platform ID",
            "name": "platformId",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/disable": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cp\u003eRequired permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'\u003cp\u003e\n\t\t\u003cp\u003eFor \u003cstrong\u003eDeletion Account\u003c/strong\u003e purpose fill the reason with:\u003c/p\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eDeactivateAccount\u003c/strong\u003e : if your deletion request comes from user\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eAdminDeactivateAccount\u003c/strong\u003e : if your deletion request comes from admin\u003c/li\u003e\n\t\t\u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Disable a user",
        "operationId": "DisableUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DisableUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/enable": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\t\u003cul\u003e\n\t\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\u003c/ul\u003e\n\t\t\t\t\u003cp\u003eRequired permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'\u003cp\u003e",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Enable a user",
        "operationId": "EnableUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/information": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}/information  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permissions 'NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]'.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get user's information",
        "operationId": "GetUserInformation",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserInformation"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/information  [DELETE]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permissions 'ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]'.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Delete user's information",
        "operationId": "DeleteUserInformation",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}/logins/histories  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/logins/histories  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tRequired permission 'NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]'\"+\n\t\t\"\u003cp\u003eNotes for this endpoint: \u003c/p\u003e \"+\n\t\t\"\u003cul\u003e\u003cli\u003eThis endpoint retrieve the first page of the data if 'after' and 'before' parameters is empty.\u003c/li\u003e\"+\n\t\t\"\u003cli\u003eThe maximum value of the limit is 100 and the minimum value of the limit is 1.\u003c/li\u003e\"+\n\t\t\"\u003cli\u003eThis endpoint retrieve the next page of the data if we provide 'after' parameters with valid Unix timestamp.\u003c/li\u003e\"+\n\t\t\"\u003cli\u003eThis endpoint retrieve the previous page of the data if we provide 'before' parameter with valid data Unix timestamp.\u003c/li\u003e\u003cul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get User's Login Histories",
        "operationId": "GetUserLoginHistories",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "name": "before",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of data retrieved in a page",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "description": " \u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\t \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/password  [PUT]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\t\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]'\u003cp\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update User Password",
        "operationId": "UpdatePassword",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/permissions": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions  [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\t\t\t\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will REPLACE user's permissions with the ones defined in body\u003c/p\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Save User Permissions",
        "operationId": "SaveUserPermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions  [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\t\t\t\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will update existing permission (bitwise OR the action) if found one with same resource, otherwise it will append a new permission\u003c/p\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Add User Permission",
        "operationId": "AddUserPermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action (1..15)",
            "name": "action",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdatePermissionScheduleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}  [DELETE]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Delete User Permission",
        "operationId": "DeleteUserPermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action (1..15)",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\n\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER:{userId} [READ]'.\u003c/p\u003e\n\u003ch2\u003eJustice Platform Account\u003c/h2\u003e\n\u003cp\u003eThe permission ’ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId}’ [READ] is required in order to read the UserID who linked with the user.\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get platform accounts linked to the user",
        "operationId": "GetUserPlatformAccounts",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace}": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace} [GET] \u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\t\t\t\n\t\t\t\n\t\t\t\u003cp\u003eThis endpoint requires the client access token as the bearer token. Required permission 'ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will support publisher access to game and game access to publisher\u003c/p\u003e\n\t\t\t\u003cp\u003eIf targetNamespace filled with publisher namespace then this endpoint will return its game user id and game namespace\u003c/p\u003e\n\t\t\t\u003cp\u003eIf targetNamespace filled with game namespace then this endpoint will return its publisher user id and publisher namespace\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get user mapping",
        "operationId": "GetUserMapping",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Target namespace",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserMapping"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: /iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace} [GET] \u003c/i\u003e\u003c/b\u003e\n\t\t\u003c/ul\u003e\n\n\u003cp\u003eThis endpoint requires the client access token as the bearer token. Required permission 'ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [UPDATE]'\u003c/p\u003e\n\u003cp\u003eThe endpoint returns user Justice platform account linked with the given user. If the user Justice platform account doesn't exist in the designated namespace, the endpoint is going to \u003cstrong\u003ecreate and return the new Justice platform account.\u003c/strong\u003e\nThe newly user Justice platform account is going to be forced to perform token grant through the given user and can't perform password update\u003c/p\u003e\n\u003ch3\u003eRead Justice Platform Account UserID\u003c/h3\u003e\n\u003cp\u003eIn order to read the Justice platform account UserID, it is required to have the permission: \u003cstrong\u003eNAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]\u003c/strong\u003e, otherwise the UserID is going to be censored and replaced with “Redacted” text.\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get the Justice linked accounts on the designated namespace",
        "operationId": "GetUserJusticePlatformAccount",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The namespace where the user Justice platform account lives",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserJusticePlatformAccountResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId} [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\n\t\t\t\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.\u003c/p\u003e\n\t\t\t\u003cp\u003e\u003cbr\u003e\u003cb\u003ePrerequisite:\u003c/b\u003e Platform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The ticket’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The ticket’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The ticket’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The ticket’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The ticket's value is the Android’s device ID\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The ticket's value is the iOS’s device ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e: The ticket’s value is the authorization code returned by Apple OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that does’nt run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The ticket’s value is the authorization code returned by Discord OAuth.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Link user's account with platform",
        "operationId": "PlatformLink",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform",
            "name": "ticket",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/platforms/{platformId}/unlink": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [DELETE]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/all  [DELETE]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\n\t\t\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.\u003c/p\u003e\n\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ejustice\u003c/strong\u003e: A user might have several 'justice’ platform on different namespaces. That’s why the platform_namespace need to be specified when the platform ID is ‘justice’. The platform_namespace is the designated user’s namespace.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eUnlink user's account with platform. 'justice' platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is 'justice'.\n\t\t\t\u003cbr\u003eUnlinking justice platform will enable password token grant and password update. \u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded", "text/plain"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Unlink user's account with platform",
        "operationId": "PlatformUnlink",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Namespace of the platform account to be unlinked",
            "name": "platform_namespace",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/publisher": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}/publisher  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n                \u003c/ul\u003e\n\t\t\t\u003cp\u003eRequired permissions 'NAMESPACE:{namespace}:PUBLISHER:USER:{userId} [READ].\u003c/p\u003e\n\t\t\t\u003cp\u003e\u003cstrong\u003eRestriction:\u003c/strong\u003e\n\t\t\tPath Parameter \u003cstrong\u003enamespace\u003c/strong\u003e can be provided only with game namespace\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get Publisher User",
        "operationId": "GetPublisherUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetPublisherUserResponse"
            }
          },
          "400": {
            "description": "Error Code: 7239 - Error Message: wrong namespace: required game namespace",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/roles": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: /iam/v3/admin/namespaces/{namespace}/users/{userId}/roles  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Save User Roles",
        "operationId": "SaveUserRoles",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/roles/{roleId}": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles/{roleId}  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "consumes": ["application/json", "text/plain"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Add User Role",
        "operationId": "AddUserRole",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10160\u003c/td\u003e\u003ctd\u003euser already has the role\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10161\u003c/td\u003e\u003ctd\u003euser already the role member\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles/{roleId}  [DELETE]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]'",
        "consumes": ["application/json", "text/plain"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Delete User Role",
        "operationId": "DeleteUserRole",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccount": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\n\t\t \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/headless/verify  [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Upgrade user account to full account (with email)",
        "operationId": "upgradeHeadlessAccount",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/upgradeHeadlessAccountWithVerificationCode": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/headless/code/verify  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\tRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n\u003cp\u003eThe endpoint upgrades a headless account by linking the headless account with the email address and the password. By upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM.\nThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. In order to get a verification code for the endpoint, please check the send verification code endpoint.\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Upgrade headless account and automatically verified the email address if it is succeeded",
        "operationId": "UpgradeHeadlessAccountWithVerificationCode",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/verification": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/code/verify  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\t\t\t\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\n\t\t\tRedeems a verification code sent to a user to verify the user's contact address is correct\n\t\t\t\u003cp\u003eAvailable ContactType : \u003cb\u003eemail\u003cb/\u003e or \u003cb\u003ephone\u003cb/\u003e \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Redeem verification code sent to user",
        "operationId": "UserVerification",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10162\u003c/td\u003e\u003ctd\u003einvalid verification\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/namespaces/{namespace}/users/{userId}/verificationcode": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/code/request  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\t\t\tRequired permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n\t\t\t\u003cp\u003eThe verification code is sent to either the phone number or email address. It depends on the LoginID's value.\u003c/p\u003e\n\t\t\t\u003cp\u003eAvailable contexts for use : \u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003eUserAccountRegistration\u003c/strong\u003e\u003cp\u003ea context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \u003cstrong\u003e\u003cem\u003eIt is the default context if the Context field is empty\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003eUpdateEmailAddress\u003c/strong\u003e\u003cp\u003ea context type used for verify user before updating email address.(Without email address verified checking)\u003c/p\u003e\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003eupgradeHeadlessAccount\u003c/strong\u003e\u003cp\u003eThe context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  If this context used, IAM rejects the request if the loginId field's value is already used by others by returning HTTP Status Code 409.\u003c/p\u003e\u003c/li\u003e\n\t\t\t\u003c/ol\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Send verification code to user",
        "operationId": "SendVerificationCode",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10146\u003c/td\u003e\u003ctd\u003euserID not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/oauth/authorize": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\tThe endpoint supports two response types:\u003cbr/\u003e\n\t\u003cp\u003e\u003cstrong\u003e1. Response Type == \"code\":\u003c/strong\u003e\u003c/p\u003e\n\t\u003cp\u003eThe endpoint returns an authorization code that will be used by the IAM client to exchange for an access token. It supports two different headers, the basic and the bearer header. Each behaves differently.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eThe basic header\u003c/strong\u003e\u003c/p\u003e\n\t\u003cp\u003eThe basic header’s value is the base64 of the client ID and client secret. It is used by the developer whenever the developer authorizes a user on a same namespace.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eThe bearer header\u003c/strong\u003e\u003c/p\u003e\n\t\u003cp\u003eThe bearer header’s value is an access token. It is used by the developer whenever the developer authorizes a user on a different namespace. The endpoint validates user’s entitlement on the designated namespace for making sure the user is authorized for a designated namespace.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollowing are the responses returned by the endpoint:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAuthorize success\u003c/strong\u003e: redirects to the given URL with the following information: ?code={authorization code}\u0026state={state}\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAuthorize failure\u003c/strong\u003e: redirects to the given URL with the following information:?error=access_denied\u0026error_description=...\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e2. Response Type == \"token\" (Implicit) is deprecated. \u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003eSubstitute endpoint (for: basic header style): \u003ci\u003e/iam/v3/oauth/authorize  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eSubstitute endpoint (for: bearer header style): \u003c/b\u003e\n\t\u003cdd\u003estep1: /iam/v3/namespace/{namespace}/token/request [POST] =\u003e get code\u003cdd\u003e\u003c/br\u003e\n\t\u003cdd\u003estep2: /iam/v3/token/exchange [POST] =\u003e get token by step1's code\u003cdd\u003e\u003c/br\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eNote: \u003c/b\u003e\n\t\u003cdd\u003e1. V3 is standard OAuth2 flow and support PKCE\u003cdd\u003e\u003c/br\u003e\n\t\u003cdd\u003e2. Will not support implicit flow in v3.\u003cdd\u003e\u003c/br\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 authorize API",
        "operationId": "Authorization",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "User Name",
            "name": "login",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Password",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client id",
            "name": "client_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Redirect URI. The URI has to match one of the URIs set in client.",
            "name": "redirect_uri",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Scope. The scope of request by roleId. Accept multiple roleIds separated by whitespace.",
            "name": "scope",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "State. Random value for preventing cross-site request forgery used by client.",
            "name": "state",
            "in": "formData"
          },
          {
            "enum": ["code", "token"],
            "type": "string",
            "default": "code",
            "description": "Response Type. Allowed values ['code', 'token'].",
            "name": "response_type",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/oauth/jwks": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eThis endpoint serves public keys for verifying JWT access tokens generated by this service.\u003c/p\u003e\n\t\t\t\u003cp\u003eWhen a client application wants to verify a JWT token, it needs to get the 'kid' value found in the JWT token header and use it\n\t\t\tto look up the corresponding public key from a set returned by this endpoint. The client application can then use that public key to verify the JWT.\u003c/p\u003e\n\t\t\t\u003cp\u003eA client application might cache the keys so it doesn't need to do request every time it needs to verify a JWT token. If a client application\n\t\t\tcaches the keys and a key with the same 'kid' cannot be found in the cache, it should then try to refresh the keys by making a request to this\n\t\t\tendpoint again.\u003c/p\u003e\n\t\t\t\u003cp\u003ePlease refer to the RFC for more information about JWK (JSON Web Key): https://tools.ietf.org/html/rfc7517\u003c/p\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\t\t\u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/jwks  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \t\u003c/ul\u003e",
        "consumes": [""],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "JSON Web Key Set for verifying JWT",
        "operationId": "GetJWKS",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "JWKS returned",
            "schema": {
              "$ref": "#/definitions/oauthcommon.JWKSet"
            }
          }
        }
      }
    },
    "/iam/oauth/namespaces/{namespace}/platforms/{platformId}/token": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003e\n\t\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\t\talong with platform_token parameter against publisher namespace.\n\t\t\t\u003c/p\u003e\n\t\t\t\u003cp\u003e\n\t\t\t\tSupported platforms:\n\t\t\t\u003c/p\u003e\n\t\t\t\u003col\u003e\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The expected value of the platform token is the URL generated by Steam on web authentication\u003c/li\u003e\u003c/ol\u003e\n\t\t\t\u003cp\u003eThe JWT contains user's active bans with its expiry date. List of ban types can be obtained from /iam/bans.\u003c/p\u003e.\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/platforms/{platformId}/token  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 access token generation specific to platform",
        "operationId": "PlatformTokenRequestHandler",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Requested namespace for token grant",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID to login with",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token from platform auth",
            "name": "platform_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Device/hardware identifier",
            "name": "device_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Mac address of device",
            "name": "macAddress",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/oauth/namespaces/{namespace}/users/{userId}/revoke": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eThis endpoint requires all requests to have authorization header set with bearer token.\u003c/p\u003e\n\t\t\t\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThe endpoint revokes all access tokens and refresh tokens a user has prior the revocation time. It is a convenient feature for the developer (or admin) who wanted to revokes all user's access tokens and refresh tokens generated before some period of time.\u003c/p\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\t\t\u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \t\u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "Revokes user's tokens'",
        "operationId": "RevokeUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User to be revoked",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User revoked"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/platforms/{platformId}/token": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003ePlatform token grant specifically used for performing token grant using platform, e.g. Steam, Justice, etc. The endpoint automatically create an account if the account associated with the platform is not exists yet.\n\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\talong with platform_token parameter against publisher namespace.\u003c/p\u003e\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The platform_token’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The platform_token's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The platform_token’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Discord OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The device_id is the Android’s device ID\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The device_id is the iOS’s device ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ejustice\u003c/strong\u003e: The platform_token’s value is the designated user’s access token.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\u003ch2\u003eAccess Token Content\u003c/h2\u003e\n\u003cp\u003eFollowing is the access token’s content:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003enamespace\u003c/strong\u003e. It is the namespace the token was generated from.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003edisplay_name\u003c/strong\u003e. The display name of the sub. It is empty if the token is generated from the client credential\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eroles\u003c/strong\u003e. The sub’s roles. It is empty if the token is generated from the client credential\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003enamespace_roles\u003c/strong\u003e. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003epermissions\u003c/strong\u003e. The sub or aud’ permissions\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003ebans\u003c/strong\u003e. The sub’s list of bans. It is used by the IAM client for validating the token.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003ejflgs\u003c/strong\u003e. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cp\u003e1: Email Address Verified\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003e2: Phone Number Verified\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003e4: Anonymous\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eaud\u003c/strong\u003e. The aud is the client ID.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eiat\u003c/strong\u003e. The time the token issues at. It is in Epoch time format\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eexp\u003c/strong\u003e. The time the token expires. It is in Epoch time format\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003esub\u003c/strong\u003e. The UserID. The sub is omitted if the token is generated from client credential\u003c/p\u003e\n\u003c/li\u003e\n\u003ch2\u003eBans\u003c/h2\u003e\n\u003cp\u003eThe JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.\u003c/p\u003e\n\u003ch2\u003eTrack Login History\u003c/h2\u003e\n\u003cp\u003eThis endpoint will track login history to detect suspicious login activity, please provide \"device_id\" (alphanumeric) in request header parameter otherwise we will set to \"unknown\".\u003c/p\u003e\n\u003cp\u003eAlign with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\"\u003c/p\u003e.\n\t\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/platforms/{platformId}/token  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 access token generation specific to platform",
        "operationId": "PlatformTokenGrant",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID to login with",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token from platform auth",
            "name": "platform_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Device/hardware identifier",
            "name": "device_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Delegated namespace token grant",
            "name": "namespace",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "name": "Device-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Mac address of device",
            "name": "macAddress",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/oauth/revocationlist": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eThis endpoint will return a list of revoked users and revoked tokens. List of revoked tokens in bloom filter format. This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.\u003c/p\u003e\n\t\t\t\u003cp\u003eThe bloom filter uses MurmurHash3 algorithm for hashing the values\u003c/p\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\t\t\u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/revocationlist  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \t\u003c/ul\u003e",
        "consumes": [""],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 revocation list API",
        "operationId": "GetRevocationList",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "revocation list returned",
            "schema": {
              "$ref": "#/definitions/oauthapi.RevocationList"
            }
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/revoke/token": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\t\t \u003cp\u003eRevokes a token.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThis endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret or Bearer access authentication with valid access token.\u003c/p\u003e\n\t\t\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\t\t\u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/v3/oauth/revoke  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \t\u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 token revocation API",
        "operationId": "RevokeToken",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Token to be revoked",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token revoked or does not exist"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/revoke/user": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eThis endpoint revokes a user. \u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint requires all requests to have Authorization header set with Bearer access authentication with valid access token.\u003c/p\u003e\n\t\t\t\u003cp\u003eRequired permission 'NAMESPACE:{namespace}:USER:{userID}:ADMIN [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eWhen other clients know that the userID has been revoked and the token is issued before the revocation, forcing a new token will contain banned permissions. \u003c/p\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\t\t\u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \t\u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 user revocation API",
        "operationId": "RevokeAUser",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "User to be revoked",
            "name": "userID",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User revoked or does not exist"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Invalid basic auth header"
          }
        }
      }
    },
    "/iam/oauth/token": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/token  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                        \u003cli\u003e\u003cb\u003eNote: difference in V3 response:\u003c/b\u003e\n\t\t\t\t\t\t\t\u003cdd\u003e1. format difference（Pascal case =\u003e Camel case): permissions field from Action =\u003e action, Resource =\u003e resource \u003c/dd\u003e\u003c/b\u003e\n\t\t\t\t\t\t\u003c/li\u003e\n                \u003c/ul\u003e\n\t\t\t\u003cp\u003eThis endpoint requires all requests to have \u003ccode\u003eAuthorization\u003c/code\u003e header set with \u003ccode\u003eBasic\u003c/code\u003e access authentication\n\t\t\tconstructed from client id and client secret.\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint supports different \u003cstrong\u003egrant types\u003c/strong\u003e:\u003c/p\u003e\u003col\u003e\n\t \t\t\u003cli\u003eGrant Type == \u003ccode\u003eclient_credentials\u003c/code\u003e:\u003cbr /\u003e\n\t \t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; This endpoint will check the client credentials provided through Authorization header.\u003c/li\u003e\n\t \t\t\u003cli\u003eGrant Type == \u003ccode\u003epassword\u003c/code\u003e:\u003cbr /\u003e\n\t \t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; The grant type to use for authenticating a user, whether it's by email / username and password combination\n\t\t\tor through platform.\u003c/li\u003e\n\t \t\t\u003cli\u003eGrant Type == \u003ccode\u003erefresh_token\u003c/code\u003e:\u003cbr /\u003e\n\t \t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; Used to get a new access token for a valid refresh token.\u003c/li\u003e\n\t \t\t\u003cli\u003eGrant Type == \u003ccode\u003eauthorization_code\u003ccode\u003e:\u003cbr /\u003e\n\t \t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; It generates the user token by given the authorization\n\t \t\tcode which generated in \"/authorize\" API response. It should also pass\n\t \t\tin the redirect_uri, which should be the same as generating the\n\t \t\tauthorization code request.\u003c/li\u003e\u003c/ol\u003e\n\t \t\t\u003cp\u003eFor platform authentication, use grant type \u003ccode\u003epassword\u003c/code\u003e.\n\t \t\tThe \u003ccode\u003eusername\u003c/code\u003e field would be in form of\n\t \t\t\u003ccode\u003eplatform:\u0026lt;platform type\u0026gt;\u003c/code\u003e, for example\n\t \t\t\u003ccode\u003eplatform:steam\u003c/code\u003e for Steam. For the \u003ccode\u003epassword\u003c/code\u003e\n\t \t\tfield, set it to the authentication/authorization ticket or token obtainable through the\n\t \t\trespective platform SDK after authenticated the user to the platform. Supported platforms:\u003c/p\u003e\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e - use \u003ccode\u003eplatform:steam\u003c/code\u003e as the username and use the authentication ticket obtained\n\t\t\tfrom Steam through the Steam SDK as the password.\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003eps4\u003c/strong\u003e - use \u003ccode\u003eplatform:ps4\u003c/code\u003e as the username and use the authorization code\n\t\t\tobtained from the PlayStation Network through a player PS4 unit as the password.\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003elive\u003c/strong\u003e - use \u003ccode\u003eplatform:live\u003c/code\u003e as the username and use token obtained from \n\t\t\tXbox Secure Token Service (XSTS) as the password.\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e - use \u003ccode\u003eplatform:oculus\u003c/code\u003e as the username and use the \u003ccode\u003euser_id:nonce\u003c/code\u003e\n\t\t\tas password obtained from Oculus through the Oculus SDK.\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n\t\t\t\u003cp\u003eThe access token and refresh token are in form of JWT token.\n\t \t\tAn access token JWT contains data which structure is similar to the\n\t \t\tResponse Class below, but without OAuth-related data. To verify a token, use the public keys\n\t\t\tobtained from the \u003ccode\u003e/jwks\u003c/code\u003e endpoint below.\u003c/p\u003e\n\u003ch2\u003eAccess Token Content\u003c/h2\u003e\n\u003cp\u003eFollowing is the access token’s content:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003enamespace\u003c/strong\u003e. It is the namespace the token was generated from.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003edisplay_name\u003c/strong\u003e. The display name of the sub. It is empty if the token is generated from the client credential\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eroles\u003c/strong\u003e. The sub’s roles. It is empty if the token is generated from the client credential\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003enamespace_roles\u003c/strong\u003e. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003epermissions\u003c/strong\u003e. The sub or aud’ permissions\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003ebans\u003c/strong\u003e. The sub’s list of bans. It is used by the IAM client for validating the token.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003ejflgs\u003c/strong\u003e. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cp\u003e1: Email Address Verified\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003e2: Phone Number Verified\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003e4: Anonymous\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eaud\u003c/strong\u003e. The aud is the client ID.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eiat\u003c/strong\u003e. The time the token issues at. It is in Epoch time format\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003eexp\u003c/strong\u003e. The time the token expires. It is in Epoch time format\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\t\u003cp\u003e\u003cstrong\u003esub\u003c/strong\u003e. The UserID. The sub is omitted if the token is generated from client credential\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eBans\u003c/h2\u003e\n\u003cp\u003eThe JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.\u003c/p\u003e\n\u003ch2\u003eTrack Login History\u003c/h2\u003e\n\u003cp\u003eThis endpoint will track login history to detect suspicious login activity, please provide \"device_id\" (alphanumeric) in request header parameter otherwise we will set to \"unknown\".\u003c/p\u003e\n\u003cp\u003eAlign with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\"\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 access token generation endpoint",
        "operationId": "TokenGrant",
        "deprecated": true,
        "parameters": [
          {
            "enum": ["authorization_code", "client_credentials", "password", "refresh_token"],
            "type": "string",
            "default": "client_credentials",
            "description": "Grant Type",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "User Name (used with grant type 'password'",
            "name": "username",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Password (used with grant type 'password'",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Refresh Token (used with grant type 'refresh_token'",
            "name": "refresh_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Code (used with grant type 'authorization_code'",
            "name": "code",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Redirect URI (used with grant type 'authorization_code'",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Delegated namespace (used with grant type 'password' to do token grant on other namespace)",
            "name": "namespace",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Extend expiration date of refresh token. Only available for grant type 'password'",
            "name": "extend_exp",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "name": "Device-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/oauth/verify": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/oauth/verify  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                        \u003cli\u003e\u003cb\u003eNote: difference in V3 response:\u003c/b\u003e\n\t\t\t\t\t\t\t\u003cdd\u003e1. format difference（Pascal case =\u003e Camel case): permissions field from Action =\u003e action, Resource =\u003e resource \u003c/dd\u003e\u003c/b\u003e\n\t\t\t\t\t\t\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth(Deprecated)"],
        "summary": "OAuth2 token verification API",
        "operationId": "VerifyToken",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Token to be verified",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token verified",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "Access Token not exist or expired"
          }
        }
      }
    },
    "/iam/roles": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE [READ]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Get Roles",
        "operationId": "GetRoles",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "- true if the expected result should only returns records with wildcard = true\n- false if the expected result should only returns records with wildcard = false\n- empty (omitted) if the expected result should returns records with no wildcard filter at all\n",
            "name": "isWildcard",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.RoleResponseWithManagers"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [CREATE]' or 'ADMIN:ROLE [CREATE]' \u003c/br\u003e\n\t\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e\n\t\t\t\t\u003cp\u003eIf role is an administrator role (i.e. AdminRole == true), it will list out the role's members.\u003c/p\u003e\n\t\t\t\t\u003cp\u003eAdministrator role can be created only when at least 1 manager is specified.\u003c/p\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Create Role",
        "operationId": "CreateRole",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/accountcommon.Role"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/roles/{roleId}": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE [READ]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Get Role",
        "operationId": "GetRole",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE] \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}  [PATCH]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Update Role",
        "operationId": "UpdateRole",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [DELETE]' or 'ADMIN:ROLE [DELETE]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Delete Role",
        "operationId": "DeleteRole",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/admin": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE [READ] \u003c/br\u003e\n\t\t\t\t\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/admin  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Get Role Admin Status",
        "operationId": "GetRoleAdminStatus",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleAdminStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]' \u003c/br\u003e\n\t\t\t\t\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\n\t\t\t\t\u003cp\u003eRole can be set as admin role only when it has at least 1 manager.\u003c/p\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/admin  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Set Role as Admin Role",
        "operationId": "SetRoleAsAdmin",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/admin  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Remove Role Admin Status",
        "operationId": "RemoveRoleAdmin",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/managers": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE [READ]' \u003c/br\u003e\n\t\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e\u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/managers  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Get Role Managers",
        "operationId": "GetRoleManagers",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleManagersResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]' \u003c/br\u003e\n\t\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e\u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/managers  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Add Role Managers",
        "operationId": "AddRoleManagers",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/managers  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Remove Role Managers",
        "operationId": "RemoveRoleManagers",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/members": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE [READ]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/members  [GET]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Get Role Members",
        "operationId": "GetRoleMembers",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleMembersResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]' \u003c/br\u003e\n\t\t\t\t\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\n\t\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/members  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Add Role Members",
        "operationId": "AddRoleMembers",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'\u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/members  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Remove Role Members",
        "operationId": "RemoveRoleMembers",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/permissions": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eRequired permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will REPLACE role's permissions with the ones defined in body\u003c/p\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/permissions [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Update Role Permissions",
        "operationId": "UpdateRolePermissions",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/roles/{roleId}/permissions/{resource}/{action}": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cp\u003eRequired permission 'ROLE:ADMIN [UPDATE]' Or 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will update existing permission (bitwise OR the action) if found one with same resource, otherwise it will append a new permission\u003c/p\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint(update): \u003ci\u003e/iam/v3/admin/roles/{roleId}/permissions  [PUT] \u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint(create): \u003ci\u003e/iam/v3/admin/roles/{roleId}/permissions  [POST]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Add Role Permission",
        "operationId": "AddRolePermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdatePermissionScheduleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n                Required permission 'ROLE:ADMIN [UPDATE]' or 'ADMIN:ROLE [UPDATE]' \u003c/br\u003e\n                \u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n                \u003cul\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/roles/{roleId}/permissions/{resource}/{action}  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                        \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v4/admin/roles/{roleId}/permissions  [DELETE]\u003c/i\u003e\u003c/b\u003e\u003c/li\u003e\n                \u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles(Deprecated)"],
        "summary": "Delete Role Permission",
        "operationId": "DeleteRolePermission",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/agerestrictions": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/agerestrictions  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eNote:\u003c/b\u003e\n                        \u003cdd\u003edifference in V3 response, format difference: Pascal case =\u003e Camel case\u003c/dd\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get age restriction status",
        "operationId": "AdminGetAgeRestrictionStatusV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "patch": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/agerestrictions  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update age restriction config value",
        "operationId": "AdminUpdateAgeRestrictionConfigV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/countries/agerestrictions": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get List Country age restriction",
        "operationId": "GetListCountryAgeRestriction",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountcommon.CountryAgeRestriction"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/countries/{countryCode}": {
      "patch": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries/{countryCode}  [PATCH]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update country's age restriction",
        "operationId": "UpdateCountryAgeRestriction",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Country Code ",
            "name": "countryCode",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CountryAgeRestrictionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.Country"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/search  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'.",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Search Users",
        "operationId": "AdminSearchUsersV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "platform ID",
            "name": "platformId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "role ID",
            "name": "roleId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "login ID",
            "name": "loginId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user ID",
            "name": "userId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "platform user ID",
            "name": "platformUserId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "display name",
            "name": "displayName",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the number of data retieved in a page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to ID of last item in for the previous page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to ID of first item in for the next page",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersByPlatformIDResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get User By User Id",
        "operationId": "AdminGetUserByUserIdV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      },
      "patch": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\t\t\n\t\t\n\t\t\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\"+\n\t\t\"\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \"+\n\t\t\"\u003cp\u003eSupported field {Country, DisplayName, LanguageTag}\u003c/p\u003e\"+\n\t\t\"\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\"+\n\t\t\"\u003cbr\u003e\u003cb\u003eSeveral case of updating email address\u003c/b\u003e\"+\n\t\t\"\u003cul\u003e\u003cli\u003eUser want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.\u003c/li\u003e\"+\n\t\t\"\u003cli\u003eUser want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. \u003c/li\u003e\"+\n\t\t\"\u003cli\u003eUser want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. \u003c/li\u003e",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update User",
        "operationId": "AdminUpdateUserV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10131\u003c/td\u003e\u003ctd\u003einvalid date of birth\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10132\u003c/td\u003e\u003ctd\u003einvalid email address\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/ban": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]'.",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Ban a single user",
        "operationId": "AdminBanUserV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]'.",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get user's bans",
        "operationId": "AdminGetUserBanV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban to only returns the active one",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/disable": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\n\t\tRequired permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'\n\t\t\u003cp\u003eFor \u003cstrong\u003eDeletion Account\u003c/strong\u003e purpose fill the reason with:\u003c/p\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eDeactivateAccount\u003c/strong\u003e : if your deletion request comes from user\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eAdminDeactivateAccount\u003c/strong\u003e : if your deletion request comes from admin\u003c/li\u003e\n\t\t\u003c/ul\u003e",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Disable a user",
        "operationId": "AdminDisableUserV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DisableUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/enable": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/status  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tRequired permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Enable a user",
        "operationId": "AdminEnableUserV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/password  [PUT]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update User Password",
        "operationId": "AdminResetPasswordV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}  [DELETE]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\t\t\t\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]'.\u003c/p\u003e\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eDelete link of user's account with platform. 'justice' platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is 'justice'.\n\t\t\t\u003cbr\u003eDelete link of justice platform will enable password token grant and password update. \u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded", "text/plain"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Delete the link of user's account with platform",
        "operationId": "AdminDeletePlatformLinkV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Namespace of the platform account to be deleted",
            "name": "platform_namespace",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/admin/namespaces/{namespace}/users/{userId}/roles": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles  [PATCH]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update User Roles, will replace all the existing roles",
        "operationId": "AdminPutUserRolesV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: /iam/v3/admin/namespaces/{namespace}/users/{userId}/roles  [PATCH]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\t\n\n\t\tRequired permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]'",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Save User Roles",
        "operationId": "AdminCreateUserRolesV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/countries/{countryCode}/agerestrictions": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/agerestrictions/countries/{countryCode}  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\t",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Public get age restriction by country code",
        "operationId": "PublicGetCountryAgeRestriction",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Country Code ",
            "name": "countryCode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.Country"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users  [POST]\u003c/i\u003e\u003c/b\u003e\n\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v4/public/namespaces/{namespace}/users  [POST]\u003c/i\u003e\u003c/b\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eNote:\u003c/b\u003e\n\t\u003cdd\u003e 1. v3 \u0026 v4 introduce optional verification code\u003c/dd\u003e\n\t\u003cdd\u003e 2. format difference（Pascal case =\u003e Camel case)\u003c/dd\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAvailable Authentication Types:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eEMAILPASSWD\u003c/strong\u003e: an authentication type used for new user registration through email.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Create User",
        "operationId": "PublicCreateUserV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/forgotPassword": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/forgot  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cp\u003e\u003cstrong\u003eSpecial note for publisher-game scenario:\u003c/strong\u003e Game Client should provide game namespace path parameter and Publisher Client should provide publisher namespace path parameter. \u003c/p\u003e\"+\n\t\t\"\u003cp\u003eThe password reset code will be sent to the publisher account's email address. \u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Request Password Reset Code",
        "operationId": "PublicForgotPasswordV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/resetPassword": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/reset  [POST]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Reset User Password",
        "operationId": "PublicResetPasswordV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint(Public): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint(Admin): \u003ci\u003e/iam/v3/admin/namespaces/{namespace}/users/{userId}  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\u003c/li\u003e\n\t\t\u003cli\u003e\u003cb\u003eNote:\u003c/b\u003e\n            \t\t\u003cdd\u003eformat difference in response: Pascal case =\u003e Camel case\u003c/dd\u003e\u003c/b\u003e\n\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get User By User ID",
        "operationId": "PublicGetUserByUserIDV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      },
      "patch": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint([PUT]): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me  [PUT]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint([PATCH]): \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me  [PATCH]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint([PATCH]): \u003ci\u003e/iam/v4/public/namespaces/{namespace}/users/me  [PATCH]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n                \u003cli\u003e\u003cb\u003eNote:  \u003c/b\u003e\n\t\t\t\t\t\u003cdd\u003e1. Prefer [PATCH] if client support PATCH method\u003c/dd\u003e\n\t\t\t\t\t\u003cdd\u003e2. Difference in V3/v4 request body, format difference: Pascal case =\u003e Camel case\u003c/dd\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \"+\n\t\t\"This endpoint require valid user access token to accessed. \u003cp\u003eSupported field {Country, DisplayName, LanguageTag}\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update User",
        "operationId": "PublicUpdateUserV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserResponse"
              }
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10131\u003c/td\u003e\u003ctd\u003einvalid date of birth\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10132\u003c/td\u003e\u003ctd\u003einvalid email address\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}/bans  [GET]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get user's bans",
        "operationId": "PublicGetUserBan",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban to only returns the active one",
            "name": "activeOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.UserBanResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/password  [PUT]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tThis endpoint need a valid user access token",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Update User Password",
        "operationId": "PublicUpdatePasswordV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/platforms/justice": {
      "get": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/justice  [GET]\u003c/i\u003e\u003c/b\u003e\n\t\t\t\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\n\t\tThis endpoint gets list justice platform account by providing publisher namespace and publisher userID.",
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Get User Justice Platform Accounts",
        "operationId": "GetListJusticePlatformAccounts",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": " Publisher User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.GetUserMapping"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v2/public/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [POST]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cp\u003e\u003cbr\u003e\u003cb\u003ePrerequisite:\u003c/b\u003e \n\t\tPlatform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The ticket’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The ticket’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The ticket’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The ticket’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The ticket's value is the Android’s device ID\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The ticket's value is the iOS’s device ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that doesn't run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The ticket’s value is the authorization code returned by Discord OAuth.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Link user's account with platform",
        "operationId": "PublicPlatformLinkV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform",
            "name": "ticket",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      },
      "delete": {
        "description": "\u003ch2\u003eThe endpoint is going to be deprecated\u003c/h2\u003e \u003c/br\u003e\n\t\t\t\u003cstrong\u003eEndpoint migration guide\u003c/strong\u003e\n\t\t\t\u003cul\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}  [DELETE]\u003c/i\u003e\u003c/b\u003e\n                \u003cli\u003e\u003cb\u003eSubstitute endpoint: \u003ci\u003e/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/all  [DELETE]\u003c/i\u003e\u003c/b\u003e\n                \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eDelete link of user's account with platform. 'justice' platform might have multiple accounts from different namespaces linked. platform_namespace need to be specified when the platform ID is 'justice'.\n\t\t\t\u003cbr\u003eDelete link of justice platform will enable password token grant and password update. \u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded", "text/plain"],
        "produces": ["application/json"],
        "tags": ["Users(Deprecated)"],
        "summary": "Delete the link of user's account with platform",
        "operationId": "PublicDeletePlatformLinkV2",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Namespace of the platform account to be deleted",
            "name": "platform_namespace",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          }
        }
      }
    },
    "/iam/v3/admin/bans": {
      "get": {
        "description": "Required permission 'ADMIN:BAN [READ]' \u003cbr\u003eBan type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  \u003cbr\u003eaction code : 10201",
        "produces": ["application/json"],
        "tags": ["Bans"],
        "summary": "Get list of ban types",
        "operationId": "AdminGetBansTypeV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BansV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/bans/reasons": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:BAN [READ]'\u003c/p\u003e\nBan reasons is the code available to justify ban assignment. It is applicable globally for any namespace.\n\u003cp\u003eaction code : 10202\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Bans"],
        "summary": "Get list of ban reasons",
        "operationId": "AdminGetListBanReasonV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BanReasonsV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/inputValidations": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:CONFIGURATION'[READ]\u003c/p\u003e\n\t\t\u003cp\u003eThis endpoint is to get list of input validation configuration.\u003c/p\u003e\n\t\t\u003cp\u003e\u003ccode\u003eregex\u003c/code\u003e parameter will be returned if \u003ccode\u003eisCustomRegex\u003c/code\u003e is true. Otherwise, it will be empty.\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["InputValidations"],
        "summary": "Admin Get Input Validations",
        "operationId": "AdminGetInputValidations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.InputValidationsResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:CONFIGURATION' [UPDATE]\u003c/p\u003e\n\t\t\u003cp\u003eThis endpoint is used to update input validation configuration.\u003c/p\u003e\n\t\tSupported \u003ccode\u003efield\u003c/code\u003e:\u003cbr\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003edisplayName\u003c/li\u003e\n\t\t\u003cli\u003epassword\u003c/li\u003e\n\t\t\u003cli\u003eusername\u003c/li\u003e\n\t\t\u003cli\u003eemail\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cp\u003eIf \u003ccode\u003eisCustomRegex\u003c/code\u003e is set to true, \u003ccode\u003eregex\u003c/code\u003e parameter will be used as input validation and the other parameters will be ignored. Otherwise, \u003ccode\u003eregex\u003c/code\u003e parameter will be ignored and regex for input validation will be generated based on the combination of the other parameters. \u003c/p\u003e\n\t\t\u003cp\u003eIf \u003ccode\u003eallowUnicode\u003c/code\u003e is set to true, unicode regex pattern will be use as the input validation and the other parameters will be ignored.\u003c/p\u003e\n\t\tSupported \u003ccode\u003eletterCase\u003c/code\u003e:\u003cbr\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003elowercase\u003c/li\u003e\n\t\t\u003cli\u003euppercase\u003c/li\u003e\n\t\t\u003cli\u003emixed: uppercase and lowercase\u003c/li\u003e\n\t\t\u003cli\u003emixed: uppercase and/or lowercase\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\tflexible special character non words with \u003ccode\u003eallowAllSpecialCharacters\u003c/code\u003e\u003cbr\u003e\n\t\t\u003cp\u003eif \u003ccode\u003eallowAllSpecialCharacters\u003c/code\u003e is set to true \u003ccode\u003especialCharacters\u003c/code\u003e will forced to empty. \u003cp\u003e\n\t\tSupported \u003ccode\u003especialCharacterLocation\u003c/code\u003e:\u003cbr\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003eanywhere\u003c/li\u003e\n\t\t\u003cli\u003emiddle\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cp\u003eIf \u003ccode\u003especialCharacters\u003c/code\u003e is empty, \u003ccode\u003especialCharacterLocation\u003c/code\u003e and \u003ccode\u003emaxRepeatingSpecialCharacter\u003c/code\u003e will be ignored.\u003c/p\u003e\n\t\t\u003cp\u003e\u003ccode\u003eminCharType\u003c/code\u003e is used to identify how many required criteria in the regex. The supported criteria are number, letter, special character, and letter case. If set to 0 or 1 means all criteria are optional. It can be set as much as the number of criteria enabled.\u003c/p\u003e\n\t\t\u003cp\u003eIf \u003ccode\u003eblockedWord\u003c/code\u003e is set by admin, any input from user which contain kind of blocked word(s) will be blocked for create/upgrade/update account\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["InputValidations"],
        "summary": "Admin Update Input Validations",
        "operationId": "AdminUpdateInputValidations",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.InputValidationUpdatePayload"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/inputValidations/{field}": {
      "delete": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:CONFIGURATION' [DELETE]\u003c/p\u003e\u003cp\u003eThis endpoint is used to reset input validation to the default input validation configurations\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["InputValidations"],
        "summary": "Admin Reset Input Validations",
        "operationId": "AdminResetInputValidations",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the input validation field to reset: email, username, displayName, or password",
            "name": "field",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/admins": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\n\nList all users that has admin role (role that has admin_role attribute set to true).\n\nThe endpoint will return all admin from all namespace when called from publisher namespace.\nWhen not called from publisher namespace, the endpoint will return all admin from the path namespace.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "List User Admins",
        "operationId": "ListAdminsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "The maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page. Composite values consist of created_at and id, the value is base64 encoded",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page. Composite values consist of created_at and id, the value is base64 encoded",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.GetUsersResponseWithPaginationV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]'\u003cbr\u003eaction code: 10138",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get age restriction status",
        "operationId": "AdminGetAgeRestrictionStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10169\u003c/td\u003e\u003ctd\u003eage restriction not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]' \u003cbr\u003e action code: 10122",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update age restriction config value",
        "operationId": "AdminUpdateAgeRestrictionConfigV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.AgeRestrictionResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [READ]\u003cbr\u003eaction code : 10139",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get List Country age restriction",
        "operationId": "AdminGetListCountryAgeRestrictionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.CountryV3Response"
              }
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/agerestrictions/countries/{countryCode}": {
      "patch": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:AGERESTRICTION [UPDATE]'\u003cbr\u003eaction code: 10123",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update country's age restriction",
        "operationId": "AdminUpdateCountryAgeRestrictionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Country Code ",
            "name": "countryCode",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CountryAgeRestrictionV3Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.CountryV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bans/users": {
      "get": {
        "description": "Required permission 'ADMIN:BAN [READ]' \u003cbr\u003eBan type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  \u003cbr\u003eaction code : 10201",
        "produces": ["application/json"],
        "tags": ["Bans"],
        "summary": "Get list of user filtered by ban types",
        "operationId": "AdminGetBannedUsersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "name": "activeOnly",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the ban type. You can see list of ban from GET /iam/v3/admin/bans",
            "name": "banType",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Pagination configuration of from what point the record will be selected, should be in positive number. Default is 0",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Pagination configuration for how much data need to be retrieved in on request, should be in positive number. Default is 20",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN [CREATE]'.\u003c/p\u003e\n\u003cp\u003eBulk ban user with specific type of ban. Ban types and reason can be queried. The maximum limit value is 100 userIDs\u003c/p\u003e\n\u003cp\u003eaction code : 10141 \u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Bans"],
        "summary": "Bulk ban user",
        "operationId": "AdminBanUserBulkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkBanCreateRequestV3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.ListBulkUserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bans/users/disabled": {
      "patch": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN [UPDATE]'.\u003c/p\u003e\n\u003cp\u003edisable bulk ban user. The maximum limit value is 100\u003c/p\u003e\n\u003cp\u003eaction code : 10142 \u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Bans"],
        "summary": "Bulk unban user",
        "operationId": "AdminUnbanUserBulkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BulkUnbanCreateRequestV3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.ListBulkUserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/bantypes": {
      "get": {
        "description": "Required permission 'ADMIN:BAN [READ]' \u003cbr\u003eBan type is the code\n\t\t\tavailable for ban assignment. It is applicable globally for any namespace.  \u003cbr\u003eaction code : 10201",
        "produces": ["application/json"],
        "tags": ["Bans"],
        "summary": "Get list of ban types",
        "operationId": "AdminGetBansTypeWithNamespaceV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.BansV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [READ]'\u003c/p\u003e\n\u003cp\u003eaction code: 10308\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Get clients by namespace",
        "operationId": "AdminGetClientsByNamespaceV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the count to skip",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client name, support fuzzy query",
            "name": "clientName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client type",
            "name": "clientType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client id, should follow UUID version 4 without hyphen",
            "name": "clientId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientsV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a new OAuth 2.0 client. Protected by the permission: ADMIN:NAMESPACE:{namespace}:CLIENT [CREATE]\u003cbr\u003e\n\t\tA new client automatically granted with these scopes: commerce, account, analytics, publishing, social.\u003cbr\u003e\n\t\tIn multi tenant mode, new confidential client will have default client role assigned to it. The role will have all \n\t\t\tpermissions to access all APIs that's supported by game server SDK and DS uploader. \u003cbr\u003e\n\t\taction code: 10301\u003cbr\u003e\n\t\t\u003cp\u003e\u003cstrong\u003eFields Description:\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eclientId\u003c/strong\u003e : The client ID. e.g f815e5c44f364993961be3b3f26a7bf4\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eclientName\u003c/strong\u003e : The client name. e.g E-commerce\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003esecret\u003c/strong\u003e : The client's secret. It's empty if the client's type is a public client. Otherwise, the client secret is required\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003enamespace\u003c/strong\u003e : The namespace where the client lives. e.g sample-game\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eredirectUri\u003c/strong\u003e : Contains the redirect URI used in OAuth callback. e.g https://example.net/platform\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthClientType\u003c/strong\u003e : The OAuth 2.0 client type. The client type determines whether the authorization needs Proof Of Key Exchange or not. \n\t\t\t\t\tA public client type doesn't have a client secret and should use PKCE flow. \n\t\t\t\t\tA confidential client type has a client secret and don't use PKCE flow\n\t\t\t\u003cul\u003eSupported oAuthClientType :\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ePublic\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eConfidential\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eaudiences\u003c/strong\u003e : List of target client IDs who is intended to receive the token. e.g [\"eaaa65618fe24293b00a61454182b435\", \"40073ee9bc3446d3a051a71b48509a5d\"]\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003ebaseUri\u003c/strong\u003e : A base URI of the application. It is used for making sure the token is intended to be used by the client. e.g https://example.net/platform\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eclientPermissions\u003c/strong\u003e : Contains the client's permissions\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003edeletable\u003c/strong\u003e : The flag to identify whether client is deletable (optional). default value: true\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eclientPlatform\u003c/strong\u003e: available client platform (optional). default value: \"\"\n  \t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003ePlaystation\u003c/li\u003e\n\t\t\t\t\u003cli\u003eXbox\u003c/li\u003e\n\t\t\t\t\u003cli\u003eSteam\u003c/li\u003e\n\t\t\t\t\u003cli\u003eEpic\u003c/li\u003e\n\t\t\t\t\u003cli\u003eIOS\u003c/li\u003e\n\t\t\t\t\u003cli\u003eGooglePlay\u003c/li\u003e\n\t\t\t\t\u003cli\u003eNintendo\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\u003c/li\u003e\n        \u003cli\u003e\u003cstrong\u003etwoFactorEnabled\u003c/strong\u003e: The flag to indicate whether 2FA validation is enable for this client. default value: false\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthAccessTokenExpiration\u003c/strong\u003e: a configurable expiration time for \u003cstrong\u003eaccess_token\u003c/strong\u003e, default value: 0 (mean fetch value from environment variable) \u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthRefreshTokenExpiration\u003c/strong\u003e: a configurable expiration time for \u003cstrong\u003erefresh_token\u003c/strong\u003e, default value: 0 (mean fetch value from environment variable)\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthAccessTokenExpirationTimeUnit\u003c/strong\u003e: a configurable expiration time unit for \u003cstrong\u003eaccess_token\u003c/strong\u003e, default value: SECONDS\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthRefreshTokenExpirationTimeUnit\u003c/strong\u003e: a configurable expiration time unit for \u003cstrong\u003erefresh_token\u003c/strong\u003e, default value: SECONDS\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Create Client",
        "operationId": "AdminCreateClientV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientCreationV3Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10364\u003c/td\u003e\u003ctd\u003eclient exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [READ]'\u003cbr\u003eaction code: 10309",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Get clients by namespace and client id. Multi tenant mode allows admin portal client to be accessible regardless of namespace path.",
        "operationId": "AdminGetClientsbyNamespacebyIDV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [DELETE]'\u003cbr\u003eaction code : 10310",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Delete Client",
        "operationId": "AdminDeleteClientV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "name": "clientId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20009\u003c/td\u003e\u003ctd\u003erequest_conflict\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Updates an OAuth 2.0 client. Protected by the permission: ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE].\n\t\t\t\tSpecify only the fields you want to update in the request payload, e.g. {\"ClientName\":\"E-commerce\", \"BaseUri\":\"https://example.net\"}\n\t\t\u003cbr\u003e action code: 10302\u003cbr\u003e\n\t\t\u003cp\u003e\u003cstrong\u003eFields Description:\u003c/strong\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eclientName\u003c/strong\u003e : The client name. It should not be empty if the field exists in the body. e.g E-commerce\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003enamespace\u003c/strong\u003e : The namespace where the client lives. e.g sample-game\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eredirectUri\u003c/strong\u003e : Contains the redirect URI used in OAuth callback. It should not be empty if the field exists in the body.  e.g https://example.net/platform\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eaudiences\u003c/strong\u003e : List of target client IDs who is intended to receive the token. e.g [\"eaaa65618fe24293b00a61454182b435\", \"40073ee9bc3446d3a051a71b48509a5d\"]\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003ebaseUri\u003c/strong\u003e : A base URI of the application. It is used in the audience checking for making sure the token is used by the right resource server. Required if the application type is a server. e.g https://example.net/platform\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eclientPermissions\u003c/strong\u003e : Contains the client's permissions\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003edeletable\u003c/strong\u003e : The flag to identify whether client is deletable (optional). e.g. true\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eclientPlatform\u003c/strong\u003e : available client platform (optional). default value: \"\".\n  \t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003ePlaystation\u003c/li\u003e\n\t\t\t\t\u003cli\u003eXbox\u003c/li\u003e\n\t\t\t\t\u003cli\u003eSteam\u003c/li\u003e\n\t\t\t\t\u003cli\u003eEpic\u003c/li\u003e\n\t\t\t\t\u003cli\u003eIOS\u003c/li\u003e\n\t\t\t\t\u003cli\u003eGooglePlay\u003c/li\u003e\n\t\t\t\t\u003cli\u003eNintendo\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\u003c/li\u003e\n        \u003cli\u003e\u003cstrong\u003etwoFactorEnabled\u003c/strong\u003e: The flag to indicate whether 2FA validation is enable for this client. default value: false\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthAccessTokenExpiration\u003c/strong\u003e: a configurable expiration time for \u003cstrong\u003eaccess_token\u003c/strong\u003e, default value: 0 (mean fetch value from environment variable)\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthRefreshTokenExpiration\u003c/strong\u003e: a configurable expiration time for \u003cstrong\u003erefresh_token\u003c/strong\u003e, default value: 0 (mean fetch value from environment variable)\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthAccessTokenExpirationTimeUnit\u003c/strong\u003e: a configurable expiration time unit for \u003cstrong\u003eaccess_token\u003c/strong\u003e, will use previous value if not specified\u003c/li\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eoauthRefreshTokenExpirationTimeUnit\u003c/strong\u003e: a configurable expiration time unit for \u003cstrong\u003erefresh_token\u003c/strong\u003e, will use previous value if not specified\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Update Client",
        "operationId": "AdminUpdateClientV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientUpdateV3Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientmodel.ClientV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions": {
      "put": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]'\u003c/p\u003e\n\u003cp\u003eaction code: 10307\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Update Client Permissions",
        "operationId": "AdminUpdateClientPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hypen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:CLIENT' [UPDATE]'\u003c/p\u003e\n\u003cp\u003eaction code: 10303\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Add Client Permissions",
        "operationId": "AdminAddClientPermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hypen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.ClientPermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/clients/{clientId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]'\u003cbr\u003eaction code : 10304",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Delete Client Permission",
        "operationId": "AdminDeleteClientPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID, should follow UUID version 4 without hyphen",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action, value must be in range 1-15",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/all/clients": {
      "get": {
        "description": "This is the API to Get All Active 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ] resource",
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Get All Third Party Platform Credential",
        "operationId": "RetrieveAllThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/all/clients/active": {
      "get": {
        "description": "This is the API to Get All Active 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:CLIENT [READ] resource",
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Get All Active Third Party Platform Active Credential",
        "operationId": "RetrieveAllActiveThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/sso": {
      "get": {
        "description": "This is the API to Get All Active SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:*:SSO [READ] resource",
        "produces": ["application/json"],
        "tags": ["SSO Credential"],
        "summary": "Get All SSO Platform Credential",
        "operationId": "RetrieveAllThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100), default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset, default 0",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All Active SSO Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients": {
      "get": {
        "description": "This is the API to Get 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [READ] resource",
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Retrieve Third Party Platform Credential",
        "operationId": "RetrieveThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Third Party Credential Found",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eThis is the API to Add 3rd Platform Credential.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eIt needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE] resource.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eapple\u003c/strong\u003e is base64 encoded private key.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eNo secret for \u003cstrong\u003eawscognito\u003c/strong\u003e, we only need to configure AWS Cognito Region and User Pool\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003ediscord\u003c/strong\u003e is client secret of the twitch client id.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eepicgames\u003c/strong\u003e is client secret of the epicgames client id.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003efacebook\u003c/strong\u003e is client secret of the facebook client id.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003egoogle\u003c/strong\u003e is client secret of the google OAuth client.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eNo secret for \u003cstrong\u003enintendo\u003c/strong\u003e, we only need to configure app id of the game\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eNo secret for \u003cstrong\u003enetflix\u003c/strong\u003e, we configure the Root, Public, Private Key certificate pem file and target environment; value: [sandbox, production]\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eoculus\u003c/strong\u003e is app secret of the oculus app.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eps4, ps5, and ps4web\u003c/strong\u003e is client secret of the psn web server.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003esteam\u003c/strong\u003e is the Steam Web API Key.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003esteamopenid\u003c/strong\u003e is the Steam Web API Key.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003etwitch\u003c/strong\u003e is client secret of the twitch client.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003elive\u003c/strong\u003e is the Relying Party Private Key in base64 encode PEM format.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003exblwebapi\u003c/strong\u003e is client secret of the xbl client.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eIf generic oauth flow is set to true: \u003c/p\u003e\n\t\t\t\t\t \u003cul\u003e\n\t\t\t\t\t \u003cli\u003eCurrent supported value for TokenAuthenticationType are \u003cstrong\u003ecode, idToken and bearerToken\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\t \u003cli\u003e\u003ccode\u003eTokenClaimsMapping\u003c/code\u003e is used to extract user info from idToken claims or user info endpoint response accessed using bearerToken. \n\t\t\t\t\t Its a JSON format with key should be \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eemail\u003c/code\u003e and \u003ccode\u003eavatarUrl\u003c/code\u003e \n\t\t\t\t\t since IAM will look up for these key when extracting user info. \u003cstrong\u003edefault claims keys : userIdentity/sub, name, email and avatarUrl/picture\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\t \u003c/ul\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Add Third Party Platform Credential",
        "operationId": "AddThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Third Party Credential Created",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "This is the API to Delete 3rd Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [DELETE] resource",
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Delete Third Party Platform Credential",
        "operationId": "DeleteThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Process Successful"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "\u003cp\u003eThis is the API to Add 3rd Platform Credential.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eIt needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE] resource.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eapple\u003c/strong\u003e is base64 encoded private key.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eNo secret for \u003cstrong\u003eawscognito\u003c/strong\u003e, we only need to configure AWS Cognito Region and User Pool\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003ediscord\u003c/strong\u003e is client secret of the twitch client id.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eepicgames\u003c/strong\u003e is client secret of the epicgames client id.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003efacebook\u003c/strong\u003e is client secret of the facebook client id.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003egoogle\u003c/strong\u003e is client secret of the google OAuth client.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eNo secret for \u003cstrong\u003enintendo\u003c/strong\u003e, we only need to configure app id of the game\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eNo secret for \u003cstrong\u003enetflix\u003c/strong\u003e, we configure the Root, Public, Private Key certificate pem file and target environment; value: [sandbox, production]\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eoculus\u003c/strong\u003e is app secret of the oculus app.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003eps4, ps5, and ps4web\u003c/strong\u003e is client secret of the psn web server.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003esteam\u003c/strong\u003e is the Steam Web API Key.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003esteamopenid\u003c/strong\u003e is the Steam Web API Key.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003etwitch\u003c/strong\u003e is client secret of the twitch client.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003elive\u003c/strong\u003e is the Relying Party Private Key in base64 encode PEM format.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe secret for \u003cstrong\u003exblwebapi\u003c/strong\u003e is client secret of the xbl client.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eIf generic oauth flow is set to true: \u003c/p\u003e\n\t\t\t\t\t \u003cul\u003e\n\t\t\t\t\t \u003cli\u003eCurrent supported value for TokenAuthenticationType is \u003cstrong\u003ecode, idToken and bearerToken\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\t \u003cli\u003e\u003ccode\u003eTokenClaimsMapping\u003c/code\u003e is used to extract user info from idToken claims or user info endpoint response accessed using bearerToken. \n\t\t\t\t\t Its a JSON format with key should be \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eemail\u003c/code\u003e and \u003ccode\u003eavatarUrl\u003c/code\u003e \n\t\t\t\t\t since IAM will look up for these key when extracting user info.\u003cstrong\u003edefault claims keys : userIdentity/sub, name, email and avatarUrl/picture\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\t \u003c/ul\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Update Third Party Platform Credential",
        "operationId": "UpdateThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ThirdPartyLoginPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients/domain": {
      "put": {
        "description": "\u003cp\u003eThis is the API to set 3rd Platform domain.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eIt needs ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [UPDATE] resource.\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Set Third Party Platform Credential's domain",
        "operationId": "UpdateThirdPartyLoginPlatformDomainV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PlatformDomainUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain config updated",
            "schema": {
              "$ref": "#/definitions/model.PlatformDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eThis is the API to unregister 3rd Platform domain.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eIt needs ADMIN:NAMESPACE:{namespace}:CLIENTDOMAIN [DELETE] resource.\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Unregister Third Party Platform Credential's domain",
        "operationId": "DeleteThirdPartyLoginPlatformDomainV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PlatformDomainDeleteRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Domain unregister succeeded"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/sso": {
      "get": {
        "description": "This is the API to Get SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [READ] resource",
        "produces": ["application/json"],
        "tags": ["SSO Credential"],
        "summary": "Retrieve SSO Platform Credential",
        "operationId": "RetrieveThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "SSO Credential Found",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "SSO Credential Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This is the API to Add SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [CREATE] resource.\u003ch2\u003eSupported platforms:\u003c/h2\u003e\u003cul\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003ediscourse\u003c/strong\u003e\u003c/li\u003ethe ssoUrl of the discourse is the discourse forum url. example: https://forum.example.com\n\t\t\t\u003cli\u003e\u003cstrong\u003eazure with SAML\u003c/strong\u003e\u003c/li\u003e\u003cb\u003eappId\u003c/b\u003e is an application identifier in IdP, in azure it's called EntityID\n\t\t\t\u003cb\u003eacsUrl\u003c/b\u003e is an endpoint on the service provider where the identity provider will redirect to with its authentication response. example: /iam/v3/sso/saml/azuresaml/authenticate \n\t\t\t\u003cb\u003efederationMetadataUrl\u003c/b\u003e is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship\n\t\t\t\u003c/ul\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["SSO Credential"],
        "summary": "Add SSO Platform Credential",
        "operationId": "AddThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SSO Credential Created",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "This is the API to Delete SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [DELETE] resource",
        "produces": ["application/json"],
        "tags": ["SSO Credential"],
        "summary": "Delete SSO Platform Credential",
        "operationId": "DeleteThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Process Successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "This is the API to Delete SSO Platform Credential. It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:SSO [UPDATE] resource",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["SSO Credential"],
        "summary": "Update SSO Platform Credential",
        "operationId": "UpdateThirdPartyLoginPlatformCredentialV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SSOPlatformCredentialResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}": {
      "get": {
        "description": "Get User By Platform User ID\n\t\t\nThis endpoint return user information by given platform ID and platform user ID \n\n\u003cstrong\u003enintendo platform user ID\u003c/strong\u003e: NSA ID need to be appended with Environment ID using colon as separator. e.g kmzwa8awaa:dd1\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Admin Get User By Platform User ID",
        "operationId": "AdminGetUserByPlatformUserIDV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform User ID",
            "name": "platformUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/roles/{roleId}/users": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint search admin users which have the roleId\u003c/p\u003e\n\t\t\t\u003cp\u003eNotes : this endpoint only accept admin role. Admin Role is role which have admin status and members.\n\t\t\tUse endpoint [GET] /roles/{roleId}/admin to check the role status\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code : 10140",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get Admin Users By RoleId",
        "operationId": "GetAdminUsersByRoleIdV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "The maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUsersResponseWithPaginationV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10157\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint search user who owns the given email address\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code : 10132",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User By Email Address",
        "operationId": "AdminGetUserByEmailAddressV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Email Address, should follow OWASP email format",
            "name": "emailAddress",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/bulk": {
      "post": {
        "description": "List User By User ID\nThis endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\nThis endpoint intended to list user information from the given list of userID and namespace\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "List User By User ID",
        "operationId": "AdminListUserIDByUserIDsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserIDsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListUserInformationResult"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/invite": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:INVITE [CREATE]\n\nUse this endpoint to invite admin or non-admin user and assign role to them. The role must be scoped to namespace.\nSubstitute the namespace in path parameter to desired role's namespace'. An admin user can only\nassign role to namespaces that the admin user has the required permission. \nRole is optional, if not specified then it will only assign User role\n\nThe invited admin will also assigned with \"User\" role by default.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Invite User",
        "operationId": "AdminInviteUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.InviteUserRequestV3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.InviteUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/linkhistories": {
      "get": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:USER [READ]\u003c/p\u003e\n               \u003cli\u003eif limit is not defined, The default limit is 100\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Search linking history of the query platform with platform user id",
        "operationId": "AdminQueryThirdPlatformLinkHistoryV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100), default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset, default 0",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Platform Id that want to be searched, supported values: steam, steamopenid, psn, xbox, epicgames, nintendo, oculus, aws cognito, facebook, google, discord, twitch, snapchat or amazon",
            "name": "platformId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform user id",
            "name": "platformUserId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LinkingHistoryResponseWithPaginationV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/platforms/justice": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:USER [READ] permission.\n\nReturns list of users ID and namespace with their Justice platform account, under a namespace. If user\ndoesn't have Justice platform account, the linkedPlatforms will be empty array.'\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Admin List Users V3",
        "operationId": "AdminListUsersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "number of returned data, default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "number of offset, default 0",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/accountcommon.ListUsersWithPlatformAccountsResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/search": {
      "get": {
        "description": "\u003cp\u003eRequired permission ADMIN:NAMESPACE:{namespace}:USER [READ]\u003c/p\u003e\n               \u003cp\u003eEndpoint behavior :\n               \u003cul\u003e\u003cli\u003eby default this endpoint searches all users on the specified namespace\u003c/li\u003e\n               \u003cli\u003eif query parameter is defined, endpoint will search users whose email address, display name, username, or third party partially match with the query\u003c/li\u003e\n               \u003cli\u003eif startDate and endDate parameters is defined, endpoint will search users which created on the certain date range\u003c/li\u003e\n               \u003cli\u003eif query, startDate and endDate parameters are defined, endpoint will search users whose email address and display name match and created on the certain date range\u003c/li\u003e\n               \u003cli\u003eif startDate parameter is defined, endpoint will search users that created start from the defined date\u003c/li\u003e\n               \u003cli\u003eif endDate parameter is defined, endpoint will search users that created until the defined date\u003c/li\u003e\n\u003cli\u003eif platformId parameter is defined and by parameter is using thirdparty, endpoint will search users based on the platformId they have linked to \u003c/li\u003e\n\u003cli\u003eif platformBy parameter is defined and by parameter is using thirdparty, endpoint will search users based on the platformUserId or platformDisplayName they have linked to, example value: platformUserId or platformDisplayName\u003c/li\u003e\n               \u003cli\u003eif limit is not defined, The default limit is 100\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n               \u003cp\u003eIn multi tenant mode :\n\u003cul\u003e\n\u003cli\u003eif super admin search in super admin namespace, the result will be all game admin user\u003c/li\u003e\n\u003cli\u003eif super admin search in game studio namespace, the result will be all game admin user and players under the game studio namespace\u003c/li\u003e\n\u003cli\u003eif super admin search in game namespace, the result will be all game admin users and players under the game namespace\u003c/li\u003e\n\u003cli\u003eif game admin search in their game studio namespace, the result will be all game admin user in the studio namespace\u003c/li\u003e\n\u003cli\u003eif game admin search in their game namespace, the result will be all player in the game namespace\u003c/li\u003e\n\u003c/ul\u003e\u003c/p\u003e\n             \u003cbr\u003eaction code : 10133",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Search User",
        "operationId": "AdminSearchUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query, can be either email address or display name",
            "name": "query",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100), default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset, default 0",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start Date, format YYYY-MM-DD",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End Date, format YYYY-MM-DD",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search by given attribute, possible values are emailAddress, displayName, username, and thirdPartyPlatform",
            "name": "by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Platform Id that want to be searched, supported values: steam, steamopenid, psn, xbox, epicgames, nintendo, oculus, aws cognito, facebook, google, discord, twitch, snapchat or amazon",
            "name": "platformId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search platformBy given attribute, possible values are platformDisplayName",
            "name": "platformBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.SearchUsersResponseWithPaginationV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/search/bulk": {
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint search user by the list of email addresses\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code : 10132",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get Bulk User By Email Address",
        "operationId": "AdminGetBulkUserByEmailAddressV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ListEmailAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Admin Get User By User Id",
        "operationId": "AdminGetUserByUserIdV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\n\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eSupported field {country, displayName, emailAddress, languageTag, dateOfBirth}\u003c/p\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\u003cp\u003eDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u003c/p\u003e\n\u003cbr\u003e\u003cb\u003eSeveral case of updating email address\u003c/b\u003e\n\u003cul\u003e\u003cli\u003eUser want to update email address of which have been verified, NewEmailAddress response field will be filled with new email address.\u003c/li\u003e\n\u003cli\u003eUser want to update email address of which have not been verified, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with new email address. \u003c/li\u003e\n\u003cli\u003eUser want to update email address of which have been verified and updated before, {LoginId, OldEmailAddress, EmailAddress} response field will be filled with verified email before. NewEmailAddress response field will be filled with newest email address. \u003c/li\u003e\n\u003cp\u003eaction code : 10103 \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User",
        "operationId": "AdminUpdateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [READ]'\u003c/p\u003e\n\u003cp\u003eThis endpoint retrieve the first page of the data if after and before parameters is empty\u003c/p\u003e\n\u003cp\u003eaction code : 10126\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get user's bans",
        "operationId": "AdminGetUserBanV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "name": "activeOnly",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of data returned in one query. The maximum value of the limit is 100 and the minimum value of the limit is 1. If you set this into -1, then it returns all data. Default: -1. \u003cem\u003eDoesn't work yet\u003c/em\u003e.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created before the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created after the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId} [CREATE]'.\u003c/p\u003e\n\u003cp\u003eBans a user with specific type of ban. Ban types and reason can be queried. \u003c/p\u003e\n\u003cp\u003eaction code : 10141 \u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Ban a single user",
        "operationId": "AdminBanUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/bans/{banId}": {
      "patch": {
        "description": "Required permission ADMIN:NAMESPACE:{namespace}:BAN:USER:{userId}\n[UPDATE] \u003cbr\u003eSet ban status for a single user for a specific ban. Retrieve\nuser ban and choose the ban ID. Set the form parameter to true/false to enable\nor disable the ban. \u003cbr\u003eaction code : 10142'\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Enable or disable ban for a single user",
        "operationId": "AdminUpdateUserBanV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ban ID, should follow UUID version 4 without hyphen",
            "name": "banId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.BanUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserBanResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10145\u003c/td\u003e\u003ctd\u003edisallow game access publisher user's ban\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/code/request": {
      "post": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n\u003cp\u003eThe verification code is sent to email address.\u003c/p\u003e\n\u003cp\u003eAvailable contexts for use : \u003c/p\u003e\n\u003col\u003e\n\t\u003cli\u003e\u003cstrong\u003eUserAccountRegistration\u003c/strong\u003e\n\t\t\u003cp\u003ea context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \n\t\t\u003cstrong\u003e\u003cem\u003eIt is the default context if the Context field is empty\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eUpdateEmailAddress\u003c/strong\u003e\n\t\t\u003cp\u003ea context type used for verify user before updating email address.(Without email address verified checking)\u003c/p\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eupgradeHeadlessAccount\u003c/strong\u003e\n\t\t\u003cp\u003eThe context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  \n\t\t\tIf this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.\u003c/p\u003e\n\t\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eaction code: 10116\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Send verification code to user",
        "operationId": "AdminSendVerificationCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10146\u003c/td\u003e\u003ctd\u003euserID not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/code/verify": {
      "post": {
        "description": "\u003cp\u003eWill verify account and consume code if validateOnly is set false in request body\u003c/p\u003e\t\n\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\nRedeems a verification code sent to a user to verify the user's contact address is correct\n\u003cp\u003eAvailable ContactType : \u003cb\u003eemail\u003cb/\u003e or \u003cb\u003ephone\u003cb/\u003e \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Verify or consume verification code sent to user",
        "operationId": "AdminVerifyAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10162\u003c/td\u003e\u003ctd\u003einvalid verification\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/codes": {
      "get": {
        "description": "[WARNING] This endpoint is only for testing purpose. \u003cbr\u003eThis endpoint get active user verification\n\t\tcode. There are 3 scenario of getting verification codes : after account registration, after reset password \n\t\trequest, and after headless account upgrade. All of them will be returned on this endpoint. Required permission\n \t\t'ADMIN:NAMESPACE:{namespace}:USER:{userId}:CODE' [READ] \u003cbr\u003eaction code: 10146",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get verification code sent to user",
        "operationId": "getUserVerificationCode",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.VerificationCodeResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/deletion/status": {
      "get": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [READ]' \u003cbr\u003eaction code : 10145",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User Deletion Status",
        "operationId": "AdminGetUserDeletionStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserDeletionStatusResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:DELETIONSTATUS:USER:{userId} [UPDATE]' \u003cbr\u003eaction code : 10144",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User Deletion Status",
        "operationId": "AdminUpdateUserDeletionStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateUserDeletionStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/headless/code/verify": {
      "post": {
        "description": "\u003cp\u003eIf validateOnly is set false, will upgrade headless account with verification code\u003c/p\u003e \nRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\n     \t\u003cp\u003eThe endpoint upgrades a headless account by linking the headless account with the email address and the password.\n\tBy upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM. \u003c/p\u003e\n     \t\u003cp\u003eThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \n\tIn order to get a verification code for the endpoint, please check the send verification code endpoint. \u003c/p\u003e\n     \t\u003cp\u003eThis endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.\u003cbr/\u003e\n\tSupported user data fields :\n\t\u003cul\u003e\n\t\t\u003cli\u003edisplayName\u003c/li\u003e\n\t\t\u003cli\u003edateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29\u003c/li\u003e\n\t\t\u003cli\u003ecountry : format ISO3166-1 alpha-2 two letter, e.g. US\u003c/li\u003e\n\t\u003c/ul\u003e\n\u003cbr\u003eaction code : 10124\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Verify or consume verification code. ",
        "operationId": "AdminUpgradeHeadlessAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/information": {
      "delete": {
        "description": "[WARNING] This endpoint is deleting user data from database directly by skipping GDPR flow.Required permissions 'ADMIN:NAMESPACE:{namespace}:INFORMATION:USER:{userId} [DELETE]'.",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Delete user's information",
        "operationId": "AdminDeleteUserInformationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:HISTORY:LOGIN:USER:{userId} [READ]'\u003cp\u003eNotes for this endpoint: \u003c/p\u003e \u003cul\u003e\u003cli\u003eThis endpoint retrieve the first page of the data if `after` and `before` parameters is empty.\u003c/li\u003e\u003cli\u003eThe maximum value of the limit is 100 and the minimum value of the limit is 1.\u003c/li\u003e\u003cli\u003eThis endpoint retrieve the next page of the data if we provide `after` parameters with valid Unix timestamp.\u003c/li\u003e\u003cli\u003eThis endpoint retrieve the previous page of the data if we provide `before` parameter with valid data Unix timestamp.\u003c/li\u003e\u003cul\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User's Login Histories",
        "operationId": "AdminGetUserLoginHistoriesV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "name": "before",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of data retrieved in a page",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/password": {
      "put": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PASSWORD:USER:{userId} [UPDATE]'",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User Password",
        "operationId": "AdminResetPasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateV3Request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions": {
      "put": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will REPLACE user's permissions with the ones defined in body\u003c/p\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User Permissions",
        "operationId": "AdminUpdateUserPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [CREATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will APPEND user's permissions with the ones defined in body\u003c/p\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Add User Permissions",
        "operationId": "AdminAddUserPermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.Permissions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Delete User Permission",
        "operationId": "AdminDeleteUserPermissionBulkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.PermissionDeleteRequest"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:PERMISSION:USER:{userId} [DELETE]'",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Delete User Permission",
        "operationId": "AdminDeleteUserPermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action (1..15)",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]'.\u003c/p\u003e\n\t\t\t\u003ch2\u003eJustice Platform Account\u003c/h2\u003e\n\t\t\t\u003cp\u003eThe permission ’ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId}’ [READ] \n\t\t\t\tis required in order to read the UserID who linked with the user.\u003c/p\u003e\n\t\t\t\u003cbr\u003eGets platform accounts that are already linked with user account\n        \t\u003cbr\u003eaction code : 10128",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get platform accounts linked to the user",
        "operationId": "AdminGetUserPlatformAccountsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserLinkedPlatformsResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice": {
      "get": {
        "description": "This endpoint gets list justice platform account by providing publisher namespace and publisher userID.",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User Justice Platform Accounts",
        "operationId": "AdminGetListJusticePlatformAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": " Publisher User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.GetUserMapping"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/justice/{targetNamespace}": {
      "get": {
        "description": "\u003cp\u003eThis endpoint requires the client access token as the bearer token. Required permission 'ADMIN:NAMESPACE:{namespace}:JUSTICE:USER:{userId} [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will support publisher access to game and game access to publisher\u003c/p\u003e\n\t\t\t\u003cp\u003eIf targetNamespace filled with publisher namespace then this endpoint will return its game user id and game namespace\u003c/p\u003e\n\t\t\t\u003cp\u003eIf targetNamespace filled with game namespace then this endpoint will return its publisher user id and publisher namespace\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get user mapping",
        "operationId": "AdminGetUserMapping",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Target namespace",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserMappingV3"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "post": {
        "description": "Required permission: ADMIN:NAMESPACE:{namespace}:USER:{userId} [CREATE]\n\nCreate Justice User from Publisher User information. It will check first if Justice User on target namespace already exist.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Create Justice User from Publisher User",
        "operationId": "AdminCreateJusticeUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Target namespace",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.CreateJusticeUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/link": {
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\nForce linking platform account to user User Account. This endpoint intended for admin to forcefully link account to user.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Link a Platform User Account to User Account",
        "operationId": "AdminLinkPlatformAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}": {
      "delete": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE]'.\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esnapchat\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eUnlink user's account from a specific platform. 'justice' platform might have multiple accounts from different namespaces linked.\n\t\t\t\u003cbr\u003e\u003ci\u003eplatformNamespace\u003c/i\u003e need to be specified when the platform ID is 'justice'.\n\t\t\t\u003cbr\u003e\n\t\t\t\u003cbr\u003eUnlink user's account from justice platform will enable password token grant and password update.\n\t\t\t\u003cbr\u003e\n\t\t\t\u003cbr\u003eIf you want to unlink user's account in a game namespace, you have to specify \u003ci\u003eplatformNamespace\u003c/i\u003e to that game namespace.\n\t\t\t\u003cbr\u003e\n\t\t\t\u003cbr\u003eaction code : 10121 \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Unlink user's account from specific platform",
        "operationId": "AdminPlatformUnlinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UnlinkUserPlatformRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link": {
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.\u003c/p\u003e\n\t\t\t\u003cp\u003e\u003cbr\u003e\u003cb\u003ePrerequisite:\u003c/b\u003e Platform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The ticket’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The ticket’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The ticket’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The ticket’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The ticket's value is the Android’s device ID\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The ticket's value is the iOS’s device ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e: The ticket’s value is the authorization code returned by Apple OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that does’nt run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The ticket’s value is the authorization code returned by Discord OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e: The ticket’s value is the aws cognito access token (JWT).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e: The ticket’s value is an access-token obtained from Epicgames EOS Account Service.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e: The ticket’s value is the authorization code(id_token) returned by Nintendo OAuth.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Link user's account with platform",
        "operationId": "AdminPlatformLinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform",
            "name": "ticket",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/linkStatus": {
      "post": {
        "description": "Admin get the link status of the third party platform token with user id.\u003cbr/\u003e\n\u003cp\u003e\nThis endpoint is used for checking whether the third party user represented by third party token is \nlinked with the corresponding user id.\n\u003c/p\u003e\n         \u003cp\u003eNotes:\u003c/p\u003e\n       \u003cul\u003e\n                 \u003cli\u003eRequired permission: ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]\u003c/li\u003e\n             \u003c/ul\u003e\n\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The platform_token’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The platform_token's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The platform_token’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Discord OAuth\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The device_id is the Android’s device ID\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The device_id is the iOS’s device ID.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Apple OAuth.(We will use this code to generate APP token)\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003ejustice\u003c/strong\u003e: The platform_token’s value is the designated user’s access token.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e: The platform_token’s value is an access-token obtained from Epicgames EOS Account Service.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eps4\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Sony OAuth.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eps5\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Sony OAuth.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e: The platform_token’s value is the authorization code(id_token) returned by Nintendo OAuth.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e: The platform_token’s value is the aws cognito access token or id token (JWT).\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003elive\u003c/strong\u003e: The platform_token’s value is xbox XSTS token\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003exblweb\u003c/strong\u003e: The platform_token’s value is code returned by xbox after login\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003enetflix\u003c/strong\u003e: The platform_token’s value is GAT (Gamer Access Token) returned by Netflix backend\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003esnapchat\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Snapchat OAuth.\u003c/li\u003e\n\u003c/ul\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Admin get the link status of the third party platform token with user id.",
        "operationId": "AdminGetThirdPartyPlatformTokenLinkStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "UserId",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform Token",
            "name": "platformToken",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.TokenThirdPartyLinkStatusResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10208\u003c/td\u003e\u003ctd\u003eplatform token expired\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles": {
      "delete": {
        "description": "Required permission 'ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Delete User Roles",
        "operationId": "AdminDeleteUserRolesV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      },
      "patch": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE] permission.\n\nUser's roles will be updated with given roles (replacing current user's role). Request body need to specify allowed namespace for given role to support new role restriction.\nSkipped the check whether the user performing the request is a role manager / assigner since there is a plan to discard the role manager / assigner.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Admin Save User Role V3",
        "operationId": "AdminSaveUserRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Array of Role ID to be assigned with allowed namespace",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.NamespaceRoleRequest"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/roles/{roleId}": {
      "post": {
        "description": "\u003cp\u003eThis endpoint adds role to user. Required permission ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [UPDATE]\u003c/p\u003e\n\u003cp\u003eaction code: 10109\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Add User Role",
        "operationId": "AdminAddUserRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10160\u003c/td\u003e\u003ctd\u003euser already has the role\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10161\u003c/td\u003e\u003ctd\u003euser already the role member\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eThis endpoint removes role from user. Required permission ADMIN:NAMESPACE:{namespace}:ROLE:USER:{userId} [DELETE]\u003c/p\u003e\n\u003cp\u003eaction code: 10110\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Delete User Role",
        "operationId": "AdminDeleteUserRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10159\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10156\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/status": {
      "patch": {
        "description": "Required permissions 'ADMIN:NAMESPACE:{namespace}:USERSTATUS:USER:{userId} [UPDATE]'\n\t\t\u003cp\u003eThis endpoint disable or enable user account. Set the enable status on the request body to true to enable user account or set to false to disable it. \u003c/p\u003e\n\t\t\u003cp\u003eDisable user for \u003cstrong\u003eAccount Disable \u003c/strong\u003e purpose fill the reason with:\u003c/p\u003e\n\t\t\u003cul\u003e\n\t\t\u003cli\u003e\u003cstrong\u003eAdminDeactivateAccount\u003c/strong\u003e : if your disable account request comes from admin\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003cp\u003eEnable user ignore field 'reason' in the request body. \u003c/p\u003e\n\t\t\u003cbr\u003eaction code : 10143",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update user status",
        "operationId": "AdminUpdateUserStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpdateUserStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/users/{userId}/verify": {
      "put": {
        "description": "\u003cp\u003eThis endpoint force verify user. Required permission ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]\u003c/p\u003e\n\u003cp\u003eaction code: 10118\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Verify user without verification code",
        "operationId": "AdminVerifyUserWithoutVerificationCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/namespaces/{namespace}/{clientId}/secret": {
      "put": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:CLIENT [UPDATE]'\u003c/br\u003e",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "summary": "Update Client Secret",
        "operationId": "AdminUpdateClientSecretV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientmodel.V3ClientUpdateSecretRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/roles": {
      "get": {
        "description": "Required permission 'ADMIN:ROLE [READ]'\u003cbr\u003e \u003cp\u003eaction code: 10414\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Roles",
        "operationId": "AdminGetRolesV3",
        "parameters": [
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "name": "isWildcard",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseWithManagersAndPaginationV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Required permission 'ADMIN:ROLE [CREATE]'\n\nCreate role request body:\n\t- roleName: specify role name, alphanumeric, cannot have special character (required)\n\t- permissions: specify the permission that this role have\n\t- managers: specify list of user that will act as the managers of this role\n\t- members: specify list of user that will act as the members of this role\n\t- adminRole: specify if role is for admin user (default false)\n\t- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n\t- deletable: specify if role can be deleted or not (default true)\n\n\u003cbr\u003eaction code: 10401",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Create Role",
        "operationId": "AdminCreateRoleV3",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleCreateV3Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/accountcommon.RoleV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10466\u003c/td\u003e\u003ctd\u003einvalid role members\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}": {
      "get": {
        "description": "Required permission 'ADMIN:ROLE [READ]'\u003cbr\u003e \u003cp\u003eaction code: 10419\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Role",
        "operationId": "AdminGetRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ''ADMIN:ROLE [DELETE]'' \u003cbr\u003eaction code: 10403",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Delete Role",
        "operationId": "AdminDeleteRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20009\u003c/td\u003e\u003ctd\u003erequest_conflict\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Required permission 'ADMIN:ROLE [UPDATE]'\n\nUpdate role request body:\n\t- roleName: specify role name, alphanumeric, cannot have special character (required)\n\t- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n\t- deletable: specify if role can be deleted or not (optional)\n\n\u003cbr\u003eaction code: 10402",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Update Role",
        "operationId": "AdminUpdateRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/admin": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\n\t\t\t\u003cp\u003eaction code: 10420\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Role Admin Status",
        "operationId": "AdminGetRoleAdminStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleAdminStatusResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\n\t\t\t\u003cp\u003eRole can be set as admin role only when it has at least 1 manager.\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code: 10412",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Set Role as Admin Role",
        "operationId": "AdminUpdateAdminRoleStatusV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10467\u003c/td\u003e\u003ctd\u003erole has no manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e code: 10413",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Remove Role Admin Status",
        "operationId": "AdminRemoveRoleAdminV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/managers": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [READ]'\u003c/p\u003e\n\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e\u003cbr/\u003e\n\t\t\taction code: 10415",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Role Managers",
        "operationId": "AdminGetRoleManagersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleManagersResponsesV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e\n\t\t\t\u003cbr\u003e\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\u003cbr\u003eaction code: 10408",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Add Role Managers",
        "operationId": "AdminAddRoleManagersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10468\u003c/td\u003e\u003ctd\u003erole manager exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e \u003cbr\u003e action code: 10409",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Remove Role Managers",
        "operationId": "AdminRemoveRoleManagersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleManagersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/members": {
      "get": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [READ]'\u003c/p\u003e\n\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\n\u003cp\u003eaction code: 10416\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Role Members",
        "operationId": "AdminGetRoleMembersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleMembersResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\n\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e \u003cbr\u003eaction code: 10410\u003c/br\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Add Role Members",
        "operationId": "AdminAddRoleMembersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10469\u003c/td\u003e\u003ctd\u003erole member exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eAdmin roles has its members listed in the role.\u003c/p\u003e\n\t\t\t\u003cp\u003eRole can only be assigned to other users by the role's manager.\u003c/p\u003e \u003cbr\u003e action code: 10411",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Remove Role Members",
        "operationId": "AdminRemoveRoleMembersV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleMembersRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/permissions": {
      "put": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will REPLACE role's permissions with the ones defined in body\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code: 10405\u003cbr\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Update Role Permissions",
        "operationId": "AdminUpdateRolePermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will ATTACH permission(s) into the role\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code: 10404\u003cbr\u003e\n\t\t\t\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\t\t\t\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\t\t\t\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\t\t\t\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\t\t\t\u003cp\u003eSyntax reference\u003c/p\u003e\n\t\t\t\u003cp\u003eFields:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\t\t\t\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\t\t\t\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\t\t\t\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t\u003cp\u003eSpecial characters:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\t\t\t\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\t\t\t\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\t\t\t\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\t\t\t\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\t\t\t\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\t\t\t\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\t\t\t\u003c/ol\u003e\n\t\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Add Role Permissions",
        "operationId": "AdminAddRolePermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission 'ADMIN:ROLE [UPDATE]'",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Delete Role",
        "operationId": "AdminDeleteRolePermissionsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/admin/roles/{roleId}/permissions/{resource}/{action}": {
      "delete": {
        "description": "Required permission 'ADMIN:ROLE [UPDATE]' \u003cbr\u003eaction code: 10406\u003cbr\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Delete Role Permission",
        "operationId": "AdminDeleteRolePermissionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Resource Name",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Action, value must be in range 1-15",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/admin/users/me": {
      "get": {
        "description": "\u003cp\u003eRequire valid user authorization\u003cbr\u003eGet my user data\u003cbr\u003eaction code : 10147 \u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get My User",
        "operationId": "AdminGetMyUserV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/authenticate": {
      "post": {
        "description": "This endpoint is being used to authenticate a user account. \nIt validates user's email / username and password.\nDeactivated or login-banned users are unable to login.\nRedirect URI and Client ID must be specified as a pair and only used to redirect to the specified redirect URI in case the requestId is no longer valid.\n\n\u003ch2\u003eDevice Cookie Validation\u003c/h2\u003e\n\nDevice Cookie is used to protect the user account from brute force login attack, \u003ca target=\"_blank\" href=\"https://owasp.org/www-community/Slow_Down_Online_Guessing_Attacks_with_Device_Cookies\"\u003emore detail from OWASP\u003ca\u003e.\nThis endpoint will read device cookie from cookie \u003cb\u003eauth-trust-id\u003c/b\u003e. If device cookie not found, it will generate a new one and set it into cookie when successfully authenticate.\n\nAction code: 10801",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Authentication API",
        "operationId": "UserAuthenticationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Account username",
            "name": "user_name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Account password",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Request ID",
            "name": "request_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Redirect URI",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Extend expiration date of refresh token",
            "name": "extend_exp",
            "in": "formData"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect successful requests to consent page with \"list of consent\" in query params.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/v3/authenticateWithLink": {
      "post": {
        "description": "This endpoint is being used to authenticate a user account and perform platform link. \nIt validates user's email / username and password. \nIf user already enable 2FA, then invoke \u003ci\u003e/mfa/verify\u003c/i\u003e using \u003cb\u003emfa_token\u003c/b\u003e from this endpoint response.\n\n\u003ch2\u003eDevice Cookie Validation\u003c/h2\u003e\n\nDevice Cookie is used to protect the user account from brute force login attack, \u003ca target=\"_blank\" href=\"https://owasp.org/www-community/Slow_Down_Online_Guessing_Attacks_with_Device_Cookies\"\u003emore detail from OWASP\u003ca\u003e.\nThis endpoint will read device cookie from cookie \u003cb\u003eauth-trust-id\u003c/b\u003e. If device cookie not found, it will generate a new one and set it into cookie when successfully authenticate.\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Authentication with platform link",
        "operationId": "AuthenticationWithPlatformLinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Account username",
            "name": "username",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Account password",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform linking Token",
            "name": "linkingToken",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "client_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Extend expiration date of refresh token",
            "name": "extend_exp",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeed to authenticate and link platform account.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "400": {
            "description": "Invalid username or password.",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Need 2FA.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "409": {
            "description": "User already link this platform's another account'.",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/headless/token": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is being used to create headless account after 3rd platform authenticated, and response token . \n\t\t\t\t\tThe 'linkingToken' in request body is received from \"/platforms/{platformId}/token\" \n\t\t\t\t\twhen 3rd platform account is not linked to justice account yet.'\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Create headless account and response token",
        "operationId": "GenerateTokenByNewHeadlessAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Platform linking Token",
            "name": "linkingToken",
            "in": "formData",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Extend expiration date of refresh token",
            "name": "extend_exp",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeed to create headless account and response token info.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "400": {
            "description": "Invalid platform linking token or clientID not match.",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid Basic header.",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Platform linking token not found.",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/link/code/request": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is being used to request the one time code [8 length] for headless account to link or upgrade to a full account.\u003cbr\u003e\n\t\tIt require a valid user token.\u003cbr\u003e\n\t\tShould specify the target platform id and current user should already linked to this platform.\u003cbr\u003e\n\t\tCurrent user should be a headless account.\u003cbr\u003e\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ejustice\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eps4\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eps5\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003elive\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003exblweb\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enetflix\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esnapchat\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Generate one time linking code",
        "operationId": "RequestOneTimeLinkingCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Target platform ID for linking",
            "name": "platformId",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Succeed to one time code.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.OneTimeLinkingCodeResponse"
            }
          }
        }
      }
    },
    "/iam/v3/link/code/validate": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is being used to validate one time link code.\u003cbr\u003e\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Validate one time linking code",
        "operationId": "ValidateOneTimeLinkingCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "one time linking code",
            "name": "oneTimeLinkCode",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Succeed to validate one time code.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.OneTimeLinkingCodeValidationResponse"
            }
          }
        }
      }
    },
    "/iam/v3/link/token/exchange": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is being used to generate user's token by one time link code.\u003cbr\u003e\n\t\tIt require publisher ClientID\u003cbr\u003e\n\t\tIt required a code which can be generated from \u003cstrong\u003e/iam/v3/link/code/request\u003c/strong\u003e.\u003cbr\u003e\n\t\t\u003c/p\u003e\n\t\t\u003cp\u003eThis endpoint support creating transient token by utilizing \u003cstrong\u003eisTransient\u003c/strong\u003e param:\n\t\t\u003cbr\u003e\u003cstrong\u003eisTransient=true\u003c/strong\u003e will generate a transient token with a short Time Expiration and without a refresh token\n\t\t\u003cbr\u003e\u003cstrong\u003eisTransient=false\u003c/strong\u003e will consume the one-time code and generate the access token with a refresh token.\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Generate publisher token by headless account's one time link code",
        "operationId": "RequestTokenByOneTimeLinkCodeResponseV3",
        "parameters": [
          {
            "type": "string",
            "description": "one time linking code",
            "name": "oneTimeLinkCode",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "publisher clientID",
            "name": "client_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "will produce transient token ",
            "name": "isTransient",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeed to generate user token by one time link code.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          }
        }
      }
    },
    "/iam/v3/location/country": {
      "get": {
        "description": "\u003cp\u003eThis endpoint get country location based on the request.\u003c/p\u003e",
        "consumes": [""],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Get Country Location",
        "operationId": "GetCountryLocationV3",
        "responses": {
          "200": {
            "description": "Country Location info returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.CountryLocationResponse"
            }
          }
        }
      }
    },
    "/iam/v3/logout": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to remove \u003cb\u003eaccess_token\u003c/b\u003e, \u003cb\u003erefresh_token\u003c/b\u003e from cookie and revoke token from usage.\u003c/p\u003e\n\t\t\u003cp\u003eSupported methods:\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003eVerifyToken to verify token from header\u003c/li\u003e\n\t\t\t\t\u003cli\u003eAddTokenToRevocationList to revoke token with TTL\u003c/li\u003e\n\t\t\t\u003c/ul\u003e",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Logout",
        "operationId": "Logout",
        "responses": {
          "204": {
            "description": "Logout successfully"
          }
        }
      }
    },
    "/iam/v3/namespace/{namespace}/token/request": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is being used to request the code to generate publisher user's game token.\u003cbr\u003e\n\t\tIt require a valid user token with publisher namespace.\u003cbr\u003e\n\t\tPath namespace should be a game namespace.\u003cbr\u003e\n\t\tClient ID should match the target namespace.\n\t\tIt response a code and it can be consumed by \u003cstrong\u003e/iam/v3/token/exchange\u003c/strong\u003e\n\t\t\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Request code to get game token",
        "operationId": "RequestGameTokenCodeResponseV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID for target namespace",
            "name": "client_id",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Succeed to generate token.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.GameTokenCodeResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/platformToken": {
      "get": {
        "description": "Admin Retrieve User Third Party Platform Token\u003cbr/\u003e\n\u003cp\u003e\nThis endpoint used for retrieving third party platform token for user that login using third party,\n         if user have not link requested platform in game namespace, will try to retrieving third party platform token from publisher namespace.\nPassing platform group name or it's member will return same access token that can be used across the platform members. \n\u003c/p\u003e\n         \u003cp\u003eNotes:\u003c/p\u003e\n       \u003cul\u003e\n                 \u003cli\u003eRequired permission: ADMIN:NAMESPACE:{namespace}:USER:{userId} [READ]\u003c/li\u003e\n             \u003c/ul\u003e\n\u003cp\u003eThe third party platform and platform group covered for this is:\u003c/p\u003e\n\u003cul\u003e\t\t\t\t\n\t\u003cli\u003e(psn) ps4web\u003c/li\u003e\n\t\u003cli\u003e(psn) ps4\u003c/li\u003e\n\t\u003cli\u003e(psn) ps5\u003c/li\u003e\n\t\u003cli\u003exbox live\u003c/li\u003e\n\t\u003cli\u003esteam\u003c/li\u003e\n\u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "Admin Retrieve User Third Party Platform Token",
        "operationId": "AdminRetrieveUserThirdPartyPlatformTokenV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "UserId",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenThirdPartyResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "404": {
            "description": "Platform Token Not Found",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/admin/namespaces/{namespace}/users/{userId}/revoke": {
      "post": {
        "description": "\u003cp\u003eThis endpoint revokes all access tokens and refresh tokens a user has prior the revocation time.\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint requires authorized requests header with valid access token.\u003c/p\u003e\n\t\t\t\u003cp\u003eRequired permission 'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/p\u003e\n\t\t\t\u003cp\u003eIt is a convenient feature for the developer (or admin) who wanted to revokes all user's access tokens and refresh tokens generated before some period of time.\u003c/p\u003e\n\t\t\t\u003cp\u003eaction code : 10707\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "Revokes user's tokens'",
        "operationId": "RevokeUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User to be revoked",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user revoked"
          },
          "400": {
            "description": "invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Token is not exist, expired, or invalid",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "insufficient permission",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/authorize": {
      "get": {
        "description": "Initializes OAuth2.0 authorization code flow\u003cbr/\u003e\n\u003cp\u003eThe endpoint stores authorization request and redirects to login page with the authorization request id.\n\tThe user can then do the authentication on the login page. \n\tThe user will be redirected back to the requesting client with authorization code if successfully authenticated. \n\u003c/p\u003e\n\u003cp\u003eOnly authorization code flow supported by this endpoint, implicit flow is not supported.\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAuthorize success\u003c/strong\u003e: \n\t\tredirects to login page with the following information: ?request_id={authorization_request_id}\u003c/p\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAuthorize failure\u003c/strong\u003e: \n\t\tredirects to the given redirect uri with the following information:\n\t\t?error={error_code}\u0026error_description={error description}\u003c/p\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\t\u003cp\u003eFollowing are the error code based on the specification:\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cp\u003einvalid_request: The request is missing a required parameter, \n\t\tincludes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.\u003c/p\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003eserver_error: \n\t\tThe authorization server encountered an unexpected condition that prevented it from fulfilling the request.\u003c/p\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003eunauthorized_client: The client is not authorized to request a token using this method.\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003eaccess_denied: The resource owner or authorization server denied the request.\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003einvalid_scope: The requested scope is invalid, unknown, or malformed.\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003eunsupported_response_type: The authorization server does not support obtaining a token using this method.\u003c/p\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cp\u003etemporarily_unavailable: The authorization server is currently unable to handle the request \n\t\tdue to a temporary overloading or maintenance of the server.\u003c/p\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\t\u003cp\u003ePlease refer to the RFC for more information about authorization code flow: https://tools.ietf.org/html/rfc6749#section-4.1\u003c/p\u003e\u003cbr\u003e\n\taction code: 10701\n\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "OAuth2 authorize API",
        "operationId": "AuthorizeV3",
        "parameters": [
          {
            "enum": ["code"],
            "type": "string",
            "default": "code",
            "description": "Supported response type : 'code'",
            "name": "response_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Registered client ID",
            "name": "client_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Redirect URI registered for requesting client. Required if client registered with multiple redirect URI. Registered redirect uri will be assigned if left empty.",
            "name": "redirect_uri",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Random value for preventing cross-site request forgery used by client.",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "default": "commerce account social publishing analytics",
            "description": "Defines the requested access request scope. Can be multiple values delimited by whitespace.",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Value generated by transforming code verifier using code challenge method. Mandatory for public client.",
            "name": "code_challenge",
            "in": "query"
          },
          {
            "enum": ["S256", "plain"],
            "type": "string",
            "default": "plain",
            "description": "Method that is used to transform code verifier to code challenge",
            "name": "code_challenge_method",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Custom query to tell authorization web which page to present to user",
            "name": "target_auth_page",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "If create new headless account when login by new third platform user",
            "name": "createHeadless",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Use Redirect URI as the Login URL after resetting password when got locked",
            "name": "useRedirectUriAsLoginUrlWhenLocked",
            "in": "query"
          },
          {
            "type": "string",
            "description": "One time link code for headless account to link. Can get from [/iam/v3/link/code/request]",
            "name": "oneTimeLinkCode",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirected to login page with either request_id or error.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/v3/oauth/introspect": {
      "post": {
        "description": "\u003cp\u003eThis endpoint returns information about an access token intended to be used by resource servers or other internal servers.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThis endpoint requires authorized requests header with valid basic or bearer token.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eaction code : 10705\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "OAuth2 token introspection API",
        "operationId": "TokenIntrospectionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Access Token / Refresh Token",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenIntrospectResponse"
            }
          },
          "400": {
            "description": "invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "invalid bearer or basic authorization header",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/jwks": {
      "get": {
        "description": "\u003cp\u003eThis endpoint serves public keys for verifying JWT access tokens generated by this service.\u003c/p\u003e\n\t\t\t\u003cp\u003eWhen a client application wants to verify a JWT token, it needs to get the 'kid' value found in the JWT token header and use it\n\t\t\tto look up the corresponding public key from a set returned by this endpoint. The client application can then use that public key to verify the JWT.\u003c/p\u003e\n\t\t\t\u003cp\u003eA client application might cache the keys so it doesn't need to do request every time it needs to verify a JWT token. If a client application\n\t\t\tcaches the keys and a key with the same 'kid' cannot be found in the cache, it should then try to refresh the keys by making a request to this\n\t\t\tendpoint again.\u003c/p\u003e\n\t\t\t\u003cp\u003ePlease refer to the RFC for more information about JWK (JSON Web Key): https://tools.ietf.org/html/rfc7517\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code : 10709",
        "consumes": [""],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "JSON Web Key Set for verifying JWT",
        "operationId": "GetJWKSV3",
        "responses": {
          "200": {
            "description": "JWKS returned",
            "schema": {
              "$ref": "#/definitions/oauthcommon.JWKSet"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/mfa/code": {
      "post": {
        "description": "Send 2FA code\u003cbr/\u003e\n\u003cp\u003eThis endpoint is used for sending 2FA code.\u003c/p\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "Send 2FA code",
        "operationId": "SendMFAAuthenticationCode",
        "parameters": [
          {
            "type": "string",
            "description": "mfa token",
            "name": "mfaToken",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "factor",
            "name": "factor",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "client id",
            "name": "clientId",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Code sent"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10189\u003c/td\u003e\u003ctd\u003einvalid factor\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/mfa/factor/change": {
      "post": {
        "description": "Change 2FA method\u003cbr/\u003e\n\u003cp\u003eThis endpoint is used for change 2FA method. Only enabled methods are accepted.\u003c/p\u003e\n\u003cp\u003eSupported methods:\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003eauthenticator\u003c/li\u003e\n\t\u003cli\u003ebackupCode\u003c/li\u003e\n\t\u003cli\u003eemail\u003c/li\u003e\n\u003c/ul\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "Change 2FA method",
        "operationId": "Change2FAMethod",
        "parameters": [
          {
            "type": "string",
            "description": "mfa token",
            "name": "mfaToken",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "factor",
            "name": "factor",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Method changed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10189\u003c/td\u003e\u003ctd\u003einvalid factor\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/mfa/verify": {
      "post": {
        "description": "Verify 2FA code\u003cbr/\u003e\n\u003cp\u003eThis endpoint is used for verifying 2FA code.\u003c/p\u003e\n         \u003ch2\u003e2FA remember device\u003c/h2\u003e\n         \u003cp\u003eTo remember device for 2FA, should provide cookie: device_token or header: Device-Token\u003c/p\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "Verify 2FA code",
        "operationId": "Verify2FACode",
        "parameters": [
          {
            "type": "string",
            "description": "mfa token",
            "name": "mfaToken",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "factor",
            "name": "factor",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "code",
            "name": "code",
            "in": "formData",
            "required": true
          },
          {
            "type": "boolean",
            "description": "remember device",
            "name": "rememberDevice",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/namespaces/{namespace}/users/{userId}/platforms/{platformId}/platformToken": {
      "get": {
        "description": "Retrieve User Third Party Platform Token\u003cbr/\u003e\n\u003cp\u003e\nThis endpoint used for retrieving third party platform token for user that login using third party,\nif user have not link requested platform in game namespace, will try to retrieving third party platform token from publisher namespace.\nPassing platform group name or it's member will return same access token that can be used across the platform members. \n\u003c/p\u003e\n\u003cp\u003eThe third party platform and platform group covered for this is:\u003c/p\u003e\n\u003cul\u003e\t\t\t\t\n\t\u003cli\u003e(psn) ps4web\u003c/li\u003e\n\t\u003cli\u003e(psn) ps4\u003c/li\u003e\n\t\u003cli\u003e(psn) ps5\u003c/li\u003e\n\t\u003cli\u003eepicgames\u003c/li\u003e\n\t\u003cli\u003etwitch\u003c/li\u003e\n\t\u003cli\u003eawscognito\u003c/li\u003e\n\u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "Retrieve User Third Party Platform Token",
        "operationId": "RetrieveUserThirdPartyPlatformTokenV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "UserId",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenThirdPartyResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "404": {
            "description": "Platform Token Not Found",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/platforms/{platformId}/authorize": {
      "get": {
        "description": "Generate url to request auth code from third party platform \u003cbr\u003e\n               \u003ch2\u003eSupported platforms:\u003c/h2\u003e\u003cul\u003e\n               \u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to steam login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating user steam.\n               \u003cli\u003e\u003cstrong\u003exblweb\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to xbox login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating xbox user.\n               \u003cli\u003e\u003cstrong\u003eps4web\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to psn login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating psn user.\n               \u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to Epicgames OAuth login page. then redirect to platform\n               authenticate endpoint after successfully authenticating an Epicgames credential\n               \u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to twitch login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating twitch user.\n               \u003cli\u003e\u003cstrong\u003eazure\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to azure login page, then redirect back to platform\n               authenticate(saml) endpoint after successfully authenticating azure user.\n               \u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to facebook login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating facebook user.\n               \u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to google login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating google user.\n\t\t\t\t\t\t\t \u003cli\u003e\u003cstrong\u003esnapchat\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to snapchat login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating snapchat user.\n\t\t\t\t\t\t\t \u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to discord login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating discord user.\n               \u003cli\u003e\u003cstrong\u003eamazon\u003c/strong\u003e\u003c/li\u003eThis endpoint redirects to amazon login page, then redirect back to platform\n               authenticate endpoint after successfully authenticating amazon user.\n               \u003c/ul\u003e action code : 10702'",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "Generate url to request auth code from third party platform.",
        "operationId": "AuthCodeRequestV3",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "name": "request_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "client_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Redirect URI",
            "name": "redirect_uri",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to client’s redirect URI with either code or error on the query parameter",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/v3/oauth/platforms/{platformId}/token": {
      "post": {
        "description": "\u003cp\u003ePlatform token grant specifically used for performing token grant using platform, e.g. Steam, Justice, etc. The endpoint automatically create an account if the account associated with the platform is not exists yet.\n\t\t\tThis endpoint requires all requests to have Authorization header set with Basic access authentication\n\t\t\tconstructed from client id and client secret. For publisher-game namespace schema : Specify only either platform_token or device_id. Device token grant\n\t\t\tshould be requested along with device_id parameter against game namespace. Another 3rd party platform token grant should be requested\n\t\t\talong with platform_token parameter against publisher namespace.\u003c/p\u003e\u003cbr/\u003e\n            \u003ch2\u003e2FA remember device\u003c/h2\u003e\n            \u003cp\u003eTo remember device for 2FA, should provide cookie: device_token or header: Device-Token\u003c/p\u003e\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The platform_token’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The platform_token's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The platform_token’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Discord OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The device_id is the Android’s device ID\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The device_id is the iOS’s device ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Apple OAuth.(We will use this code to generate APP token)\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ejustice\u003c/strong\u003e: The platform_token’s value is the designated user’s access token.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e: The platform_token’s value is an access-token obtained from Epicgames EOS Account Service.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eps4\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Sony OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eps5\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Sony OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e: The platform_token’s value is the authorization code(id_token) returned by Nintendo OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e: The platform_token’s value is the aws cognito access token or id token (JWT).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003elive\u003c/strong\u003e: The platform_token’s value is xbox XSTS token\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003exblweb\u003c/strong\u003e: The platform_token’s value is code returned by xbox after login\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enetflix\u003c/strong\u003e: The platform_token’s value is GAT (Gamer Access Token) returned by Netflix backend\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esnapchat\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Snapchat OAuth.\u003c/li\u003e\n\t\t\t\t\u003cbr\u003e\u003cli\u003e\u003cstrong\u003efor specific generic oauth (OIDC)\u003c/strong\u003e: The platform_token’s value should be the same type as created OIDC auth type whether it is auth code, idToken or bearerToken.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003ch2\u003eAccount Group\u003c/h2\u003e\n\t\t\t\u003cp\u003eSeveral platforms are grouped under account groups. The accounts on these platforms have the same platform user id. \n\t\t\tLogin using one of these platform will returns the same IAM user. \u003c/p\u003e\n\t\t\t\u003cp\u003eFollowing is the current registered account grouping: \u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e (psn) ps4web \u003c/li\u003e\n\t\t\t\u003cli\u003e (psn) ps4 \u003c/li\u003e\n\t\t\t\u003cli\u003e (psn) ps5 \u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003ch2\u003eAccess Token Content\u003c/h2\u003e\n\t\t\t\u003cp\u003eFollowing is the access token’s content:\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003enamespace\u003c/strong\u003e. It is the namespace the token was generated from.\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003edisplay_name\u003c/strong\u003e. The display name of the sub. It is empty if the token is generated from the client credential\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eroles\u003c/strong\u003e. The sub’s roles. It is empty if the token is generated from the client credential\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003enamespace_roles\u003c/strong\u003e. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003epermissions\u003c/strong\u003e. The sub or aud’ permissions\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003ebans\u003c/strong\u003e. The sub’s list of bans. It is used by the IAM client for validating the token.\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003ejflgs\u003c/strong\u003e. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e1: Email Address Verified\u003c/p\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e2: Phone Number Verified\u003c/p\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e4: Anonymous\u003c/p\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e8: Suspicious Login\u003c/p\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eaud\u003c/strong\u003e. The aud is the client ID.\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eiat\u003c/strong\u003e. The time the token issues at. It is in Epoch time format\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eexp\u003c/strong\u003e. The time the token expires. It is in Epoch time format\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003esub\u003c/strong\u003e. The UserID. The sub is omitted if the token is generated from client credential\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003ch2\u003eBans\u003c/h2\u003e\n\t\t\t\u003cp\u003eThe JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code : 10704",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "OAuth2 access token generation specific to platform",
        "operationId": "PlatformTokenGrantV3",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID to login with",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token from platform auth",
            "name": "platform_token",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client ID, only accept UUID version 4 without hyphen",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Device/hardware identifier",
            "name": "device_id",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "If directly create new account when not linked yet",
            "name": "createHeadless",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Mac address of device",
            "name": "macAddress",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If need skip set cookie. Default is false",
            "name": "skipSetCookie",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponse"
            }
          },
          "400": {
            "description": "General request error",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "503": {
            "description": "Third Party Server timeout or unavailable",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/revocationlist": {
      "get": {
        "description": "\u003cp\u003eThis endpoint will return a list of revoked users and revoked tokens. List of revoked tokens in bloom filter format.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThis endpoint requires authorized requests header with valid access token.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThe bloom filter uses MurmurHash3 algorithm for hashing the values\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eaction code : 10708\u003c/p\u003e",
        "consumes": [""],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "OAuth2 revocation list API",
        "operationId": "GetRevocationListV3",
        "responses": {
          "200": {
            "description": "Revocation list returned",
            "schema": {
              "$ref": "#/definitions/oauthapi.RevocationList"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/revoke": {
      "post": {
        "description": "\u003cp\u003eThis endpoint revokes a token.\u003c/p\u003e\n\t\t\t\t\t \u003cp\u003eThis endpoint requires authorized requests header with Basic Authentication from client that establish the token.\u003c/p\u003e\u003cbr\u003eaction code: 10706",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "OAuth2 token revocation API",
        "operationId": "TokenRevocationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Access token / Refresh token",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token revoked or does not exist"
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid basic auth header",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/token": {
      "post": {
        "description": "\u003cp\u003eThis endpoint supports grant type:\u003c/p\u003e\u003col\u003e\n\t \t\t\u003cli\u003eGrant Type == \u003ccode\u003eauthorization_code\u003c/code\u003e:\u003cbr /\u003e\n\t\t\t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; It generates the user token by given the authorization\n\t\t\t\tcode which generated in \"/iam/v3/authenticate\" API response. It should also pass\n\t\t\t\tin the redirect_uri, which should be the same as generating the\n\t\t\t\tauthorization code request.\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003eGrant Type == \u003ccode\u003epassword\u003c/code\u003e:\u003cbr /\u003e\n\t \t\t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; The grant type to use for authenticating a user, whether it's by email / username and password combination\n\t\t\t\tor through platform.\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003eGrant Type == \u003ccode\u003erefresh_token\u003c/code\u003e:\u003cbr /\u003e\n\t \t\t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; Used to get a new access token for a valid refresh token.\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003eGrant Type == \u003ccode\u003eclient_credentials\u003c/code\u003e:\u003cbr /\u003e\n\t \t\t\t\u0026nbsp;\u0026nbsp;\u0026nbsp; It generates a token by checking the client credentials provided through Authorization header.\n\t\t\t\u003c/li\u003e\u003c/ol\u003e\n\t\t\t\u003ch2\u003eAccess Token Content\u003c/h2\u003e\n\t\t\t\u003cp\u003eFollowing is the access token’s content:\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003enamespace\u003c/strong\u003e. It is the namespace the token was generated from.\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003edisplay_name\u003c/strong\u003e. The display name of the sub. It is empty if the token is generated from the client credential\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eroles\u003c/strong\u003e. The sub’s roles. It is empty if the token is generated from the client credential\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003enamespace_roles\u003c/strong\u003e. The sub’s roles scoped to namespace. Improvement from roles, which make the role scoped to specific namespace instead of global to publisher namespace\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003epermissions\u003c/strong\u003e. The sub or aud’ permissions\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003ebans\u003c/strong\u003e. The sub’s list of bans. It is used by the IAM client for validating the token.\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003ejflgs\u003c/strong\u003e. It stands for Justice Flags. It is a special flag used for storing additional status information regarding the sub. It is implemented as a bit mask. Following explains what each bit represents:\u003c/p\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e1: Email Address Verified\u003c/p\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e2: Phone Number Verified\u003c/p\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e4: Anonymous\u003c/p\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cp\u003e8: Suspicious Login\u003c/p\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eaud\u003c/strong\u003e. The aud is the targeted resource server.\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eiat\u003c/strong\u003e. The time the token issues at. It is in Epoch time format\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eexp\u003c/strong\u003e. The time the token expires. It is in Epoch time format\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003eclient_id\u003c/strong\u003e. The UserID. The sub is omitted if the token is generated from client credential\u003c/p\u003e\n\t\t\t\u003c/li\u003e\t\n\t\t\t\u003cli\u003e\n\t\t\t\t\u003cp\u003e\u003cstrong\u003escope\u003c/strong\u003e. The scope of the access request, expressed as a list of space-delimited, case-sensitive strings\u003c/p\u003e\n\t\t\t\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003ch2\u003eBans\u003c/h2\u003e\n\t\t\t\u003cp\u003eThe JWT contains user's active bans with its expiry date. List of ban types can be obtained from /bans.\u003c/p\u003e\n\t\t\t\u003ch2\u003eDevice Cookie Validation\u003c/h2\u003e\n\t\t\t\u003cp\u003e\u003ci\u003e\u003cb\u003eFor grant type \"password\" only\u003c/b\u003e\u003c/i\u003e\u003c/p\u003e\n\t\t\t\u003cp\u003eDevice Cookie is used to protect the user account from brute force login attack, \u003ca target=\"_blank\" href=\"https://owasp.org/www-community/Slow_Down_Online_Guessing_Attacks_with_Device_Cookies\"\u003emore detail from OWASP\u003ca\u003e.\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint will read device cookie from request header \u003cb\u003eAuth-Trust-Id\u003c/b\u003e. If device cookie not found, it will generate a new one and set it into response body \u003cb\u003eauth_trust_id\u003c/b\u003e when successfully login.\u003c/p\u003e\n\t\t\t\u003ch2\u003eTrack Login History\u003c/h2\u003e\n\t\t\t\u003cp\u003eThis endpoint will track login history to detect suspicious login activity, please provide \u003cb\u003eDevice-Id\u003c/b\u003e (alphanumeric) in request header parameter otherwise it will set to \"unknown\".\u003c/p\u003e\n\t\t\t\u003cp\u003eAlign with General Data Protection Regulation in Europe, user login history will be kept within 28 days by default\"\u003c/p\u003e\n            \u003ch2\u003e2FA remember device\u003c/h2\u003e\n            \u003cp\u003eTo remember device for 2FA, should provide cookie: device_token or header: Device-Token\u003c/p\u003e\n\t\t\t\u003cp\u003eaction code: 10703",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "OAuth2 access token generation endpoint",
        "operationId": "TokenGrantV3",
        "parameters": [
          {
            "enum": ["authorization_code", "client_credentials", "password", "refresh_token"],
            "type": "string",
            "default": "authorization_code",
            "description": "Grant Type",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "User Name (used with grant type 'password'",
            "name": "username",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Password (used with grant type 'password'",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "The authorization code received from the authorization server (used with grant type 'authorization_code')",
            "name": "code",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Code verifier received from the authorization server",
            "name": "code_verifier",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "client_id (used with grant type 'authorization_code')",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Redirect URI (used with grant type 'authorization_code')",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Refresh Token (used with grant type 'refresh_token'). This field is optional if the request header provides the \"refresh_token\" cookie",
            "name": "refresh_token",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "Extend expiration date of refresh token. Only available for grant type 'password'",
            "name": "extend_exp",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "DeviceID (Used on grant type 'password' to track login history) ex. 90252d14544846d79f367148e3f9a3d9",
            "name": "device_id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Auth-Trust-Id for Device Cookie Validation (Used on grant type 'password')",
            "name": "Auth-Trust-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Token returned",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenWithDeviceCookieResponseV3"
            }
          },
          "400": {
            "description": "InvalidRequest",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "401": {
            "description": "Client authentication failed",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          },
          "429": {
            "description": "Too many failed auth attempt",
            "schema": {
              "$ref": "#/definitions/oauthmodel.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/oauth/verify": {
      "post": {
        "description": "This endpoint requires all requests to have Authorization header set with Basic access authentication constructed from client id and client secret.",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0"],
        "summary": "OAuth2 token verification API",
        "operationId": "VerifyTokenV3",
        "parameters": [
          {
            "type": "string",
            "description": "Token to be verified",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token verified",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          },
          "400": {
            "description": "Access Token not exist or expired"
          }
        }
      }
    },
    "/iam/v3/platforms/{platformId}/authenticate": {
      "get": {
        "description": "This endpoint authenticates user platform. It validates user to its\n          respective platforms. Deactivated or login-banned users are unable to login. \u003cbr\u003e\n\t\t  \u003cp\u003eIf already linked with justice account or match SSO condition, will redirect to client's redirect url with code. then invoke '/iam/v3/oauth/token' with grant_type=authorization_code\u003c/p\u003e\t\n\t\t  \u003cp\u003eIf already not linked with justice account and not match SSO condition, will redirect to client's account linking page\u003c/p\u003e\t\n          \u003ch2\u003eSupported platforms:\u003c/h2\u003e\u003cul\u003e\n          \u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003eSteam login page will redirects to this endpoint after login success\n          as previously defined on openID request parameter \u003ccode\u003eopenid.return_to\u003c/code\u003e when request login to steam\n          https://openid.net/specs/openid-authentication-2_0.html#anchor27\n          \u003cli\u003e\u003cstrong\u003eps4web\u003c/strong\u003e\u003c/li\u003ePS4 login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u003ccode\u003eredirect_uri\u003c/code\u003e \n\t\t  https://ps4.siedev.net/resources/documents/WebAPI/1/Auth_WebAPI-Reference/0002.html#0GetAccessTokenUsingAuthorizationCode\n          \u003cli\u003e\u003cstrong\u003exblweb\u003c/strong\u003e\u003c/li\u003eXBL login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u003ccode\u003eredirect_uri\u003c/code\u003e \n          \u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e\u003c/li\u003eEpicgames login page will redirects to this endpoint after login success\n          or an error occurred. If error, it redirects to the login page.\n          \u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003eTwitch login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u003ccode\u003eredirect_uri\u003c/code\u003e\n          \u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003eFacebook login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u003ccode\u003eredirect_uri\u003c/code\u003e\n          \u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003eGoogle login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u003ccode\u003eredirect_uri\u003c/code\u003e\n\t\t  \t\t\u003cli\u003e\u003cstrong\u003esnapchat\u003c/strong\u003e\u003c/li\u003eSnapchat login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u003ccode\u003eredirect_uri\u003c/code\u003e\n\t\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e\u003c/li\u003eDiscord login page will redirects to this endpoint after login success\n          as previously defined on authorize request parameter \u003ccode\u003eredirect_uri\u003c/code\u003e\n          \u003c/ul\u003e action code : 10709",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Platform Authentication API",
        "operationId": "PlatformAuthenticationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "State that contains request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "name": "state",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.ns",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.mode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.op_endpoint",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.claimed_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.identity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.return_to",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.response_nonce",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.assoc_handle",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.signed",
            "in": "query"
          },
          {
            "type": "string",
            "description": "[steamopenid] Steam OpenID response parameters https://openid.net/specs/openid-authentication-2_0.html#positive_assertions",
            "name": "openid.sig",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The authorization code from 3rd party OAuth server",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The error message from 3rd party OAuth server",
            "name": "error",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to clients redirection URL with either code or error on the query parameter",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/v3/public/inputValidations": {
      "get": {
        "description": "\u003cp\u003eNo role required\u003c/p\u003e\n\t\t\u003cp\u003eThis endpoint is to get list of input validation configuration.\u003c/p\u003e\n\t\t\u003cp\u003e\u003ccode\u003eregex\u003c/code\u003e parameter will be returned if \u003ccode\u003eisCustomRegex\u003c/code\u003e is true. Otherwise, it will be empty.\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["InputValidations"],
        "summary": "Public Get Input Validations",
        "operationId": "PublicGetInputValidations",
        "parameters": [
          {
            "type": "string",
            "description": "Language Code for description",
            "name": "languageCode",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "default true, will return default language if languageCode is empty or language not available",
            "name": "defaultOnEmpty",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.InputValidationsPublicResponse"
            }
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/agerestrictions/countries/{countryCode}": {
      "get": {
        "description": "Get age restriction by country code. It will always get by publisher namespace",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Public get age restriction by country code",
        "operationId": "PublicGetCountryAgeRestrictionV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Country Code ",
            "name": "countryCode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.CountryV3Response"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/clients/active": {
      "get": {
        "description": "This is the Public API to Get All Active 3rd Platform Credential.",
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Get All Active Third Party Platform Active Credential for Public Usage",
        "operationId": "RetrieveAllActiveThirdPartyLoginPlatformCredentialPublicV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Active Third Party Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.PublicThirdPartyPlatformInfo"
              }
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/clients/oidc": {
      "get": {
        "description": "This is the Public API to Get All Active OIDC Platform Credential By Client ID",
        "produces": ["application/json"],
        "tags": ["Third Party Credential"],
        "summary": "Get Active OIDC Platform Credential By Client ID",
        "operationId": "RetrieveActiveOIDCClientsPublicV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Active OIDC Credential Retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.PublicThirdPartyPlatformInfo"
              }
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10175\u003c/td\u003e\u003ctd\u003ethird party credential not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users": {
      "post": {
        "description": "List User ID By Platform User ID\nThis endpoint intended to list game user ID from the given namespace\nThis endpoint return list of user ID by given platform ID and list of platform user ID \n\n\u003cstrong\u003enintendo platform user ID\u003c/strong\u003e: NSA ID need to be appended with Environment ID using colon as separator. e.g kmzwa8awaa:dd1\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "List User ID By Platform User ID",
        "operationId": "PublicListUserIDByPlatformUserIDsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PlatformUserIDRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserPlatforms"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/platforms/{platformId}/users/{platformUserId}": {
      "get": {
        "description": "Get User By Platform User ID\n\t\t\nThis endpoint return user information by given platform ID and platform user ID \n\n\u003cstrong\u003enintendo platform user ID\u003c/strong\u003e: NSA ID need to be appended with Environment ID using colon as separator. e.g kmzwa8awaa:dd1\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User By Platform User ID",
        "operationId": "PublicGetUserByPlatformUserIDV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform User ID",
            "name": "platformUserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/requests/{requestId}/async/status": {
      "get": {
        "description": "This endpoint is used to get linking status.",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get Linking Progress Status",
        "operationId": "PublicGetAsyncStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Request ID of the link status",
            "name": "requestId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LinkRequest"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users": {
      "get": {
        "description": "\u003cp\u003eRequires valid user access token\u003c/p\u003e\n\t\t\t\u003cp\u003eThis endpoint search all users on the specified namespace that match the query on these fields: display name, and username.\n\t\t\tThe query length should greater than 1，otherwise will not query the database. The default limit value is 100\u003c/p\u003e\n\t\t\t\u003cbr\u003eaction code : 10132",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Search User",
        "operationId": "PublicSearchUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query, can be either display name or username",
            "name": "query",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search by given attribute, possible values are displayName and username",
            "name": "by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The number of data retrieved in a page, default 100",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "number of offset, default 0",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserInformationResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\n\t\t\u003cp\u003eAvailable Authentication Types:\u003c/p\u003e\n\t\t\t\u003col\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eEMAILPASSWD\u003c/strong\u003e: an authentication type used for new user registration through email.\u003c/li\u003e\n\t\t\u003c/ol\u003e\n\t\t\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\t\t\u003cp\u003eDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u003c/p\u003e\n\t\t\u003cp\u003eThis endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Create User",
        "operationId": "PublicCreateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateRequestV3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/availability": {
      "get": {
        "description": "Check user's account availability. \nAvailable field :\n\t- displayName\n\nIf request include access token with user ID data, that user ID will be excluded from availability check.\nFor example, in case user update his emailAddress, he can use his own emailAddress to update his account.\n\nResponse Code :\n\t- Account Available : 404 (not found)\n\t- Account Not Available : 204 (no content)\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Check user's account availability",
        "operationId": "CheckUserAvailability",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "field name that want to be checked",
            "name": "field",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "query or value that want to be checked",
            "name": "query",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/bulk/basic": {
      "post": {
        "description": "\u003cp\u003eNotes:\u003c/p\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003eThis endpoint bulk get users' basic info by userId, max allowed 100 at a time\u003c/li\u003e\n\t\t\t\u003cli\u003eIf namespace is game, will search by game user Id, other wise will search by publisher namespace\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003eResult will include displayName(if it exists)\u003c/strong\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Bulk get users' basic info by user Id",
        "operationId": "PublicBulkGetUsers",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserIDsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListBulkUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10185\u003c/td\u003e\u003ctd\u003epublisher namespace not allowed\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/code/request": {
      "post": {
        "description": "This endpoint will validate the request's email address.\n\nIf it already been used, will response 409.\n\nIf it is available, we will send a verification code to this email address. \nThis code can be verified by this \u003ca href=\"#operations-Users-PublicVerifyRegistrationCode\"\u003eendpoint\u003c/a\u003e.\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Send verification code to new unregistered account's email address",
        "operationId": "PublicSendRegistrationCode",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendRegisterVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/code/verify": {
      "post": {
        "description": "\u003cp\u003eVerify the registration code\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Verify the registration code",
        "operationId": "PublicVerifyRegistrationCode",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.VerifyRegistrationCode"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Code is valid"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/forgot": {
      "post": {
        "description": "\u003cp\u003e\u003cstrong\u003eSpecial note for publisher-game scenario:\u003c/strong\u003e \nGame Client should provide game namespace path parameter and Publisher \nClient should provide publisher namespace path parameter. \u003c/p\u003e\n\u003cp\u003eThe password reset code will be sent to the publisher account's email address. \u003c/p\u003e\n\u003cp\u003eaction code : 10104 \u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Request Password Reset Code",
        "operationId": "PublicForgotPasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ForgotPasswordRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/invite/{invitationId}": {
      "get": {
        "description": "Endpoint to validate user invitation. When not found, it could also means the invitation has expired.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User Invitation",
        "operationId": "GetAdminInvitationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "name": "invitationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserInvitationV3"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10180\u003c/td\u003e\u003ctd\u003eadmin invitation not found or expired\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint create user from saved roles when creating invitation and submitted data.\nUser will be able to login after completing submitting the data through this endpoint.\nAvailable Authentication Types:\n\n\tEMAILPASSWD: an authentication type used for new user registration through email.\n\nCountry use ISO3166-1 alpha-2 two letter, e.g. US.\n\nDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Create User From Invitation",
        "operationId": "CreateUserFromInvitationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateFromInvitationRequestV3"
            }
          },
          {
            "type": "string",
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "name": "invitationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.UserCreateResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10180\u003c/td\u003e\u003ctd\u003eadmin invitation not found or expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me": {
      "put": {
        "description": "\u003cp\u003eRequires valid user access token \u003c/p\u003e\n\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eSupported field {country, displayName, languageTag, dateOfBirth, avatarUrl}\u003c/p\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\u003cp\u003eDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u003c/p\u003e\n\u003cbr\u003e\u003cb\u003eSeveral case of updating email address\u003c/b\u003e\n\u003cul\u003e\u003cli\u003eUser want to update email address of which have been verified, newEmailAddress response field will be filled with new email address.\u003c/li\u003e\n\u003cli\u003eUser want to update email address of which have not been verified, { oldEmailAddress, emailAddress} response field will be filled with new email address. \u003c/li\u003e\n\u003cli\u003eUser want to update email address of which have been verified and updated before, { oldEmailAddress, emailAddress} response field will be filled with verified email before. newEmailAddress response field will be filled with newest email address. \u003c/li\u003e\n\u003cbr\u003e\u003cb\u003eImportant notes:\u003c/b\u003e\n\u003cbr\u003e\u003cp\u003eThis endpoint provides support for client that doesn't have PATCH support, i.e. UE4 before v4.23 released.\n\u003cbr\u003eIf the client support PATCH method, use [PATCH] /iam/v3/public/namespaces/{namespace}/users/me instead\u003c/p\u003e\u003cbr\u003e\n\u003cp\u003eaction code : 10103 \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User",
        "operationId": "PublicUpdateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "\u003cp\u003eRequires valid user access token \u003c/p\u003e\n\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eSupported field {country, displayName, languageTag, dateOfBirth, avatarUrl}\u003c/p\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\u003cp\u003eDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u003c/p\u003e\n\u003cbr\u003e\u003cb\u003eSeveral case of updating email address\u003c/b\u003e\n\u003cul\u003e\u003cli\u003eUser want to update email address of which have been verified, newEmailAddress response field will be filled with new email address.\u003c/li\u003e\n\u003cli\u003eUser want to update email address of which have not been verified, { oldEmailAddress, emailAddress} response field will be filled with new email address. \u003c/li\u003e\n\u003cli\u003eUser want to update email address of which have been verified and updated before, { oldEmailAddress, emailAddress} response field will be filled with verified email before. newEmailAddress response field will be filled with newest email address. \u003c/li\u003e\n\u003cp\u003eaction code : 10103 \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User",
        "operationId": "PublicPartialUpdateUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/code/request": {
      "post": {
        "description": "Required valid user authorization\n\u003cp\u003eThe verification code is sent to email address\u003c/p\u003e\n\u003cp\u003eAvailable contexts for use : \u003c/p\u003e\n\u003col\u003e\n\t\u003cli\u003e\n\t\t\u003cstrong\u003eUserAccountRegistration\u003c/strong\u003e\n\t\t\u003cp\u003ea context type used for verifying email address in user account registration. It returns 409 if the email address already verified. \n\t\t\u003cstrong\u003e\u003cem\u003eIt is the default context if the Context field is empty\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\n\t\t\u003cstrong\u003eUpdateEmailAddress\u003c/strong\u003e\n\t\t\u003cp\u003ea context type used for verify user before updating email address.(Without email address verified checking)\u003c/p\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eupgradeHeadlessAccount\u003c/strong\u003e\n\t\t\u003cp\u003eThe context is intended to be used whenever the email address wanted to be automatically verified on upgrading a headless account.  \n\t\tIf this context used, IAM rejects the request if the email address is already used by others by returning HTTP Status Code 409.\u003c/p\u003e\n\t\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eaction code: 10116\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Send verification code to user",
        "operationId": "PublicSendVerificationCodeV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/code/verify": {
      "post": {
        "description": "\u003cp\u003eWill consume code if validateOnly is set false\u003c/p\u003e\n\u003cp\u003eRequired valid user authorization\u003c/p\u003e\n\u003cp\u003eRedeems a verification code sent to a user to verify the user's contact address is correct\u003c/p\u003e\n\u003cp\u003eAvailable ContactType : \u003cb\u003eemail\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eaction code: 10107\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Validate or consume verification code sent to user",
        "operationId": "PublicUserVerificationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserVerificationRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10141\u003c/td\u003e\u003ctd\u003eemail verified\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/headless/code/verify": {
      "post": {
        "description": "\u003cp\u003eIf validateOnly is set false, consume code and upgrade headless account and automatically verified the email address if it is succeeded\u003c/p\u003e\nRequire valid user access token.\n     \t\u003cp\u003eThe endpoint upgrades a headless account by linking the headless account with the email address and the password. \nBy upgrading the headless account into a full account, the user could use the email address and password for using Justice IAM. \u003c/p\u003e\n     \t\u003cp\u003eThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \nIn order to get a verification code for the endpoint, please check the send verification code endpoint.\u003c/p\u003e\n     \t\u003cp\u003eThis endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.\u003cbr/\u003e\n\tSupported user data fields :\n\t\u003cul\u003e\n\t\t\u003cli\u003edisplayName\u003c/li\u003e\n\t\t\u003cli\u003edateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29\u003c/li\u003e\n\t\t\u003cli\u003ecountry : format ISO3166-1 alpha-2 two letter, e.g. US\u003c/li\u003e\n\t\u003c/ul\u003e\n     \t\u003cbr\u003eaction code : 10124\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Verify or consume verification code.",
        "operationId": "PublicUpgradeHeadlessAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountWithVerificationCodeRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/headless/verify": {
      "post": {
        "description": "\u003cp\u003eRequire valid user authorization\u003cbr\u003eaction code : 10124 \u003c/p\u003e\n\t\t\t\u003cp\u003eif set NeedVerificationCode = true, IAM will send verification code into email\u003c/p\u003e\n\t\t\t\u003cp\u003euser can use that verification code to verify user through /iam/v3/public/namespaces/{namespace}/users/me/code/verify",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Upgrade user account to full account (with email)",
        "operationId": "PublicVerifyHeadlessAccountV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "default false, will send verification code to email if true",
            "name": "needVerificationCode",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UpgradeHeadlessAccountV3Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/password": {
      "put": {
        "description": "Required valid user authorization. \u003cbr\u003e action code: 10107",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User Password",
        "operationId": "PublicUpdatePasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserPasswordUpdateV3Request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/justice/{targetNamespace}": {
      "post": {
        "description": "Create Justice User from Publisher User information. It will check first if Justice User on target namespace already exist.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Create Justice User from Publisher User",
        "operationId": "PublicCreateJusticeUser",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Target namespace",
            "name": "targetNamespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.CreateJusticeUserResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}": {
      "post": {
        "description": "Required valid user authorization.\n\t\t\u003cp\u003e\u003cbr\u003e\u003cb\u003ePrerequisite:\u003c/b\u003e \n\t\tPlatform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The ticket’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The ticket’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The ticket’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The ticket’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The ticket’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The ticket's value is the Android’s device ID\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The ticket's value is the iOS’s device ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e: The ticket’s value is the authorization code returned by Apple OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that doesn't run Android and iOS is categorized as a device platform. The ticket's value is the device’s ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The ticket’s value is the authorization code returned by Discord OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eps4web\u003c/strong\u003e: The ticket’s value is the authorization code returned by PSN OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003exblweb\u003c/strong\u003e: The ticket’s value is the authorization code returned by XBox Live OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e: The ticket’s value is the aws cognito access token (JWT).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e: The ticket’s value is an access-token obtained from Epicgames EOS Account Service.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e: The ticket’s value is the authorization code(id_token) returned by Nintendo OAuth.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\u003cbr\u003eaction code : 10144",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Link user's account with platform",
        "operationId": "PublicPlatformLinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ticket from platform, not contain whitespace",
            "name": "ticket",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "[Special case for ps4web and xblweb platform] The same redirectUri as when the client request authorization code. The redirectUri when client request auth code need to be exactly same with redirectUri when IAM requesting exchange token to the Platform (ps4web, xblweb)",
            "name": "redirectUri",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10174\u003c/td\u003e\u003ctd\u003eplatform client not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10172\u003c/td\u003e\u003ctd\u003eplatform user is already linked with the account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10173\u003c/td\u003e\u003ctd\u003eplatform is already linked with another user account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required valid user authorization.\n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t\t\u003cp\u003eUnlink user's account from a specific platform. 'justice' platform might have multiple accounts from different namespaces linked.\n\t\t\t\u003cbr\u003e\u003ci\u003eplatformNamespace\u003c/i\u003e need to be specified when the platform ID is 'justice'.\n\t\t\t\u003cbr\u003e\n\t\t\t\u003cbr\u003eUnlink user's account from justice platform will enable password token grant and password update.\n\t\t\t\u003cbr\u003e\n\t\t\t\u003cbr\u003eIf you want to unlink user's account in a game namespace, you have to specify \u003ci\u003eplatformNamespace\u003c/i\u003e to that game namespace.\n\t\t\t\u003cbr\u003e\n\t\t\t\u003cbr\u003eaction code : 10121 \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Unlink user's account from specific platform",
        "operationId": "PublicPlatformUnlinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UnlinkUserPlatformRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/all": {
      "delete": {
        "description": "Required valid user authorization.\n\t\t\t\u003cp\u003eUnlink user's account from for all third platforms. \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Unlink user's account from specific platform",
        "operationId": "PublicPlatformUnlinkAllV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/force": {
      "post": {
        "description": "Force linking user account with platform. \n\t\t\t\u003cbr\u003e If this platform account was already linked to another user account, this endpoint will perform force linking and remove platform from that conflict user, not only from the current request namespace but also include all the enrolled namespaces.\u003c/br\u003e \n\t\t\t\u003cbr\u003e If current user have linked to this platform with another platform account (include once linked but it is unlinked now), it will not allow user to perform linking.\u003c/br\u003e \n\t\t\t\u003ch2\u003eSupported platforms:\u003c/h2\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteam\u003c/strong\u003e: The platform_token’s value is the authentication code returned by Steam.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esteamopenid\u003c/strong\u003e: Steam's user authentication method using OpenID 2.0. The platform_token's value is URL generated by Steam on web authentication\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003efacebook\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Facebook OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003egoogle\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Google OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eoculus\u003c/strong\u003e: The platform_token’s value is a string composed of Oculus's user ID and the nonce separated by a colon (:).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003etwitch\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Twitch OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ediscord\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Discord OAuth\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eandroid\u003c/strong\u003e: The device_id is the Android’s device ID\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eios\u003c/strong\u003e: The device_id is the iOS’s device ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eapple\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Apple OAuth.(We will use this code to generate APP token)\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003edevice\u003c/strong\u003e: Every device that does’nt run Android and iOS is categorized as a device. The device_id is the device’s ID.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003ejustice\u003c/strong\u003e: The platform_token’s value is the designated user’s access token.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eepicgames\u003c/strong\u003e: The platform_token’s value is an access-token obtained from Epicgames EOS Account Service.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eps4\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Sony OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eps5\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Sony OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enintendo\u003c/strong\u003e: The platform_token’s value is the authorization code(id_token) returned by Nintendo OAuth.\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003eawscognito\u003c/strong\u003e: The platform_token’s value is the aws cognito access token or id token (JWT).\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003elive\u003c/strong\u003e: The platform_token’s value is xbox XSTS token\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003exblweb\u003c/strong\u003e: The platform_token’s value is code returned by xbox after login\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003enetflix\u003c/strong\u003e: The platform_token’s value is GAT (Gamer Access Token) returned by Netflix backend\u003c/li\u003e\n\t\t\t\t\u003cli\u003e\u003cstrong\u003esnapchat\u003c/strong\u003e: The platform_token’s value is the authorization code returned by Snapchat OAuth.\u003c/li\u003e\n\t\t\t\u003c/ul\u003e\n\t\t",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Force linking user's account with platform",
        "operationId": "PublicForcePlatformLinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token from platform auth",
            "name": "ticket",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10174\u003c/td\u003e\u003ctd\u003eplatform client not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10163\u003c/td\u003e\u003ctd\u003eplatform is already linked with the user account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10172\u003c/td\u003e\u003ctd\u003eplatform user is already linked with the account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link": {
      "get": {
        "description": "This endpoint is used to generate third party login page which will redirected to establish endpoint.",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Create Public Web Linking",
        "operationId": "PublicWebLinkPlatform",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client ID",
            "name": "clientId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Redirect URI",
            "name": "redirectUri",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Platform Id to be linked",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.WebLinkingResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10365\u003c/td\u003e\u003ctd\u003eclient not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link/establish": {
      "get": {
        "description": "This endpoint is used by third party to redirect the code for the purpose of linking the account third party to IAM account.",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Establish Link Progress ",
        "operationId": "PublicWebLinkPlatformEstablish",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Platform Id to be linked",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "state from third party redirect",
            "name": "state",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Handle Redirect from third party",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/reset": {
      "post": {
        "description": "\u003cp\u003eaction code: 10105\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Reset User Password",
        "operationId": "ResetPasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.ResetPasswordRequestV3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10142\u003c/td\u003e\u003ctd\u003enew password cannot be same with original\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}": {
      "get": {
        "description": "\u003cp\u003eThis endpoint retrieve user attributes. action code: 10129\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User By User ID",
        "operationId": "PublicGetUserByUserIdV3",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.PublicUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/bans": {
      "get": {
        "description": "Required valid user authorization.\n\t\t\u003cp\u003eNotes:\u003c/p\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003eThis endpoint retrieve the first page of the data if after and before parameters is empty\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003cstrong\u003eThe pagination is not working yet\u003c/strong\u003e\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get user's bans",
        "operationId": "PublicGetUserBanHistoryV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Filter ban based on the ban status. If you set this, only active ban returned",
            "name": "activeOnly",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of data returned in one query. The maximum value of the limit is 100 and the minimum value of the limit is 1. If you set this into -1, then it returns all data. Default: -1. \u003cem\u003eDoesn't work yet\u003c/em\u003e.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created before the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter ban based on the date creation. If you set this, only user bans created after the date returned. The date is in ISO-8601. Example value: 2019-05-18T07:17:45Z. \u003cem\u003eDoesn't work yet\u003c/em\u003e",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetUserBanV3Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/distinctPlatforms": {
      "get": {
        "description": "\u003cp\u003eThis endpoint retrieves platform accounts linked to user.\n\t\t\t\t\t\u003cbr\u003eIt will query all linked platform accounts and result will be distinct \u0026 grouped, same platform we will pick oldest linked one. \n\t\t\t\t\t\u003cbr\u003eRequired valid user authorization.\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get distinct platform accounts linked to the user",
        "operationId": "PublicListUserAllPlatformAccountsDistinctV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.DistinctPlatformResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/information": {
      "get": {
        "description": "\u003cp\u003eThis endpoint retrieves user info and linked platform accounts.\n\t\t\t\t\tRequired permissions 'NAMESPACE:{namespace}:INFORMATION:USER:{userId} [READ]'\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get user's information v3",
        "operationId": "PublicGetUserInformationV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserInformationV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/logins/histories": {
      "get": {
        "description": "Required valid user authorization.\u003cp\u003eNotes for this endpoint: \u003c/p\u003e \u003cul\u003e\u003cli\u003eThis endpoint retrieve the first page of the data if `after` and `before` parameters is empty.\u003c/li\u003e\u003cli\u003eThe maximum value of the limit is 100 and the minimum value of the limit is 1.\u003c/li\u003e\u003cli\u003eThis endpoint retrieve the next page of the data if we provide `after` parameters with valid Unix timestamp.\u003c/li\u003e\u003cli\u003eThis endpoint retrieve the previous page of the data if we provide `before` parameter with valid data Unix timestamp.\u003c/li\u003e\u003cul\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User's Login Histories",
        "operationId": "PublicGetUserLoginHistoriesV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the previous page (In Unix timestamp formats, e.g:1545114248).",
            "name": "before",
            "in": "query"
          },
          {
            "type": "number",
            "description": "The cursor that points to query data for the next page (In Unix timestamp formats, e.g:1545114248)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of data retrieved in a page",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.LoginHistoriesResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms": {
      "get": {
        "description": "\u003cp\u003eThis endpoint retrieves platform accounts linked to user. Required valid user authorization.\n\t\t\t\t\t\u003cbr\u003eaction code: 10128 \u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get platform accounts linked to the user",
        "operationId": "PublicGetUserPlatformAccountsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/accountcommon.UserLinkedPlatformsResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/justice": {
      "get": {
        "description": "This endpoint gets list justice platform account by providing publisher namespace and publisher userID\u003c/br\u003e\n\u003cp\u003eRequires valid user access token \u003c/p\u003e\u003c/br\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User Justice Platform Accounts",
        "operationId": "PublicListJusticePlatformAccountsV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": " Publisher User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.GetUserMappingV3"
              }
            }
          },
          "400": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/link": {
      "post": {
        "description": "It is going to be \u003cstrong\u003eDEPRECATED\u003c/strong\u003e.\nUpdate Platform Account relation to current User Account.\nNote: Game progression data (statistics, reward, etc) associated with previous User Account will not be \ntransferred. If the data is tight to game user ID, the user will have the game progression data.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Link a Platform User Account to User Account",
        "operationId": "PublicLinkPlatformAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Current user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/platforms/linkWithProgression": {
      "post": {
        "description": "Force update other account's Platform Account relation to current User Account. \u003cbr\u003e\nThis endpoint can transfer progression from 3rd platform binding account's to current account.\nThis endpoint need the same requestID which also used in \u003ca href=\"#operations-Users-PublicGetAsyncStatus\"\u003eGet link status\u003c/a\u003e.\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Force link 3rd platform account and transfer progression",
        "operationId": "PublicForceLinkPlatformWithProgression",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Current user ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkPlatformAccountWithProgressionRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/publisher": {
      "get": {
        "description": "\u003cp\u003eRequired permissions 'NAMESPACE:{namespace}:USER:{userId}:PUBLISHER [READ].\u003c/p\u003e\n\t\u003cp\u003e\u003cstrong\u003eRestriction:\u003c/strong\u003e\n\t\tPath Parameter \u003cstrong\u003enamespace\u003c/strong\u003e can be provided only with game namespace\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get Publisher User",
        "operationId": "PublicGetPublisherUserV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetPublisherUserV3Response"
            }
          },
          "400": {
            "description": "Error Code: 7239 - Error Message: wrong namespace: required game namespace",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v3/public/namespaces/{namespace}/users/{userId}/validate": {
      "post": {
        "description": "This endpoint is used to validate the user password. Required valid user authorization and valid user ID.\n\t\t\u003cp\u003eNotes:\u003c/p\u003e\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003eThis endpoint validate the user password by specifying the userId and password\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Validate user password by user ID and password",
        "operationId": "PublicValidateUserByUserIDAndPasswordV3",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User password",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10143\u003c/td\u003e\u003ctd\u003epassword not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/roles": {
      "get": {
        "description": " \u003cbr\u003eThis endpoint is used to get all non-admin role.  \u003cbr\u003e \u003cp\u003eaction code: 10418\u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Roles",
        "operationId": "PublicGetRolesV3",
        "parameters": [
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all\n",
            "name": "isWildcard",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleNamesResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/roles/{roleId}": {
      "get": {
        "description": " \u003cbr\u003eThis endpoint is used to get non-admin role based on specify roleId.  \u003cbr\u003eaction code : 10417",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Public Role",
        "operationId": "PublicGetRoleV3",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/users/me": {
      "get": {
        "description": "\u003cp\u003eRequire valid user authorization\u003cbr\u003eGet my user data\u003cbr\u003eaction code : 10147 \u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get My User",
        "operationId": "PublicGetMyUserV3",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/users/me/headless/link/conflict": {
      "get": {
        "description": "Note:\u003cbr\u003e\n1. My account should be full account\n2. My account not linked to request headless account's third platform.\n\nAfter client resolving the conflict, it will call endpoint \u003cb\u003e/iam/v3/public/users/me/headless/linkWithProgression [POST]\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get conflict result when link headless account to current full account by one time code",
        "operationId": "PublicGetLinkHeadlessAccountToMyAccountConflictV3",
        "parameters": [
          {
            "type": "string",
            "description": "one time linking code",
            "name": "oneTimeLinkCode",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.GetLinkHeadlessAccountConflictResponse"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/users/me/headless/linkWithProgression": {
      "post": {
        "description": "Note:\u003cbr\u003e\n1. My account should be full account\n2. My account not linked to headless account's third platform.",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Link headless account to current full account",
        "operationId": "LinkHeadlessAccountToMyAccountV3",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.LinkHeadlessAccountRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/users/me/verify_link/request": {
      "post": {
        "description": "Required valid user authorization\n\u003cp\u003eThe verification link is sent to email address\u003c/p\u003e\n\u003cp\u003eIt will not send request if user email is already verified\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Send verification link to user, this link will point to '/iam/v3/public/users/verify_link/verify'",
        "operationId": "PublicSendVerificationLinkV3",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.SendVerificationLinkRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10140\u003c/td\u003e\u003ctd\u003euser verified\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/public/users/verify_link/verify": {
      "get": {
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Verify user email by the verification link code",
        "operationId": "PublicVerifyUserByLinkV3",
        "parameters": [
          {
            "type": "string",
            "description": "Verification code, it can be get from `/users/me/verify_link/request`",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirected to verification finish page.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/v3/sso/saml/platforms/{platformId}/authenticate": {
      "post": {
        "description": "This endpoint authenticates user platform for SAML protocol. It validates user to its\n          respective platforms. Deactivated or login-banned users are unable to login. \u003cbr\u003e\n          \u003ch2\u003eSupported platforms:\u003c/h2\u003e\u003cul\u003e\n          \u003cli\u003e\u003cstrong\u003eazure\u003c/strong\u003e\u003c/li\u003eMicrosoft login page will redirects to this endpoint after login success\n          as previously defined on authentication request SAML\n          \u003c/ul\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "tags": ["SSO SAML 2.0"],
        "summary": "SAML platform Authentication API",
        "operationId": "platformAuthenticateSAMLV3Handler",
        "parameters": [
          {
            "type": "string",
            "description": "Platform ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "State that contains request ID retrieved from authorize endpoint ([GET] iam/v3/oauth/authorize)",
            "name": "state",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The authorization code from 3rd party OAuth server",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The error message from Identity Provider (IdP)",
            "name": "error",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found. Redirect to clients redirection URL with either code or error on the query parameter",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header"
              }
            }
          }
        }
      }
    },
    "/iam/v3/sso/{platformId}": {
      "get": {
        "produces": ["application/json"],
        "tags": ["SSO"],
        "summary": "Login to SSO client with provided platformId",
        "operationId": "LoginSSOClient",
        "parameters": [
          {
            "type": "string",
            "description": "SSO Client ID",
            "name": "platformId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Key value payload received from SSO client, if any, and must be escaped",
            "name": "payload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/iam/v3/sso/{platformId}/logout": {
      "post": {
        "description": "Logout user's session on platform that logged in using SSO.\n\nSupported platforms:\n- discourse\n",
        "produces": ["application/json"],
        "tags": ["SSO"],
        "summary": "Logout",
        "operationId": "LogoutSSOClient",
        "parameters": [
          {
            "type": "string",
            "description": "SSO Client ID",
            "name": "platformId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v3/token/exchange": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is being used to generate publisher user's game token.\u003cbr\u003e\n\t\tIt require basic header with ClientID and Secret, it should match the ClientID when call \u003cstrong\u003e/iam/v3/namespace/{namespace}/token/request\u003c/strong\u003e\u003cbr\u003e\n\t\tIt required a code which can be generated from \u003cstrong\u003e/iam/v3/namespace/{namespace}/token/request\u003c/strong\u003e.\u003cbr\u003e\n\t\t\u003c/p\u003e",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OAuth2.0 - Extension"],
        "summary": "Generate game token by code",
        "operationId": "RequestGameTokenResponseV3",
        "parameters": [
          {
            "type": "string",
            "description": "code from request game token",
            "name": "code",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Succeed to generate token.",
            "schema": {
              "$ref": "#/definitions/oauthmodel.TokenResponseV3"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to get devices a user ever used to login.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin get devices by user id",
        "operationId": "AdminGetDevicesByUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user id",
            "name": "userId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DevicesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20021\u003c/td\u003e\u003ctd\u003einvalid pagination parameter\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/banned": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to get banned devices.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin get banned devices",
        "operationId": "AdminGetBannedDevicesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device type",
            "name": "deviceType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "start date",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "end date",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the count to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBannedResponseV4"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/bans": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to get device bans of user.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin get device bans of user",
        "operationId": "AdminGetUserDeviceBansV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "user id",
            "name": "userId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBansResponseV4"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to ban a device.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [CREATE]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin Ban a device",
        "operationId": "AdminBanDeviceV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DeviceBanRequestV4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10204\u003c/td\u003e\u003ctd\u003edevice can not be banned\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10202\u003c/td\u003e\u003ctd\u003eactive device ban config already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/bans/{banId}": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to get device ban config.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin get device ban config",
        "operationId": "AdminGetDeviceBanV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "banId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBanResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to update a device ban config.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin update device ban config",
        "operationId": "AdminUpdateDeviceBanV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Ban ID, should follow UUID version 4 without hyphen",
            "name": "banId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.DeviceBanUpdateRequestV4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10202\u003c/td\u003e\u003ctd\u003eactive device ban config already exists\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/report": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to generate device report.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin generate device report",
        "operationId": "AdminGenerateReportV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device type",
            "name": "deviceType",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "start date",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "end date",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10158\u003c/td\u003e\u003ctd\u003eban not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/types": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to get device types.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin get device types",
        "operationId": "AdminGetDeviceTypesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceTypesResponseV4"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/bans": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to get device ban list.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin get device ban list",
        "operationId": "AdminGetDeviceBansV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceBansResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/decrypt": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to decrypt device id.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin decrypt device id",
        "operationId": "AdminDecryptDeviceV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceIDDecryptResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/unban": {
      "put": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to unban device.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]'\u003c/pre\u003e\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin unban device",
        "operationId": "AdminUnbanDeviceV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/devices/{deviceId}/users": {
      "get": {
        "description": "      \u003cp\u003eThis is the endpoint for an admin to get users that ever login on the device.\u003cbr\u003e\n\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:USER [READ]'\u003c/pre\u003e\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Devices V4"],
        "summary": "Admin get users by device id",
        "operationId": "AdminGetUsersByDeviceV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.DeviceUsersResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/test_users": {
      "post": {
        "description": "Create test users and not send verification code email.\n        \u003cp\u003eRequired Permission: ADMIN:NAMESPACE:{namespace}:USER\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "[TEST FACILITY ONLY]Create test Users",
        "operationId": "AdminCreateTestUsersV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.createTestUsersRequestV4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createTestUsersResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "501": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/bulk/validate": {
      "post": {
        "description": "Use this endpoint to check if userID exists or not\n\t\t\t\u003cbr\u003eRequired permission ' ADMIN:NAMESPACE:{namespace}:USER [READ]'\n\t\t\t\u003cbr\u003eMaximum number of userID to be checked is 50",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin Check Valid User ID",
        "operationId": "AdminBulkCheckValidUserIDV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "Object of Request to check valid userIDs",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.CheckValidUserIDRequestV4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListValidUserIDResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}": {
      "put": {
        "description": "\u003cp\u003eThis endpoint requires ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE] permission\u003c/p\u003e\n\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eSupported field {country, displayName, languageTag, dateOfBirth}\u003c/p\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\u003cp\u003eDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u003c/p\u003e\n\u003cbr\u003e\u003cb\u003eSeveral case of updating email address\u003c/b\u003e\n\u003cp\u003eaction code : 10103 \u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Update User",
        "operationId": "AdminUpdateUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/email": {
      "put": {
        "description": "\u003cp\u003eRequired permission \u003cpre\u003e'ADMIN:NAMESPACE:{namespace}:USER:{userId} [UPDATE]'\u003c/pre\u003e\u003c/p\u003e\n\n\u003cbr\u003e\u003cp\u003eThis is the endpoint for an admin to update a user email address.\nThis endpoint need a valid user token from an admin to verify its identity (email) before updating a user.\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Update a User Email Address",
        "operationId": "AdminUpdateUserEmailAddressV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID, should follow UUID version 4 without hyphen",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.EmailUpdateRequestV4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/mfa/disable": {
      "delete": {
        "description": "\u003cp\u003eThis endpoint requires ADMIN:NAMESPACE:{namespace}:USER:{userId} [DELETE] permission\u003c/p\u003e\n\u003cbr\u003e\u003cp\u003eThis endpoint is used to disable user 2FA.\u003c/b\u003e\u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Disable User 2FA",
        "operationId": "AdminDisableUserMFAV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10193\u003c/td\u003e\u003ctd\u003emfa not enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/namespaces/{namespace}/users/{userId}/roles": {
      "get": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [READ] permission.\n\nList roles assigned to a user\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin List User's Roles V4",
        "operationId": "AdminListUserRolesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE] permission.\n\nUser's roles will be replaced with roles from request body.\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin Update User's Role V4",
        "operationId": "AdminUpdateUserRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Object of Role ID to be assigned with allowed namespaces",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AddUserRoleV4Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10183\u003c/td\u003e\u003ctd\u003eunprocessable entity\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [UPDATE] permission.\n\nNew role will be appended to user's current roles. Request body need to specify allowed namespace for given role to support new role restriction.\nSkipped the check whether the user performing the request is a role manager / assigner since there is a plan to discard the role manager / assigner.\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin Add User's Role V4",
        "operationId": "AdminAddUserRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Object of Role ID to be assigned with allowed namespaces",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AddUserRoleV4Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.ListUserRolesV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint requires ADMIN:NAMESPACE:{namespace}:ROLE:USER:* [Delete] permission.\n\nRemove a role from user's roles.\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin Remove User Role v4",
        "operationId": "AdminRemoveUserRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Object of Role ID with allowed namespaces to be removed",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RemoveUserRoleV4Request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10183\u003c/td\u003e\u003ctd\u003eunprocessable entity\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/roles": {
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\n\naction code: 10414",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Roles",
        "operationId": "AdminGetRolesV4",
        "parameters": [
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with wildcard = true\n            - false if the expected result should only returns records with wildcard = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "name": "isWildcard",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "- true if the expected result should only returns records with adminRole = true\n            - false if the expected result should only returns records with adminRole = false\n            - empty (omitted) if the expected result should returns records with no wildcard filter at all",
            "name": "adminRole",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the count to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListRoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Required permission: ADMIN:ROLE [CREATE]\n\nCreate role request body:\n- roleName: specify role name, alphanumeric, cannot have special character (required)\n- adminRole: specify if role is for admin user (default false)\n- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n- deletable: specify if role can be deleted (default true)\n\naction code: 10401",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Create Role",
        "operationId": "AdminCreateRoleV4",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleV4Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10466\u003c/td\u003e\u003ctd\u003einvalid role members\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/roles/{roleId}": {
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\n\naction code: 10419",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Role",
        "operationId": "AdminGetRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:ROLE [DELETE]\n\nRemoves role ID from user's Roles and NamespaceRoles before deleting the role.\n\naction code: 10403",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Delete Role",
        "operationId": "AdminDeleteRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nUpdate role request body:\n- roleName: specify role name, alphanumeric, cannot have special character (required)\n- adminRole: specify if role is for admin user (default false)\n- isWildcard: specify if role can be assigned to wildcard (*) namespace (default false)\n- deletable: specify if role can be deleted (optional)\n\naction code: 10402",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Update Role",
        "operationId": "AdminUpdateRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RoleV4Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/roles/{roleId}/permissions": {
      "put": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\u003cp\u003eThis endpoint will REPLACE role's permissions with the ones defined in body\u003c/p\u003e\n\u003cbr\u003eaction code: 10405\u003cbr\u003e\n\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\u003cp\u003eSyntax reference\u003c/p\u003e\n\u003cp\u003eFields:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSpecial characters:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\u003c/ol\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Update Role Permissions",
        "operationId": "AdminUpdateRolePermissionsV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eRequired permission 'ADMIN:ROLE [UPDATE]'\u003c/p\u003e\n\u003cp\u003eThis endpoint will ATTACH permission(s) into the role\u003c/p\u003e\n\u003cbr\u003eaction code: 10404\u003cbr\u003e\n\u003cp\u003eSchedule contains cron string or date range (both are UTC, also in cron syntax) to indicate when a permission and action are in effect.\u003c/p\u003e\n\u003cp\u003eBoth schedule types accepts quartz compatible cron syntax e.g. * * * * * * *.\u003c/p\u003e\n\u003cp\u003eIn ranged schedule, first element will be start date, and second one will be end date\u003c/p\u003e\n\u003cp\u003eIf schedule is set, the scheduled action must be valid too, that is between 1 to 15, inclusive\u003c/p\u003e\n\u003cp\u003eSyntax reference\u003c/p\u003e\n\u003cp\u003eFields:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSeconds: 0-59 * / , -\u003c/li\u003e\n\u003cli\u003eMinutes: 0-59 * / , -\u003c/li\u003e\n\u003cli\u003eHours: 0-23 * / , -\u003c/li\u003e\n\u003cli\u003eDay of month: 1-31 * / , - L W\u003c/li\u003e\n\u003cli\u003eMonth: 1-12 JAN-DEC * / , -\u003c/li\u003e\n\u003cli\u003eDay of week: 0-6 SUN-SAT * / , - L #\u003c/li\u003e\n\u003cli\u003eYear: 1970-2099 * / , -\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSpecial characters:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e*: all values in the fields, e.g. * in seconds fields indicates every second\u003c/li\u003e\n\u003cli\u003e/: increments of ranges, e.g. 3-59/15 in the minute field indicate the third minute of the hour and every 15 minutes thereafter\u003c/li\u003e\n\u003cli\u003e,: separate items of a list, e.g. MON,WED,FRI in day of week\u003c/li\u003e\n\u003cli\u003e-: range, e.g. 2010-2018 indicates every year between 2010 and 2018, inclusive\u003c/li\u003e\n\u003cli\u003eL: last, e.g. When used in the day-of-week field, it allows you to specify constructs such as \"the last Friday\" (5L) of a given month. In the day-of-month field, it specifies the last day of the month.\u003c/li\u003e\n\u003cli\u003eW: business day, e.g. if you were to specify 15W as the value for the day-of-month field, the meaning is: \"the nearest business day to the 15th of the month.\"\u003c/li\u003e\n\u003cli\u003e#: must be followed by a number between one and five. It allows you to specify constructs such as \"the second Friday\" of a given month.\u003c/li\u003e\n\u003c/ol\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Add Role Permissions V4",
        "operationId": "AdminAddRolePermissionsV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountcommon.PermissionsV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.RoleV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Delete Role Permission V4",
        "operationId": "AdminDeleteRolePermissionsV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "Data not found"
          }
        }
      }
    },
    "/iam/v4/admin/roles/{roleId}/users": {
      "get": {
        "description": "Required permission ADMIN:ROLE [READ]\nQuery all users that has the specified role.\naction code: 10416\n",
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Get Role's Assigned Users",
        "operationId": "AdminListAssignedUsersV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "the maximum number of data that may be returned (1...100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the next page",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The cursor that points to query data for the previous page",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.ListAssignedUsersV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nParameters:\n- userId: string  (required)\n- namespace: string (user’s namespace)  (required)\n- assignedNamespaces: array of string (namespaces to be assigned on role) (required)\n\naction code: 10410",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Assign User to Role",
        "operationId": "AdminAssignUserToRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role id",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.AssignUserV4Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Operation succeeded",
            "schema": {
              "$ref": "#/definitions/model.AssignedUserV4Response"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10469\u003c/td\u003e\u003ctd\u003erole member exist\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10183\u003c/td\u003e\u003ctd\u003eunprocessable entity\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Required permission ADMIN:ROLE [UPDATE]\n\nCurrent implementation will revoke user from role in all assigned namespaces.\n\nParameters:\n- userId: string  (required)\n- namespace: string (user’s namespace)  (required)\n\naction code: 10411",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Roles"],
        "summary": "Revoke User from Role",
        "operationId": "AdminRevokeUserFromRoleV4",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID, should follow UUID version 4 without hyphen",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.RevokeUserV4Request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10457\u003c/td\u003e\u003ctd\u003especified role is not admin role\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10459\u003c/td\u003e\u003ctd\u003eoperator is not a role manager\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10456\u003c/td\u003e\u003ctd\u003erole not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/invite": {
      "post": {
        "description": "Required permission 'ADMIN:USER:INVITE [CREATE]\n\nUse this endpoint to invite admin or non-admin user and assign role to them. The role must be scoped to namespace. An admin user can only\nassign role with namespaces that the admin user has required permission which is same as the required permission of endpoint: [AdminAddUserRoleV4].\n\nDetail request body :\n- Email Address is required, List of email addresses that will be invited\n- isAdmin is required, true if user is admin, false if user is not admin\n- Namespace is optional. Only works on multi tenant mode,\n\tif not specified then it will be assigned Publisher namespace, \n\tif specified, it will become that studio/publisher where user is invited to.\n- Role is optional, if not specified then it will only assign User role.\n- Assigned Namespaces is optional, List of namespaces which the Role will be assigned to the user, only works when Role is not empty.\n\nThe invited admin will also assigned with \"User\" role by default.\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin invite User v4",
        "operationId": "AdminInviteUserNewV4",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.InviteUserRequestV4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.InviteUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me": {
      "patch": {
        "description": "\u003cp\u003eRequires valid user access token \u003c/p\u003e\n\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eSupported field {country, displayName, languageTag, dateOfBirth, userName}\u003c/p\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\u003cp\u003eDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u003c/p\u003e\n\u003cp\u003eaction code : 10103 \u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin Update My User",
        "operationId": "AdminUpdateMyUserV4",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/authenticator/disable": {
      "delete": {
        "description": "\u003cp\u003eThis endpoint is used to disable 2FA authenticator.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Disable 2FA authenticator",
        "operationId": "AdminDisableMyAuthenticatorV4",
        "responses": {
          "204": {
            "description": "Authenticator disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/authenticator/enable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA authenticator.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Enable 2FA authenticator",
        "operationId": "AdminEnableMyAuthenticatorV4",
        "parameters": [
          {
            "type": "string",
            "description": "code",
            "name": "code",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator enabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10190\u003c/td\u003e\u003ctd\u003eauth secret key expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/authenticator/key": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to generate a secret key for 3rd-party authenticator app. \nA QR code URI is also returned so that frontend can generate QR code image.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Generate secret key for 3rd-party authenticate app",
        "operationId": "AdminGenerateMyAuthenticatorKeyV4",
        "responses": {
          "200": {
            "description": "Key generated",
            "schema": {
              "$ref": "#/definitions/model.AuthenticatorKeyResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode": {
      "get": {
        "description": "\u003cp\u003eThis endpoint is used to get 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Get backup codes",
        "operationId": "AdminGetMyBackupCodesV4",
        "responses": {
          "200": {
            "description": "Get backup codes",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to generate 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Generate backup codes",
        "operationId": "AdminGenerateMyBackupCodesV4",
        "responses": {
          "200": {
            "description": "Backup codes generated",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode/disable": {
      "delete": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA backup codes.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Disable 2FA backup codes",
        "operationId": "AdminDisableMyBackupCodesV4",
        "responses": {
          "204": {
            "description": "Backup codes disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode/download": {
      "get": {
        "description": "\u003cp\u003eThis endpoint is used to download backup codes.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Download user backup codes",
        "operationId": "AdminDownloadMyBackupCodesV4",
        "responses": {
          "200": {
            "description": "Backup codes downloaded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10195\u003c/td\u003e\u003ctd\u003eno valid backup code found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/backupCode/enable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA backup codes.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Enable 2FA backup codes",
        "operationId": "AdminEnableMyBackupCodesV4",
        "responses": {
          "200": {
            "description": "Backup codes enabled",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/email/code": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to send email code.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Send code for enabling email",
        "operationId": "AdminSendMyMFAEmailCodeV4",
        "responses": {
          "204": {
            "description": "code sent"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/email/disable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to disable 2FA email.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Disable 2FA email",
        "operationId": "AdminDisableMyEmailV4",
        "responses": {
          "204": {
            "description": "email disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/email/enable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA email.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Enable 2FA email",
        "operationId": "AdminEnableMyEmailV4",
        "parameters": [
          {
            "type": "string",
            "description": "code",
            "name": "code",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "email enabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/me/mfa/factor": {
      "get": {
        "description": "\u003cp\u003eThis endpoint is used to get user enabled factors.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Get user enabled factors",
        "operationId": "AdminGetMyEnabledFactorsV4",
        "responses": {
          "200": {
            "description": "Methods returned",
            "schema": {
              "$ref": "#/definitions/model.EnabledFactorsResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10193\u003c/td\u003e\u003ctd\u003emfa not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to make 2FA factor default.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Make 2FA factor default",
        "operationId": "AdminMakeFactorMyDefaultV4",
        "parameters": [
          {
            "type": "string",
            "description": "method",
            "name": "factor",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Default method changed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10189\u003c/td\u003e\u003ctd\u003einvalid factor\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/admin/users/users/invite": {
      "post": {
        "description": "Required permission 'ADMIN:USER:INVITE [CREATE]\n\nUse this endpoint to invite admin or non-admin user and assign role to them. The role must be scoped to namespace. An admin user can only\nassign role with namespaces that the admin user has required permission which is same as the required permission of endpoint: [AdminAddUserRoleV4].\n\nDetail request body :\n- Email Address is required, List of email addresses that will be invited\n- isAdmin is required, true if user is admin, false if user is not admin\n- Namespace is optional. Only works on multi tenant mode,\n\tif not specified then it will be assigned Publisher namespace, \n\tif specified, it will become that studio/publisher where user is invited to.\n- Role is optional, if not specified then it will only assign User role.\n- Assigned Namespaces is optional, List of namespaces which the Role will be assigned to the user, only works when Role is not empty.\n\nThe invited admin will also assigned with \"User\" role by default.\n\nSubstitute endpoint: /iam/v4/admin/users/invite\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Admin invite User v4",
        "operationId": "AdminInviteUserV4",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.InviteUserRequestV4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.InviteUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/test_users": {
      "post": {
        "description": "Create a test user and not send verification code email\n\t\t\u003cp\u003e\n\t\t\u003cb\u003eRequired attributes:\u003c/b\u003e\n\t\t- verified: this new user is verified or not\n\t\t- authType: possible value is EMAILPASSWD\n\t\t- emailAddress: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- username: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- password: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- country: ISO3166-1 alpha-2 two letter, e.g. US.\n\t\t- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n\t\t\u003cbr/\u003e\n\t\t\u003cb\u003eNot required attributes:\u003c/b\u003e\t\n\t\t- displayName: Please refer to the rule from /v3/public/inputValidations API.\n\t\t\u003c/p\u003e\n\t\t\u003cp\u003eThis endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "[TEST FACILITY ONLY]Create test User",
        "operationId": "PublicCreateTestUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.createTestUserRequestV4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users": {
      "post": {
        "description": "Create a new user with unique email address and username.\n\t\t\u003cp\u003e\n\t\t\u003cb\u003eRequired attributes:\u003c/b\u003e\n\t\t- authType: possible value is EMAILPASSWD\n\t\t- emailAddress: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- username: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- password: Please refer to the rule from /v3/public/inputValidations API.\n\t\t- country: ISO3166-1 alpha-2 two letter, e.g. US.\n\t\t- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n\t\t\u003cbr/\u003e\n\t\t\u003cb\u003eNot required attributes:\u003c/b\u003e\t\n\t\t- displayName: Please refer to the rule from /v3/public/inputValidations API.\n\t\t\u003c/p\u003e\n\t\t\u003cp\u003eThis endpoint support accepting agreements for the created user. Supply the accepted agreements in acceptedPolicies attribute.\u003c/p\u003e\n\t\t",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Create User",
        "operationId": "PublicCreateUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.createUserRequestV4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/invite/{invitationId}": {
      "post": {
        "description": "This endpoint create user from saved roles when creating invitation and submitted data.\nUser will be able to login after completing submitting the data through this endpoint.\nAvailable Authentication Types:\n\n\tEMAILPASSWD: an authentication type used for new user registration through email.\n\nCountry use ISO3166-1 alpha-2 two letter, e.g. US.\n\nDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\n\nRequired attributes:\n- authType: possible value is EMAILPASSWD (see above)\n- country: ISO3166-1 alpha-2 two letter, e.g. US.\n- dateOfBirth: YYYY-MM-DD, e.g. 1990-01-01. valid values are between 1905-01-01 until current date.\n- displayName: Please refer to the rule from /v3/public/inputValidations API.\n- password: Please refer to the rule from /v3/public/inputValidations API.\n- username: Please refer to the rule from /v3/public/inputValidations API.\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Create User From Invitation",
        "operationId": "CreateUserFromInvitationV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserCreateFromInvitationRequestV4"
            }
          },
          {
            "type": "string",
            "description": "Invitation ID, should follow UUID version 4 without hyphen",
            "name": "invitationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account.createUserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10180\u003c/td\u003e\u003ctd\u003eadmin invitation not found or expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me": {
      "patch": {
        "description": "\u003cp\u003eRequires valid user access token \u003c/p\u003e\n\u003cbr\u003e\u003cp\u003eThis Endpoint support update user based on given data. \u003cb\u003eSingle request can update single field or multi fields.\u003c/b\u003e\u003c/p\u003e \n\u003cp\u003eSupported field {country, displayName, languageTag, dateOfBirth}\u003c/p\u003e\n\u003cp\u003eCountry use ISO3166-1 alpha-2 two letter, e.g. US.\u003c/p\u003e\n\u003cp\u003eDate of Birth format : YYYY-MM-DD, e.g. 2019-04-29.\u003c/p\u003e\n\u003cbr\u003e\u003cb\u003eSeveral case of updating email address\u003c/b\u003e\n\u003cp\u003eaction code : 10103 \u003c/p\u003e",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Update User",
        "operationId": "PublicUpdateUserV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.UserUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.UserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/email": {
      "put": {
        "description": "\u003cp\u003eThe endpoint to update my email address. \u003c/p\u003e\n\u003cp\u003eIt requires a verification code from \u003cpre\u003e/users/me/code/request\u003c/pre\u003e with \u003cb\u003eUpdateEmailAddress\u003c/b\u003e context.\u003c/p\u003e\n",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Update My Email Address",
        "operationId": "PublicUpdateUserEmailAddressV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.EmailUpdateRequestV4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation succeeded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/headless/code/verify": {
      "post": {
        "description": "Require valid user access token.\n        \tThe endpoint upgrades a headless account by linking the headless account with the email address, username, and password. \n\t\t\tBy upgrading the headless account into a full account, the user could use the email address, username, and password for using Justice IAM.\n        \t\u003cbr\u003e\n\t\t\tThe endpoint is a shortcut for upgrading a headless account and verifying the email address in one call. \n\t\t\tIn order to get a verification code for the endpoint, please check the \u003ca href=\"#operations-Users-PublicSendVerificationCodeV3\"\u003esend verification code endpoint\u003c/a\u003e.\n        \t\u003cbr\u003e\n\t\t\tThis endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.\n\t\t\tSupported user data fields:\n\t\t\t\t\u003cul\u003e\n\t\t\t\t\t\u003cli\u003edisplayName\u003c/li\u003e\n\t\t\t\t\t\u003cli\u003edateOfBirth : format YYYY-MM-DD, e.g. 2019-04-29\u003c/li\u003e\n\t\t\t\t\t\u003cli\u003ecountry : format ISO3166-1 alpha-2 two letter, e.g. US\u003c/li\u003e\n\t\t\t\t\u003c/ul\u003e\n        \taction code : 10124",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Upgrade headless account and automatically verified the email address if it is succeeded",
        "operationId": "PublicUpgradeHeadlessAccountWithVerificationCodeV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.upgradeHeadlessAccountWithVerificationCodeRequestV4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account.UserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10155\u003c/td\u003e\u003ctd\u003ecountry is not defined\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10130\u003c/td\u003e\u003ctd\u003euser under age\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10152\u003c/td\u003e\u003ctd\u003everification code not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10136\u003c/td\u003e\u003ctd\u003ecode is either been used or not valid anymore\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10149\u003c/td\u003e\u003ctd\u003everification contact type doesn't match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10148\u003c/td\u003e\u003ctd\u003everification code context doesn't match the required context\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10154\u003c/td\u003e\u003ctd\u003ecountry not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/headless/verify": {
      "post": {
        "description": "Require valid user authorization\n\t\t\tUpgrade headless account to full account without verifying email address. Client does not need to provide verification code which sent to email address.\n\t\t\t\u003cbr\u003eaction code : 10124 \u003c/p\u003e",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Upgrade user account to full account",
        "operationId": "PublicUpgradeHeadlessAccountV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account.upgradeHeadlessAccountRequestV4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account.UserResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20022\u003c/td\u003e\u003ctd\u003etoken is not user token\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10153\u003c/td\u003e\u003ctd\u003euser exist\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10170\u003c/td\u003e\u003ctd\u003eaccount is already a full account\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10133\u003c/td\u003e\u003ctd\u003eemail already used\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10177\u003c/td\u003e\u003ctd\u003eusername already used\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/authenticator/disable": {
      "delete": {
        "description": "\u003cp\u003eThis endpoint is used to disable 2FA authenticator.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Disable 2FA authenticator",
        "operationId": "PublicDisableMyAuthenticatorV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/authenticator/enable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA authenticator.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Enable 2FA authenticator",
        "operationId": "PublicEnableMyAuthenticatorV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "code",
            "name": "code",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator enabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10190\u003c/td\u003e\u003ctd\u003eauth secret key expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/authenticator/key": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to generate a secret key for 3rd-party authenticator app. \nA QR code URI is also returned so that frontend can generate QR code image.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Generate secret key for 3rd-party authenticate app",
        "operationId": "PublicGenerateMyAuthenticatorKeyV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Key generated",
            "schema": {
              "$ref": "#/definitions/model.AuthenticatorKeyResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode": {
      "get": {
        "description": "\u003cp\u003eThis endpoint is used to get 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Get backup codes",
        "operationId": "PublicGetMyBackupCodesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get backup codes",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to generate 8-digits backup codes. \nEach code is a one-time code and will be deleted once used.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Generate backup codes",
        "operationId": "PublicGenerateMyBackupCodesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Backup codes generated",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode/disable": {
      "delete": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA backup codes.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Disable 2FA backup codes",
        "operationId": "PublicDisableMyBackupCodesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Backup codes disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode/download": {
      "get": {
        "description": "\u003cp\u003eThis endpoint is used to download backup codes.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Download user backup codes",
        "operationId": "PublicDownloadMyBackupCodesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Backup codes downloaded"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10195\u003c/td\u003e\u003ctd\u003eno valid backup code found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCode/enable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA backup codes.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Enable 2FA backup codes",
        "operationId": "PublicEnableMyBackupCodesV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Backup codes enabled",
            "schema": {
              "$ref": "#/definitions/model.BackupCodesResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/device": {
      "delete": {
        "description": "\u003cp\u003e(Only for test)This endpoint is used to remove trusted device.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\u003cbr/\u003e\n\u003cp\u003eThis endpoint Requires device_token in cookie\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Remove Trusted Device",
        "operationId": "PublicRemoveTrustedDeviceV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Device removed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/email/code": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to send email code.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Send code for enabling email",
        "operationId": "PublicSendMyMFAEmailCodeV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "code sent"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "429": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20007\u003c/td\u003e\u003ctd\u003etoo many requests\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/email/disable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to disable 2FA email.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Disable 2FA email",
        "operationId": "PublicDisableMyEmailV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "email disabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/email/enable": {
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to enable 2FA email.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Enable 2FA email",
        "operationId": "PublicEnableMyEmailV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "code",
            "name": "code",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "email enabled"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10138\u003c/td\u003e\u003ctd\u003ecode not match\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10137\u003c/td\u003e\u003ctd\u003ecode is expired\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20003\u003c/td\u003e\u003ctd\u003eforbidden access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10194\u003c/td\u003e\u003ctd\u003efactor already enabled\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/namespaces/{namespace}/users/me/mfa/factor": {
      "get": {
        "description": "\u003cp\u003eThis endpoint is used to get user enabled factors.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Get user enabled factors",
        "operationId": "PublicGetMyEnabledFactorsV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Methods returned",
            "schema": {
              "$ref": "#/definitions/model.EnabledFactorsResponseV4"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10193\u003c/td\u003e\u003ctd\u003emfa not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cp\u003eThis endpoint is used to make 2FA factor default.\u003c/p\u003e\n\u003cp\u003eThis endpoint Requires valid user access token\u003c/p\u003e\n",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Make 2FA factor default",
        "operationId": "PublicMakeFactorMyDefaultV4",
        "parameters": [
          {
            "type": "string",
            "description": "Namespace, only accept alphabet and numeric",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "factor",
            "name": "factor",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Default method changed"
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10191\u003c/td\u003e\u003ctd\u003eemail address not verified\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10189\u003c/td\u003e\u003ctd\u003einvalid factor\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10192\u003c/td\u003e\u003ctd\u003efactor not enabled\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10171\u003c/td\u003e\u003ctd\u003eemail address not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "401": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20001\u003c/td\u003e\u003ctd\u003eunauthorized access\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "403": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20013\u003c/td\u003e\u003ctd\u003einsufficient permissions\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "404": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10139\u003c/td\u003e\u003ctd\u003eplatform account not found\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20008\u003c/td\u003e\u003ctd\u003euser not found\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    },
    "/iam/v4/public/users/invite": {
      "post": {
        "description": "This endpoint is used to invite a game studio admin user with new namespace in multi tenant mode.\nIt will return error if the service multi tenant mode is set to false.\n\nRequest body details:\n- emailAddress: email address of the user to be invited\n- namespace: new namespace of the user to be created\n- namespaceDisplayName: display name of the new namespace\n\nThe invited users will also be assigned with \"User\" role by default.\n",
        "produces": ["application/json"],
        "tags": ["Users V4"],
        "summary": "Public invite admin user v4",
        "operationId": "PublicInviteUserV4",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/model.PublicInviteUserRequestV4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/model.InviteUserResponseV3"
            }
          },
          "400": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20019\u003c/td\u003e\u003ctd\u003eunable to parse request body\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20002\u003c/td\u003e\u003ctd\u003evalidation error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "409": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "422": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e10183\u003c/td\u003e\u003ctd\u003eunprocessable entity\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          },
          "500": {
            "description": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003eerrorCode\u003c/td\u003e\u003ctd\u003eerrorMessage\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e20000\u003c/td\u003e\u003ctd\u003einternal server error\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e",
            "schema": {
              "$ref": "#/definitions/rest.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    ".BannedBy": {
      "required": ["DisplayName", "userId"],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    ".validation": {
      "required": [
        "blockedWord",
        "regex",
        "minLength",
        "maxLength",
        "maxRepeatingAlphaNum",
        "maxRepeatingSpecialCharacter",
        "minCharType",
        "letterCase",
        "specialCharacterLocation",
        "allowLetter",
        "allowDigit",
        "allowSpace",
        "allowUnicode",
        "allowAllSpecialCharacters",
        "isCustomRegex",
        "specialCharacters",
        "description"
      ],
      "properties": {
        "allowAllSpecialCharacters": {
          "description": "allow all special Characters non words.",
          "type": "boolean"
        },
        "allowDigit": {
          "type": "boolean"
        },
        "allowLetter": {
          "type": "boolean"
        },
        "allowSpace": {
          "type": "boolean"
        },
        "allowUnicode": {
          "type": "boolean"
        },
        "blockedWord": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/.validation.description"
          }
        },
        "isCustomRegex": {
          "type": "boolean"
        },
        "letterCase": {
          "type": "string"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingAlphaNum": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingSpecialCharacter": {
          "type": "integer",
          "format": "int32"
        },
        "minCharType": {
          "type": "integer",
          "format": "int32"
        },
        "minLength": {
          "type": "integer",
          "format": "int32"
        },
        "regex": {
          "type": "string"
        },
        "specialCharacterLocation": {
          "type": "string"
        },
        "specialCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    ".validation.description": {
      "required": ["language", "message"],
      "properties": {
        "language": {
          "type": "string"
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "account.UserActiveBanResponseV4": {
      "required": ["ban", "banId", "endDate"],
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "account.UserPermissionsResponseV4": {
      "required": ["action", "resource"],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "type": "integer",
          "format": "int32"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "account.UserResponseV4": {
      "required": [
        "authType",
        "bans",
        "country",
        "createdAt",
        "dateOfBirth",
        "displayName",
        "deletionStatus",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "emailAddress",
        "namespace",
        "oldEmailAddress",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/account.UserActiveBanResponseV4"
          }
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "deletionStatus": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "newEmailAddress": {
          "type": "string"
        },
        "oldEmailAddress": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/account.UserPermissionsResponseV4"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.createTestUserRequestV4": {
      "required": [
        "verified",
        "authType",
        "displayName",
        "emailAddress",
        "username",
        "password",
        "passwordMD5Sum",
        "country",
        "dateOfBirth"
      ],
      "properties": {
        "acceptedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          }
        },
        "authType": {
          "type": "string",
          "default": "EMAILPASSWD"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordMD5Sum": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "account.createTestUserResponseV4": {
      "required": [
        "verified",
        "userId",
        "namespace",
        "authType",
        "displayName",
        "emailAddress",
        "username",
        "country",
        "dateOfBirth",
        "password"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "account.createTestUsersRequestV4": {
      "required": ["count"],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "account.createTestUsersResponseV4": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/account.createTestUserResponseV4"
          }
        }
      }
    },
    "account.createUserRequestV4": {
      "required": ["authType", "emailAddress", "username", "country"],
      "properties": {
        "acceptedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          }
        },
        "authType": {
          "type": "string",
          "default": "EMAILPASSWD"
        },
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordMD5Sum": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.createUserResponseV4": {
      "required": ["userId", "namespace", "authType", "displayName", "emailAddress", "username", "country", "dateOfBirth"],
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.upgradeHeadlessAccountRequestV4": {
      "required": ["emailAddress", "username", "password"],
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "account.upgradeHeadlessAccountWithVerificationCodeRequestV4": {
      "required": ["emailAddress", "username", "password", "code"],
      "properties": {
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "accountcommon.Ban": {
      "required": ["Ban", "Description"],
      "properties": {
        "Ban": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "accountcommon.BanReason": {
      "required": ["Reason", "Description"],
      "properties": {
        "Description": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        }
      }
    },
    "accountcommon.BanReasonV3": {
      "required": ["reason", "description"],
      "properties": {
        "description": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "accountcommon.BanReasons": {
      "required": ["Reasons"],
      "properties": {
        "Reasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.BanReason"
          }
        }
      }
    },
    "accountcommon.BanReasonsV3": {
      "required": ["reasons"],
      "properties": {
        "reasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.BanReasonV3"
          }
        }
      }
    },
    "accountcommon.BanV3": {
      "required": ["ban", "type"],
      "properties": {
        "ban": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptions": {
          "$ref": "#/definitions/accountcommon.Description"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "accountcommon.BannedByV3": {
      "required": ["userId", "displayName"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.Bans": {
      "required": ["Bans"],
      "properties": {
        "Bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Ban"
          }
        }
      }
    },
    "accountcommon.BansV3": {
      "required": ["bans"],
      "properties": {
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.BanV3"
          }
        }
      }
    },
    "accountcommon.ClientPermission": {
      "required": ["Resource", "Action"],
      "properties": {
        "Action": {
          "type": "integer",
          "format": "int32"
        },
        "Resource": {
          "type": "string"
        }
      }
    },
    "accountcommon.ClientPermissionV3": {
      "required": ["resource", "action"],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        }
      }
    },
    "accountcommon.ClientPermissions": {
      "required": ["Permissions"],
      "properties": {
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.ClientPermission"
          }
        }
      }
    },
    "accountcommon.ClientPermissionsV3": {
      "required": ["permissions"],
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.ClientPermissionV3"
          }
        }
      }
    },
    "accountcommon.ConflictedUserPlatformAccounts": {
      "required": ["platformUserID", "publisherAccounts"],
      "properties": {
        "platformUserID": {
          "type": "string"
        },
        "publisherAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserWithLinkedPlatformAccounts"
          }
        }
      }
    },
    "accountcommon.Country": {
      "required": ["CountryCode", "Namespace", "CountryName", "AgeRestriction", "Enable"],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean"
        },
        "Namespace": {
          "type": "string"
        }
      }
    },
    "accountcommon.CountryAgeRestriction": {
      "required": ["CountryCode", "CountryName", "AgeRestriction", "Enable"],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "accountcommon.Description": {
      "required": ["en-US", "zh-CN"],
      "properties": {
        "en-US": {
          "type": "string"
        },
        "zh-CN": {
          "type": "string"
        }
      }
    },
    "accountcommon.DistinctLinkedPlatformV3": {
      "required": ["platformName", "linkedAt", "details"],
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.SimpleUserPlatformInfoV3"
          }
        },
        "linkedAt": {
          "type": "string"
        },
        "platformName": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.DistinctPlatformResponseV3": {
      "required": ["platforms"],
      "properties": {
        "platforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.DistinctLinkedPlatformV3"
          }
        }
      }
    },
    "accountcommon.InputValidationDescription": {
      "required": ["language", "message"],
      "properties": {
        "language": {
          "type": "string"
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "accountcommon.JWTBanV3": {
      "required": ["ban", "endDate", "enabled", "targetedNamespace"],
      "properties": {
        "ban": {
          "type": "string"
        },
        "disabledDate": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "targetedNamespace": {
          "type": "string"
        }
      }
    },
    "accountcommon.ListUsersWithPlatformAccountsResponse": {
      "required": ["data", "paging", "totalData"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserWithPlatformAccounts"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        },
        "totalData": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "accountcommon.NamespaceRole": {
      "required": ["roleId", "namespace"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "accountcommon.NetflixCertificates": {
      "required": [
        "rootCertificate",
        "publicCertificate",
        "encryptedPrivateKey",
        "rootCertificateName",
        "publicCertificateName",
        "encryptedPrivateKeyName"
      ],
      "properties": {
        "encryptedPrivateKey": {
          "type": "string"
        },
        "encryptedPrivateKeyName": {
          "type": "string"
        },
        "publicCertificate": {
          "type": "string"
        },
        "publicCertificateName": {
          "type": "string"
        },
        "rootCertificate": {
          "type": "string"
        },
        "rootCertificateName": {
          "type": "string"
        }
      }
    },
    "accountcommon.Pagination": {
      "required": ["Previous", "Next", "First", "Last"],
      "properties": {
        "First": {
          "type": "string"
        },
        "Last": {
          "type": "string"
        },
        "Next": {
          "type": "string"
        },
        "Previous": {
          "type": "string"
        }
      }
    },
    "accountcommon.PaginationV3": {
      "required": ["previous", "next", "first", "last"],
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        }
      }
    },
    "accountcommon.Permission": {
      "required": ["Resource", "Action"],
      "properties": {
        "Action": {
          "type": "integer",
          "format": "int32"
        },
        "Resource": {
          "type": "string"
        },
        "SchedAction": {
          "type": "integer",
          "format": "int32"
        },
        "SchedCron": {
          "type": "string"
        },
        "SchedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "accountcommon.PermissionV3": {
      "required": ["resource", "action"],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "type": "integer",
          "format": "int32"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "accountcommon.Permissions": {
      "required": ["Permissions"],
      "properties": {
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        }
      }
    },
    "accountcommon.PermissionsV3": {
      "required": ["permissions"],
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        }
      }
    },
    "accountcommon.PlatformAccount": {
      "required": ["namespace", "platformUserId"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.PlatformUserInformationV3": {
      "required": ["platformId", "platformUserId", "namespace", "linkedAt"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedAt": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "xboxUserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RegisteredDomain": {
      "required": ["domain", "roleId", "namespaces", "affectedClientIDs"],
      "properties": {
        "affectedClientIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "accountcommon.Role": {
      "required": ["RoleId", "RoleName", "Permissions", "Managers", "AdminRole", "IsWildcard", "Members", "Deletable"],
      "properties": {
        "AdminRole": {
          "type": "boolean"
        },
        "Deletable": {
          "type": "boolean"
        },
        "IsWildcard": {
          "type": "boolean"
        },
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        },
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleManager": {
      "required": ["UserId", "Namespace", "DisplayName"],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleManagerV3": {
      "required": ["userId", "namespace", "displayName"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleMember": {
      "required": ["UserId", "Namespace", "DisplayName"],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleMemberV3": {
      "required": ["userId", "namespace", "displayName"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.RoleV3": {
      "required": ["roleId", "roleName", "permissions", "managers", "adminRole", "isWildcard", "members"],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "accountcommon.SimpleUserPlatformInfoV3": {
      "required": ["linkedAt", "namespace", "originNamespace"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "linkedAt": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "originNamespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserInformationV3": {
      "required": ["emailAddresses", "platformUsers"],
      "properties": {
        "country": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "platformUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformUserInformationV3"
          }
        },
        "username": {
          "type": "string"
        },
        "xboxUserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserLinkedPlatform": {
      "required": ["UserId", "OriginNamespace", "Namespace", "LinkedAt"],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedAt": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "OriginNamespace": {
          "type": "string"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserLinkedPlatformV3": {
      "required": ["linkedAt", "namespace", "originNamespace", "userId", "accountGroup"],
      "properties": {
        "accountGroup": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedAt": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "originNamespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserLinkedPlatformsResponseV3": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatformV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "accountcommon.UserPlatformInfo": {
      "required": ["userId", "platformUserId", "platformId"],
      "properties": {
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserPlatforms": {
      "required": ["userIdPlatforms"],
      "properties": {
        "userIdPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserPlatformInfo"
          }
        }
      }
    },
    "accountcommon.UserSearchByPlatformIDResult": {
      "required": ["UserId", "DisplayName", "EmailAddress", "PhoneNumber", "LinkedPlatforms"],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserSearchResult": {
      "required": ["UserId", "DisplayName", "EmailAddress", "PhoneNumber", "LinkedPlatforms"],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserLinkedPlatform"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserWithLinkedPlatformAccounts": {
      "required": ["userId", "namespace", "displayName", "emailAddress", "linkedPlatforms"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "linkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformAccount"
          }
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "accountcommon.UserWithPlatformAccounts": {
      "required": ["userId", "namespace", "linkedPlatforms"],
      "properties": {
        "linkedPlatforms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PlatformAccount"
          }
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "bloom.FilterJSON": {
      "required": ["m", "k", "bits"],
      "properties": {
        "bits": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "k": {
          "type": "integer",
          "format": "integer"
        },
        "m": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "clientmodel.ClientCreateRequest": {
      "required": ["Namespace", "ClientId", "ClientName", "Secret", "RedirectUri", "ClientPermissions", "TwoFactorEnabled"],
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "clientmodel.ClientCreationResponse": {
      "required": ["Namespace", "ClientId", "ClientName", "RedirectUri", "ClientPermissions", "TwoFactorEnabled"],
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "clientmodel.ClientCreationV3Request": {
      "required": [
        "clientId",
        "clientName",
        "description",
        "secret",
        "namespace",
        "redirectUri",
        "oauthClientType",
        "audiences",
        "baseUri",
        "clientPermissions",
        "clientPlatform"
      ],
      "properties": {
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baseUri": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "clientPlatform": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "description": "length 0~1024",
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "oauthAccessTokenExpiration": {
          "description": "min value 1 second, max value 86400 seconds",
          "type": "integer",
          "format": "int32"
        },
        "oauthAccessTokenExpirationTimeUnit": {
          "description": "valid time unit: SECONDS, MINUTES, or HOURS",
          "type": "string"
        },
        "oauthClientType": {
          "type": "string"
        },
        "oauthRefreshTokenExpiration": {
          "description": "min value 1 seconds, max value 2592000 seconds",
          "type": "integer",
          "format": "int32"
        },
        "oauthRefreshTokenExpirationTimeUnit": {
          "description": "valid time unit: SECONDS, MINUTES, HOURS or DAYS",
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secret": {
          "type": "string"
        },
        "twoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "clientmodel.ClientResponse": {
      "required": ["Namespace", "ClientId", "ClientName", "RedirectUri", "CreatedAt", "ClientPermissions", "TwoFactorEnabled"],
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Namespace": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "clientmodel.ClientUpdateRequest": {
      "required": ["ClientName", "RedirectUri", "TwoFactorEnabled"],
      "properties": {
        "ClientName": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "TwoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "clientmodel.ClientUpdateSecretRequest": {
      "required": ["NewSecret"],
      "properties": {
        "NewSecret": {
          "type": "string"
        }
      }
    },
    "clientmodel.ClientUpdateV3Request": {
      "required": ["description", "clientPlatform"],
      "properties": {
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baseUri": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "clientPlatform": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "description": "length 0~1024",
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "oauthAccessTokenExpiration": {
          "description": "min value 1 second, max value 86400 seconds",
          "type": "integer",
          "format": "int32"
        },
        "oauthAccessTokenExpirationTimeUnit": {
          "description": "valid time unit: SECONDS, MINUTES, or HOURS. Default is SECONDS",
          "type": "string"
        },
        "oauthRefreshTokenExpiration": {
          "description": "min value 1 seconds, max value 2592000 seconds",
          "type": "integer",
          "format": "int32"
        },
        "oauthRefreshTokenExpirationTimeUnit": {
          "description": "valid time unit: SECONDS, MINUTES, HOURS or DAYS. Default is MINUTES",
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "twoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "clientmodel.ClientV3Response": {
      "required": [
        "clientId",
        "clientName",
        "description",
        "namespace",
        "redirectUri",
        "oauthClientType",
        "audiences",
        "baseUri",
        "clientPermissions",
        "createdAt",
        "modifiedAt",
        "scopes",
        "clientPlatform",
        "twoFactorEnabled"
      ],
      "properties": {
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baseUri": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "clientPlatform": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "oauthAccessTokenExpiration": {
          "type": "integer",
          "format": "int32"
        },
        "oauthAccessTokenExpirationTimeUnit": {
          "type": "string"
        },
        "oauthClientType": {
          "type": "string"
        },
        "oauthRefreshTokenExpiration": {
          "type": "integer",
          "format": "int32"
        },
        "oauthRefreshTokenExpirationTimeUnit": {
          "type": "string"
        },
        "parentNamespace": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "twoFactorEnabled": {
          "type": "boolean"
        }
      }
    },
    "clientmodel.ClientsV3Response": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clientmodel.ClientV3Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "clientmodel.V3ClientUpdateSecretRequest": {
      "required": ["newSecret"],
      "properties": {
        "newSecret": {
          "type": "string"
        }
      }
    },
    "legal.AcceptedPoliciesRequest": {
      "required": ["localizedPolicyVersionId", "policyVersionId", "policyId", "isAccepted"],
      "properties": {
        "isAccepted": {
          "type": "boolean"
        },
        "localizedPolicyVersionId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "policyVersionId": {
          "type": "string"
        }
      }
    },
    "model.AccountProgressionInfo": {
      "required": ["linkedGames"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "linkedGames": {
          "description": "For headlessAccount: list of all namespaces from this headless account. For currentAccount: list of all namespaces that conflict with headlessAccount",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.AddUserRoleV4Request": {
      "required": ["roleId", "assignedNamespaces"],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.AgeRestrictionRequest": {
      "required": ["AgeRestriction", "Enable"],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "model.AgeRestrictionRequestV3": {
      "required": ["ageRestriction", "enable"],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "model.AgeRestrictionResponse": {
      "required": ["AgeRestriction", "Enable"],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "model.AgeRestrictionResponseV3": {
      "required": ["ageRestriction", "enable"],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "model.AssignUserV4Request": {
      "required": ["userId", "namespace", "assignedNamespaces"],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.AssignedUserV4Response": {
      "required": ["userId", "roleId", "assignedNamespaces", "email", "displayName"],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.AuthenticatorKeyResponseV4": {
      "required": ["secretKey", "uri"],
      "properties": {
        "secretKey": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "model.AvatarSyncRequestV4": {
      "required": ["avatarUrl", "updatedAt"],
      "properties": {
        "avatarUrl": {
          "type": "string"
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "model.BackupCodesResponseV4": {
      "required": ["generatedAt"],
      "properties": {
        "generatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "invalidCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.BanCreateRequest": {
      "required": ["ban", "comment", "endDate", "reason", "skipNotif"],
      "properties": {
        "ban": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "skipNotif": {
          "type": "boolean"
        }
      }
    },
    "model.BanUpdateRequest": {
      "required": ["enabled", "skipNotif"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "skipNotif": {
          "type": "boolean"
        }
      }
    },
    "model.BulkBanCreateRequestV3": {
      "required": ["userIds", "ban", "comment", "endDate", "reason", "skipNotif"],
      "properties": {
        "ban": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "skipNotif": {
          "type": "boolean"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.BulkUnbanCreateRequestV3": {
      "properties": {
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.userUnbanCreateRequestV3"
          }
        }
      }
    },
    "model.CheckValidUserIDRequestV4": {
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "description": "only valid uuid is allowed",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.Country": {
      "required": ["CountryCode", "CountryName", "AgeRestriction", "Enable"],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "Enable": {
          "type": "boolean"
        }
      }
    },
    "model.CountryAgeRestrictionRequest": {
      "required": ["AgeRestriction"],
      "properties": {
        "AgeRestriction": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.CountryAgeRestrictionV3Request": {
      "required": ["ageRestriction"],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.CountryV3Response": {
      "required": ["countryCode", "countryName", "ageRestriction", "enable"],
      "properties": {
        "ageRestriction": {
          "type": "integer",
          "format": "int32"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "model.CreateJusticeUserResponse": {
      "required": ["userId", "namespace"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.DeviceBanRequestV4": {
      "required": ["deviceType", "deviceId", "reason", "comment", "endDate", "enabled", "ext"],
      "properties": {
        "comment": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "endDate": {
          "type": "string"
        },
        "ext": {
          "type": "object"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "model.DeviceBanResponseV4": {
      "required": [
        "id",
        "namespace",
        "targetNamespace",
        "deviceId",
        "deviceType",
        "bannedBy",
        "bannedAt",
        "comment",
        "reason",
        "enabled",
        "endDate",
        "disabledAt"
      ],
      "properties": {
        "bannedAt": {
          "type": "integer",
          "format": "int64"
        },
        "bannedBy": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "disabledAt": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        },
        "endDate": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "targetNamespace": {
          "type": "string"
        }
      }
    },
    "model.DeviceBanUpdateRequestV4": {
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "model.DeviceBannedResponseV4": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.DeviceBanResponseV4"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      }
    },
    "model.DeviceBansResponseV4": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.DeviceBanResponseV4"
          }
        }
      }
    },
    "model.DeviceIDDecryptResponseV4": {
      "required": ["deviceId"],
      "properties": {
        "deviceId": {
          "type": "string"
        }
      }
    },
    "model.DeviceResponseV4": {
      "required": ["deviceId", "deviceType", "ip", "lastLoginTime"],
      "properties": {
        "ban": {
          "$ref": "#/definitions/model.DeviceBanResponseV4"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "ext": {
          "type": "object"
        },
        "ip": {
          "type": "string"
        },
        "lastLoginTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "model.DeviceTypeResponseV4": {
      "required": ["deviceType"],
      "properties": {
        "deviceType": {
          "type": "string"
        }
      }
    },
    "model.DeviceTypesResponseV4": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.DeviceTypeResponseV4"
          }
        }
      }
    },
    "model.DeviceUserResponseV4": {
      "required": ["userId", "namespace", "ip", "lastLoginTime"],
      "properties": {
        "ext": {
          "type": "object"
        },
        "ip": {
          "type": "string"
        },
        "lastLoginTime": {
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.DeviceUsersResponseV4": {
      "required": ["users"],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.DeviceUserResponseV4"
          }
        }
      }
    },
    "model.DevicesResponseV4": {
      "required": ["devices"],
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.DeviceResponseV4"
          }
        }
      }
    },
    "model.DisableUserRequest": {
      "properties": {
        "Reason": {
          "type": "string"
        }
      }
    },
    "model.EmailUpdateRequestV4": {
      "required": ["code", "emailAddress"],
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      }
    },
    "model.EnabledFactorsResponseV4": {
      "required": ["enabled", "default"],
      "properties": {
        "default": {
          "type": "string"
        },
        "enabled": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.FailedBanUnbanUserV3": {
      "required": ["userId", "reason"],
      "properties": {
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.ForgotPasswordRequestV3": {
      "required": ["emailAddress"],
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.GetAdminUsersResponse": {
      "required": ["Data", "Paging"],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponse"
          }
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      }
    },
    "model.GetLinkHeadlessAccountConflictResponse": {
      "required": ["platformLinkConflict", "platformAlreadyLinked", "platformId"],
      "properties": {
        "currentAccount": {
          "description": "only exists when platformLinkConflict=false \u0026 platformAlreadyLinked=false",
          "$ref": "#/definitions/model.AccountProgressionInfo"
        },
        "headlessAccount": {
          "description": "only exists when platformLinkConflict=false \u0026 platformAlreadyLinked=false",
          "$ref": "#/definitions/model.AccountProgressionInfo"
        },
        "platformAlreadyLinked": {
          "description": "if full account already linked to this platform",
          "type": "boolean"
        },
        "platformId": {
          "type": "string"
        },
        "platformLinkConflict": {
          "description": "if linked to this platform's other account",
          "type": "boolean"
        }
      }
    },
    "model.GetPublisherUserResponse": {
      "required": ["UserId", "Namespace"],
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.GetPublisherUserV3Response": {
      "required": ["userId", "namespace"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.GetUserBanV3Response": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserBanResponseV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.GetUserJusticePlatformAccountResponse": {
      "required": ["UserID", "DesignatedNamespace"],
      "properties": {
        "DesignatedNamespace": {
          "type": "string"
        },
        "UserID": {
          "type": "string"
        }
      }
    },
    "model.GetUserMapping": {
      "required": ["UserId", "Namespace"],
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.GetUserMappingV3": {
      "required": ["userId", "namespace"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.GetUsersResponseWithPaginationV3": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.InputValidationData": {
      "required": ["field", "validation"],
      "properties": {
        "field": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/model.ValidationDetail"
        }
      }
    },
    "model.InputValidationDataPublic": {
      "required": ["field", "validation"],
      "properties": {
        "field": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/model.ValidationDetailPublic"
        }
      }
    },
    "model.InputValidationUpdatePayload": {
      "required": ["field", "validation"],
      "properties": {
        "field": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/.validation"
        }
      }
    },
    "model.InputValidationsPublicResponse": {
      "required": ["version", "data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.InputValidationDataPublic"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.InputValidationsResponse": {
      "required": ["version", "data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.InputValidationData"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.InviteUserRequestV3": {
      "required": ["emailAddresses", "roles", "isAdmin", "namespace"],
      "properties": {
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isAdmin": {
          "type": "boolean"
        },
        "namespace": {
          "description": "multi tenant studio namespace",
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.InviteUserRequestV4": {
      "required": ["emailAddresses", "assignedNamespaces", "isAdmin"],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isAdmin": {
          "type": "boolean"
        },
        "namespace": {
          "description": "multi tenant studio namespace",
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.InviteUserResponseV3": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserInvitationV3"
          }
        }
      }
    },
    "model.LinkHeadlessAccountRequest": {
      "required": ["oneTimeLinkCode", "chosenNamespaces"],
      "properties": {
        "chosenNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "oneTimeLinkCode": {
          "type": "string"
        }
      }
    },
    "model.LinkPlatformAccountRequest": {
      "required": ["platformId", "platformUserId"],
      "properties": {
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        }
      }
    },
    "model.LinkPlatformAccountWithProgressionRequest": {
      "required": ["requestId", "chosenNamespaces"],
      "properties": {
        "chosenNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "model.LinkRequest": {
      "required": ["request_id", "status", "operation_name", "redirect_uri", "client_id", "namespace", "payload"],
      "properties": {
        "client_id": {
          "type": "string"
        },
        "conflict_publisher_user_id": {
          "type": "string"
        },
        "conflict_user_linked_games": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "current_user_linked_games": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "error": {
          "$ref": "#/definitions/rest.ErrorResponseWithConflictedUserPlatformAccounts"
        },
        "expiration": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "operation_name": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "platformDisplayName": {
          "type": "string"
        },
        "platformID": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "model.LinkingHistoryResponseWithPaginationV3": {
      "required": ["data", "totalData", "paging"],
      "properties": {
        "data": {
          "description": "publisher user id which linked to this platform account",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        },
        "totalData": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.ListAssignedUsersV4Response": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.AssignedUserV4Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.ListBulkUserBanResponseV3": {
      "required": ["successBans", "failedBans"],
      "properties": {
        "failedBans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.FailedBanUnbanUserV3"
          }
        },
        "successBans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserBanResponseV3"
          }
        }
      }
    },
    "model.ListBulkUserResponse": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserBaseInfo"
          }
        }
      }
    },
    "model.ListEmailAddressRequest": {
      "required": ["listEmailAddressRequest"],
      "properties": {
        "listEmailAddressRequest": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.ListRoleV4Response": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.RoleV4Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.ListUserInformationResult": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserInfoResponse"
          }
        }
      }
    },
    "model.ListUserResponseV3": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          }
        }
      }
    },
    "model.ListUserRolesV4Response": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserRolesV4Response"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.ListValidUserIDResponseV4": {
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.ValidUserIDResponseV4"
          }
        }
      }
    },
    "model.LoginHistoriesResponse": {
      "required": ["Data", "Paging"],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserLoginHistoryResponse"
          }
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      }
    },
    "model.NamespaceRoleRequest": {
      "required": ["roleId", "namespace"],
      "properties": {
        "namespace": {
          "description": "required",
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.PermissionDeleteRequest": {
      "required": ["Resource", "Action"],
      "properties": {
        "Action": {
          "type": "integer",
          "format": "int32"
        },
        "Resource": {
          "type": "string"
        }
      }
    },
    "model.PlatformDomainDeleteRequest": {
      "required": ["domain"],
      "properties": {
        "domain": {
          "type": "string"
        }
      }
    },
    "model.PlatformDomainResponse": {
      "required": ["registeredDomains"],
      "properties": {
        "registeredDomains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RegisteredDomain"
          }
        }
      }
    },
    "model.PlatformDomainUpdateRequest": {
      "required": ["domain", "roleId", "assignedNamespaces", "affectedClientIDs"],
      "properties": {
        "affectedClientIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.PlatformUserIDRequest": {
      "required": ["platformUserIds"],
      "properties": {
        "platformUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.PlatformUserInformation": {
      "required": ["PlatformID", "PlatformUserID", "DisplayName", "Namespace", "LinkedAt"],
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "LinkedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Namespace": {
          "type": "string"
        },
        "PlatformID": {
          "type": "string"
        },
        "PlatformUserID": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.PublicInviteUserRequestV4": {
      "required": ["emailAddress", "namespace", "namespaceDisplayName"],
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceDisplayName": {
          "type": "string"
        }
      }
    },
    "model.PublicThirdPartyPlatformInfo": {
      "required": ["ClientId", "PlatformId", "PlatformName", "AppId", "Environment", "IsActive"],
      "properties": {
        "AppId": {
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformName": {
          "type": "string"
        }
      }
    },
    "model.PublicUserInformationResponseV3": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.PublicUserInformationV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.PublicUserInformationV3": {
      "required": ["createdAt", "displayName", "namespace", "userId", "userName"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.PublicUserResponse": {
      "required": [
        "Namespace",
        "UserId",
        "DisplayName",
        "AuthType",
        "LoginId",
        "CreatedAt",
        "Roles",
        "NamespaceRoles",
        "Permissions",
        "PhoneVerified",
        "EmailVerified",
        "Enabled",
        "DeletionStatus",
        "LastEnabledChangedTime",
        "Bans"
      ],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponse"
          }
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletionStatus": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean"
        },
        "Enabled": {
          "type": "boolean"
        },
        "LastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NamespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "PhoneVerified": {
          "type": "boolean"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.PublicUserResponseV3": {
      "required": [
        "authType",
        "bans",
        "createdAt",
        "displayName",
        "deletionStatus",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "namespace",
        "namespaceRoles",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponseV3"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "deletionStatus": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserPermissionsResponseV3"
          }
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.PublicUsersResponse": {
      "properties": {
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.PublicUserResponse"
          }
        }
      }
    },
    "model.RemoveUserRoleV4Request": {
      "required": ["roleId", "assignedNamespaces"],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "model.ResetPasswordRequest": {
      "required": ["Code", "LoginID", "NewPassword"],
      "properties": {
        "Code": {
          "type": "string"
        },
        "LoginID": {
          "type": "string"
        },
        "NewPassword": {
          "type": "string"
        }
      }
    },
    "model.ResetPasswordRequestV3": {
      "required": ["code", "emailAddress", "newPassword"],
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "model.RevokeUserV4Request": {
      "required": ["userId", "namespace"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.RoleAdminStatusResponse": {
      "required": ["AdminRole"],
      "properties": {
        "AdminRole": {
          "type": "boolean"
        }
      }
    },
    "model.RoleAdminStatusResponseV3": {
      "required": ["adminRole"],
      "properties": {
        "adminRole": {
          "type": "boolean"
        }
      }
    },
    "model.RoleCreateRequest": {
      "required": ["RoleName", "Permissions", "Managers", "AdminRole", "Members"],
      "properties": {
        "AdminRole": {
          "type": "boolean"
        },
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        },
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleCreateV3Request": {
      "required": ["roleName", "permissions", "managers", "adminRole", "isWildcard", "members"],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "deletable": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleManagersRequest": {
      "required": ["Managers"],
      "properties": {
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        }
      }
    },
    "model.RoleManagersRequestV3": {
      "required": ["managers"],
      "properties": {
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        }
      }
    },
    "model.RoleManagersResponse": {
      "required": ["Managers"],
      "properties": {
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        }
      }
    },
    "model.RoleManagersResponsesV3": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleMembersRequest": {
      "required": ["Members"],
      "properties": {
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        }
      }
    },
    "model.RoleMembersRequestV3": {
      "required": ["members"],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        }
      }
    },
    "model.RoleMembersResponse": {
      "required": ["Members"],
      "properties": {
        "Members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMember"
          }
        }
      }
    },
    "model.RoleMembersResponseV3": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleMemberV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleNamesResponseV3": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleResponse": {
      "required": ["RoleId", "RoleName", "Permissions", "IsWildcard"],
      "properties": {
        "IsWildcard": {
          "type": "boolean"
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleResponseV3": {
      "required": ["roleId", "roleName", "permissions", "isWildcard", "adminRole"],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleResponseWithManagers": {
      "required": ["RoleId", "RoleName", "Permissions", "Managers", "IsWildcard"],
      "properties": {
        "IsWildcard": {
          "type": "boolean"
        },
        "Managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManager"
          }
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "RoleId": {
          "type": "string"
        },
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleResponseWithManagersAndPaginationV3": {
      "required": ["data", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.RoleResponseWithManagersV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        }
      }
    },
    "model.RoleResponseWithManagersV3": {
      "required": ["roleId", "roleName", "permissions", "managers", "isWildcard", "adminRole"],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RoleManagerV3"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleUpdateRequest": {
      "required": ["RoleName"],
      "properties": {
        "RoleName": {
          "type": "string"
        }
      }
    },
    "model.RoleUpdateRequestV3": {
      "required": ["roleName", "isWildcard"],
      "properties": {
        "deletable": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleV4Request": {
      "required": ["roleName", "adminRole", "isWildcard"],
      "properties": {
        "adminRole": {
          "type": "boolean",
          "default": false
        },
        "deletable": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean",
          "default": false
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.RoleV4Response": {
      "required": ["roleId", "roleName", "permissions", "adminRole", "isWildcard"],
      "properties": {
        "adminRole": {
          "type": "boolean"
        },
        "isWildcard": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.SSOPlatformCredentialRequest": {
      "required": ["redirectUri", "ssoUrl", "secret", "apiKey", "appId", "acsUrl", "federationMetadataUrl", "isActive"],
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "federationMetadataUrl": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "ssoUrl": {
          "type": "string"
        }
      }
    },
    "model.SSOPlatformCredentialResponse": {
      "required": [
        "namespace",
        "platformId",
        "redirectUri",
        "secret",
        "ssoUrl",
        "truncatedApiKey",
        "appId",
        "acsUrl",
        "federationMetadataUrl",
        "isActive"
      ],
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "federationMetadataUrl": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "namespace": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "ssoUrl": {
          "type": "string"
        },
        "truncatedApiKey": {
          "description": "first few characters of key",
          "type": "string"
        }
      }
    },
    "model.SearchUsersByPlatformIDResponse": {
      "required": ["Data", "Paging"],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserSearchByPlatformIDResult"
          }
        },
        "Paging": {
          "$ref": "#/definitions/accountcommon.Pagination"
        }
      }
    },
    "model.SearchUsersResponse": {
      "required": ["Data"],
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.UserSearchResult"
          }
        }
      }
    },
    "model.SearchUsersResponseWithPaginationV3": {
      "required": ["data", "totalData", "paging"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserResponseV3"
          }
        },
        "paging": {
          "$ref": "#/definitions/accountcommon.PaginationV3"
        },
        "totalData": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "model.SendRegisterVerificationCodeRequest": {
      "required": ["emailAddress"],
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.SendVerificationCodeRequest": {
      "required": ["LoginID", "LanguageTag"],
      "properties": {
        "Context": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        },
        "LoginID": {
          "type": "string"
        }
      }
    },
    "model.SendVerificationCodeRequestV3": {
      "required": ["emailAddress"],
      "properties": {
        "context": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.SendVerificationLinkRequest": {
      "properties": {
        "languageTag": {
          "type": "string"
        }
      }
    },
    "model.ThirdPartyLoginPlatformCredentialRequest": {
      "required": [
        "AppId",
        "PlatformName",
        "ClientId",
        "RedirectUri",
        "Secret",
        "Environment",
        "OrganizationId",
        "IsActive",
        "GenericOauthFlow",
        "FederationMetadataURL",
        "ACSURL",
        "AWSCognitoRegion",
        "AWSCognitoUserPool",
        "KeyID",
        "TeamID",
        "JWKSEndpoint",
        "Issuer",
        "TokenAuthenticationType",
        "NetflixCertificates",
        "AuthorizationEndpoint",
        "TokenEndpoint",
        "RegisteredDomains",
        "scopes",
        "UserInfoEndpoint",
        "UserInfoHTTPMethod"
      ],
      "properties": {
        "ACSURL": {
          "description": "ACSURL is an endpoint on the service provider where the identity provider will redirect to with its authentication response",
          "type": "string"
        },
        "AWSCognitoRegion": {
          "description": "AWSCognitoRegion is aws region where user pool reside",
          "type": "string"
        },
        "AWSCognitoUserPool": {
          "description": "AWSCognitoUserPool is aws cognito user pool id",
          "type": "string"
        },
        "AllowedClients": {
          "description": "allowed clients that can show this login method",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AppId": {
          "type": "string"
        },
        "AuthorizationEndpoint": {
          "description": "third party authorization endpoint to obtain authorization code",
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "FederationMetadataURL": {
          "description": "FederationMetadataURL is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship",
          "type": "string"
        },
        "GenericOauthFlow": {
          "type": "boolean"
        },
        "IsActive": {
          "type": "boolean"
        },
        "Issuer": {
          "description": "Issuer of 3rd party identity provider. Used for generic oauth flow.",
          "type": "string"
        },
        "JWKSEndpoint": {
          "description": "JWKS endpoint to validate 3rd party user id token. Used for generic oauth flow.",
          "type": "string"
        },
        "KeyID": {
          "description": "apple key id",
          "type": "string"
        },
        "NetflixCertificates": {
          "description": "A json containing credentials for netflix integration. Only for netflix platformId",
          "$ref": "#/definitions/accountcommon.NetflixCertificates"
        },
        "OrganizationId": {
          "type": "string"
        },
        "PlatformName": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "RegisteredDomains": {
          "description": "domains that are allowed to create user and grant roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RegisteredDomain"
          }
        },
        "Secret": {
          "type": "string"
        },
        "TeamID": {
          "description": "apple team id",
          "type": "string"
        },
        "TokenAuthenticationType": {
          "description": "Token authentication type indicating what token will be used to authenticate 3rd party user. Currently support: idToken, code and bearerToken. Used for generic oauth flow.",
          "type": "string"
        },
        "TokenClaimsMapping": {
          "description": "A JSON containing how IAM service retrieve value from id token claims or userInfo endpoint. Used for generic oauth flow. Currently allowed fields list [userIdentity, name, email, avatarUrl]",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TokenEndpoint": {
          "description": "third party token endpoint to obtain token",
          "type": "string"
        },
        "UserInfoEndpoint": {
          "description": "third party user info endpoint to validate 3rd party user profile using third party user token. Used for generic oauth flow.",
          "type": "string"
        },
        "UserInfoHTTPMethod": {
          "description": "http method to call third party user info endpoint to validate 3rd party user profile using third party user token. Used for generic oauth flow.",
          "type": "string"
        },
        "scopes": {
          "description": "scopes for generic OAuth Authorization code flow. Default is [openid, profile, email]",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.ThirdPartyLoginPlatformCredentialResponse": {
      "required": [
        "AppId",
        "ClientId",
        "Namespace",
        "PlatformId",
        "PlatformName",
        "RedirectUri",
        "Secret",
        "Environment",
        "OrganizationId",
        "IsActive",
        "GenericOauthFlow",
        "FederationMetadataURL",
        "ACSURL",
        "AWSCognitoRegion",
        "AWSCognitoUserPool",
        "KeyID",
        "TeamID",
        "JWKSEndpoint",
        "Issuer",
        "TokenAuthenticationType"
      ],
      "properties": {
        "ACSURL": {
          "description": "ACSURL is an endpoint on the service provider where the identity provider will redirect to with its authentication response",
          "type": "string"
        },
        "AWSCognitoRegion": {
          "description": "AWSCognitoRegion is aws region where user pool reside",
          "type": "string"
        },
        "AWSCognitoUserPool": {
          "description": "AWSCognitoUserPool is aws cognito user pool id",
          "type": "string"
        },
        "AllowedClients": {
          "description": "allowed clients that can show this login method",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AppId": {
          "type": "string"
        },
        "AuthorizationEndpoint": {
          "description": "third party authorization endpoint to obtain authorization code",
          "type": "string"
        },
        "ClientId": {
          "type": "string"
        },
        "Environment": {
          "type": "string"
        },
        "FederationMetadataURL": {
          "description": "FederationMetadataURL is an endpoint on the Identity Provider(IdP) to get IdP federation metadata for service provider to build trust relationship",
          "type": "string"
        },
        "GenericOauthFlow": {
          "description": "GenericOauthFlow is a flag that indicate this client is using generic oauth/open id flow or not",
          "type": "boolean",
          "default": false
        },
        "IsActive": {
          "type": "boolean"
        },
        "Issuer": {
          "description": "Issuer of 3rd party identity provider. Used for generic oauth flow.",
          "type": "string"
        },
        "JWKSEndpoint": {
          "description": "JWKS endpoint to validate 3rd party user id token. Used for generic oauth flow.",
          "type": "string"
        },
        "KeyID": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NetflixCertificates": {
          "description": "A json containing Credentials for netflix integration.",
          "$ref": "#/definitions/accountcommon.NetflixCertificates"
        },
        "OrganizationId": {
          "type": "string"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformName": {
          "type": "string"
        },
        "RedirectUri": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        },
        "TeamID": {
          "type": "string"
        },
        "TokenAuthenticationType": {
          "description": "Token authentication type indicating what token will be used to authenticate 3rd party user. Currently support: idToken, code and bearerToken. Used for generic oauth flow.",
          "type": "string"
        },
        "TokenClaimsMapping": {
          "description": "A JSON containing how IAM service retrieve value from id token claims or userInfo endpoint. Used for generic oauth flow.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TokenEndpoint": {
          "description": "third party token endpoint to obtain token",
          "type": "string"
        },
        "UserInfoEndpoint": {
          "description": "third party user info endpoint to validate 3rd party user profile using third party user token. Used for generic oauth flow.",
          "type": "string"
        },
        "UserInfoHTTPMethod": {
          "description": "http method to call third party user info endpoint to validate 3rd party user profile using third party user token. Used for generic oauth flow.",
          "type": "string"
        },
        "registeredDomains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.RegisteredDomain"
          }
        },
        "scopes": {
          "description": "scopes for generic OAuth Authorization code flow",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.TokenThirdPartyLinkStatusResponse": {
      "required": ["linked"],
      "properties": {
        "linked": {
          "type": "boolean"
        }
      }
    },
    "model.UnlinkUserPlatformRequest": {
      "properties": {
        "platformNamespace": {
          "type": "string"
        }
      }
    },
    "model.UpdatePermissionScheduleRequest": {
      "properties": {
        "SchedAction": {
          "type": "integer",
          "format": "int32"
        },
        "SchedCron": {
          "type": "string"
        },
        "SchedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.UpdateUserDeletionStatusRequest": {
      "required": ["enabled", "deletionDate"],
      "properties": {
        "deletionDate": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "model.UpdateUserStatusRequest": {
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountRequest": {
      "required": ["LoginID", "Password"],
      "properties": {
        "LoginID": {
          "description": "new email address or phone number",
          "type": "string"
        },
        "Password": {
          "description": "new password",
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountV3Request": {
      "required": ["emailAddress", "password"],
      "properties": {
        "emailAddress": {
          "description": "new email address",
          "type": "string"
        },
        "password": {
          "description": "new password",
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountWithVerificationCodeRequest": {
      "required": ["loginId", "Password", "Code"],
      "properties": {
        "Code": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "loginId": {
          "type": "string"
        }
      }
    },
    "model.UpgradeHeadlessAccountWithVerificationCodeRequestV3": {
      "required": ["emailAddress", "password", "code"],
      "properties": {
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "model.UserActiveBanResponse": {
      "required": ["BanId", "Ban", "EndDate"],
      "properties": {
        "Ban": {
          "type": "string"
        },
        "BanId": {
          "type": "string"
        },
        "EndDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "model.UserActiveBanResponseV3": {
      "required": ["ban", "banId", "endDate"],
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "model.UserBanResponse": {
      "required": ["Ban", "BanId", "BannedBy", "Comment", "CreatedAt", "Enabled", "EndDate", "Namespace", "Reason", "UserId"],
      "properties": {
        "Ban": {
          "type": "string"
        },
        "BanId": {
          "type": "string"
        },
        "BannedBy": {
          "$ref": "#/definitions/.BannedBy"
        },
        "Comment": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DisabledDate": {
          "type": "string",
          "format": "date-time"
        },
        "Enabled": {
          "type": "boolean"
        },
        "EndDate": {
          "type": "string",
          "format": "date-time"
        },
        "Namespace": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.UserBanResponseV3": {
      "required": [
        "ban",
        "banId",
        "bannedBy",
        "comment",
        "createdAt",
        "disabledDate",
        "enabled",
        "endDate",
        "namespace",
        "reason",
        "userId"
      ],
      "properties": {
        "ban": {
          "type": "string"
        },
        "banId": {
          "type": "string"
        },
        "bannedBy": {
          "$ref": "#/definitions/accountcommon.BannedByV3"
        },
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "disabledDate": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.UserBaseInfo": {
      "required": ["userId", "displayName", "avatarUrl", "platformUserIds"],
      "properties": {
        "avatarUrl": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "platformUserIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "model.UserCreateFromInvitationRequestV3": {
      "required": ["reachMinimumAge", "authType", "displayName", "password", "country"],
      "properties": {
        "acceptedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          }
        },
        "authType": {
          "type": "string",
          "default": "EMAILPASSWD"
        },
        "country": {
          "type": "string",
          "default": "ID"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean"
        }
      }
    },
    "model.UserCreateFromInvitationRequestV4": {
      "required": ["reachMinimumAge", "authType", "displayName", "username", "password", "country"],
      "properties": {
        "acceptedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          }
        },
        "authType": {
          "type": "string",
          "default": "EMAILPASSWD"
        },
        "country": {
          "type": "string",
          "default": "ID"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "model.UserCreateRequest": {
      "required": ["AuthType", "DisplayName", "LoginId", "Password", "Country"],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "LoginId": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "PasswordMD5Sum": {
          "type": "string"
        }
      }
    },
    "model.UserCreateRequestV3": {
      "required": ["reachMinimumAge", "authType", "displayName", "emailAddress", "password", "country", "code"],
      "properties": {
        "PasswordMD5Sum": {
          "type": "string"
        },
        "acceptedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legal.AcceptedPoliciesRequest"
          }
        },
        "authType": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "reachMinimumAge": {
          "type": "boolean"
        }
      }
    },
    "model.UserCreateResponse": {
      "required": ["Namespace", "UserId", "AuthType", "DisplayName", "LoginId", "Country", "DateOfBirth"],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "DisplayName": {
          "type": "string"
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      }
    },
    "model.UserCreateResponseV3": {
      "required": ["namespace", "userId", "authType", "displayName", "emailAddress", "country", "dateOfBirth"],
      "properties": {
        "authType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.UserDeletionStatusResponse": {
      "required": ["deletionStatus"],
      "properties": {
        "deletionStatus": {
          "type": "boolean"
        }
      }
    },
    "model.UserIDsRequest": {
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.UserInfoResponse": {
      "required": ["userId", "namespace", "displayName", "emailAddress"],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.UserInformation": {
      "required": ["DisplayName", "EmailAddresses", "PhoneNumber", "Username", "LinkedPlatformAccounts", "Country"],
      "properties": {
        "Country": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LinkedPlatformAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.PlatformUserInformation"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.UserInvitationV3": {
      "required": ["email", "roles", "expiredAt"],
      "properties": {
        "email": {
          "type": "string"
        },
        "expiredAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceDisplayName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        }
      }
    },
    "model.UserLoginHistoryResponse": {
      "required": ["Country", "State", "City", "DeviceId", "ApplicationName", "Timestamp", "deviceName"],
      "properties": {
        "ApplicationName": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "Timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "deviceName": {
          "type": "string"
        }
      }
    },
    "model.UserPasswordUpdateRequest": {
      "required": ["OldPassword", "NewPassword", "LanguageTag"],
      "properties": {
        "LanguageTag": {
          "type": "string"
        },
        "NewPassword": {
          "type": "string"
        },
        "OldPassword": {
          "type": "string"
        }
      }
    },
    "model.UserPasswordUpdateV3Request": {
      "required": ["oldPassword", "newPassword", "languageTag"],
      "properties": {
        "languageTag": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "model.UserPermissionsResponseV3": {
      "required": ["action", "resource"],
      "properties": {
        "action": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "type": "string"
        },
        "schedAction": {
          "type": "integer",
          "format": "int32"
        },
        "schedCron": {
          "type": "string"
        },
        "schedRange": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.UserResponse": {
      "required": [
        "Namespace",
        "UserId",
        "DisplayName",
        "AuthType",
        "LoginId",
        "OldEmailAddress",
        "CreatedAt",
        "Roles",
        "NamespaceRoles",
        "Permissions",
        "PhoneVerified",
        "EmailVerified",
        "Enabled",
        "DeletionStatus",
        "LastEnabledChangedTime",
        "Country",
        "Bans",
        "DateOfBirth",
        "LastDateOfBirthChangedTime"
      ],
      "properties": {
        "AuthType": {
          "type": "string"
        },
        "AvatarUrl": {
          "type": "string"
        },
        "Bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponse"
          }
        },
        "Country": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "DeletionStatus": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "EmailVerified": {
          "type": "boolean"
        },
        "Enabled": {
          "type": "boolean"
        },
        "LastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "LastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "LoginId": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NamespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "NewEmailAddress": {
          "type": "string"
        },
        "OldEmailAddress": {
          "type": "string"
        },
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "PhoneNumber": {
          "type": "string"
        },
        "PhoneVerified": {
          "type": "boolean"
        },
        "PlatformId": {
          "type": "string"
        },
        "PlatformUserId": {
          "type": "string"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "XUID": {
          "type": "string"
        }
      }
    },
    "model.UserResponseV3": {
      "required": [
        "authType",
        "bans",
        "country",
        "createdAt",
        "displayName",
        "deletionStatus",
        "emailVerified",
        "enabled",
        "lastDateOfBirthChangedTime",
        "lastEnabledChangedTime",
        "emailAddress",
        "namespace",
        "namespaceRoles",
        "permissions",
        "phoneVerified",
        "roles",
        "userId"
      ],
      "properties": {
        "authType": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserActiveBanResponseV3"
          }
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "deletionDate": {
          "type": "string"
        },
        "deletionStatus": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastDateOfBirthChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastEnabledChangedTime": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "newEmailAddress": {
          "type": "string"
        },
        "oldEmailAddress": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.UserPermissionsResponseV3"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "platformAvatarUrl": {
          "type": "string"
        },
        "platformDisplayName": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "platformUserId": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.UserRolesV4Response": {
      "required": ["roleName", "roleId", "assignedNamespaces"],
      "properties": {
        "assignedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "model.UserUpdateRequest": {
      "properties": {
        "Country": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        }
      }
    },
    "model.UserUpdateRequestV3": {
      "properties": {
        "avatarUrl": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "model.UserVerificationRequest": {
      "required": ["validateOnly", "Code", "ContactType", "LanguageTag"],
      "properties": {
        "Code": {
          "type": "string"
        },
        "ContactType": {
          "type": "string"
        },
        "LanguageTag": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "model.UserVerificationRequestV3": {
      "required": ["code", "contactType"],
      "properties": {
        "code": {
          "type": "string"
        },
        "contactType": {
          "type": "string"
        },
        "languageTag": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "model.ValidUserIDResponseV4": {
      "required": ["userId", "exists"],
      "properties": {
        "exists": {
          "description": "indicate if user is exist or not",
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "model.ValidationConfig": {
      "required": [
        "blockedWord",
        "regex",
        "minLength",
        "maxLength",
        "maxRepeatingAlphaNum",
        "maxRepeatingSpecialCharacter",
        "minCharType",
        "letterCase",
        "specialCharacterLocation",
        "allowLetter",
        "allowDigit",
        "allowSpace",
        "allowUnicode",
        "allowAllSpecialCharacters",
        "isCustomRegex",
        "specialCharacters"
      ],
      "properties": {
        "allowAllSpecialCharacters": {
          "type": "boolean"
        },
        "allowDigit": {
          "type": "boolean"
        },
        "allowLetter": {
          "type": "boolean"
        },
        "allowSpace": {
          "type": "boolean"
        },
        "allowUnicode": {
          "type": "boolean"
        },
        "blockedWord": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isCustomRegex": {
          "type": "boolean"
        },
        "letterCase": {
          "type": "string"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingAlphaNum": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingSpecialCharacter": {
          "type": "integer",
          "format": "int32"
        },
        "minCharType": {
          "type": "integer",
          "format": "int32"
        },
        "minLength": {
          "type": "integer",
          "format": "int32"
        },
        "regex": {
          "type": "string"
        },
        "specialCharacterLocation": {
          "type": "string"
        },
        "specialCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.ValidationDetail": {
      "required": [
        "regex",
        "minCharType",
        "specialCharacterLocation",
        "maxRepeatingAlphaNum",
        "letterCase",
        "maxRepeatingSpecialCharacter",
        "isCustomRegex",
        "maxLength",
        "allowLetter",
        "allowDigit",
        "allowSpace",
        "allowUnicode",
        "allowAllSpecialCharacters",
        "blockedWord",
        "minLength",
        "specialCharacters",
        "description"
      ],
      "properties": {
        "allowAllSpecialCharacters": {
          "type": "boolean"
        },
        "allowDigit": {
          "type": "boolean"
        },
        "allowLetter": {
          "type": "boolean"
        },
        "allowSpace": {
          "type": "boolean"
        },
        "allowUnicode": {
          "type": "boolean"
        },
        "blockedWord": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.InputValidationDescription"
          }
        },
        "isCustomRegex": {
          "type": "boolean"
        },
        "letterCase": {
          "type": "string"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingAlphaNum": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingSpecialCharacter": {
          "type": "integer",
          "format": "int32"
        },
        "minCharType": {
          "type": "integer",
          "format": "int32"
        },
        "minLength": {
          "type": "integer",
          "format": "int32"
        },
        "regex": {
          "type": "string"
        },
        "specialCharacterLocation": {
          "type": "string"
        },
        "specialCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.ValidationDetailPublic": {
      "required": [
        "maxRepeatingAlphaNum",
        "letterCase",
        "specialCharacterLocation",
        "maxRepeatingSpecialCharacter",
        "isCustomRegex",
        "allowSpace",
        "allowUnicode",
        "allowAllSpecialCharacters",
        "blockedWord",
        "minLength",
        "maxLength",
        "allowLetter",
        "allowDigit",
        "specialCharacters",
        "regex",
        "minCharType",
        "description"
      ],
      "properties": {
        "allowAllSpecialCharacters": {
          "type": "boolean"
        },
        "allowDigit": {
          "type": "boolean"
        },
        "allowLetter": {
          "type": "boolean"
        },
        "allowSpace": {
          "type": "boolean"
        },
        "allowUnicode": {
          "type": "boolean"
        },
        "blockedWord": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "$ref": "#/definitions/accountcommon.InputValidationDescription"
        },
        "isCustomRegex": {
          "type": "boolean"
        },
        "letterCase": {
          "type": "string"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingAlphaNum": {
          "type": "integer",
          "format": "int32"
        },
        "maxRepeatingSpecialCharacter": {
          "type": "integer",
          "format": "int32"
        },
        "minCharType": {
          "type": "integer",
          "format": "int32"
        },
        "minLength": {
          "type": "integer",
          "format": "int32"
        },
        "regex": {
          "type": "string"
        },
        "specialCharacterLocation": {
          "type": "string"
        },
        "specialCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "model.VerificationCodeResponse": {
      "required": ["accountRegistration", "accountUpgrade", "passwordReset", "updateEmail"],
      "properties": {
        "accountRegistration": {
          "type": "string"
        },
        "accountUpgrade": {
          "type": "string"
        },
        "passwordReset": {
          "type": "string"
        },
        "updateEmail": {
          "type": "string"
        }
      }
    },
    "model.VerifyRegistrationCode": {
      "required": ["code", "emailAddress"],
      "properties": {
        "code": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      }
    },
    "model.WebLinkingResponse": {
      "required": ["third_party_url"],
      "properties": {
        "third_party_url": {
          "type": "string"
        }
      }
    },
    "model.userUnbanCreateRequestV3": {
      "required": ["userId", "banId"],
      "properties": {
        "banId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "oauthapi.RevocationList": {
      "required": ["revoked_tokens", "revoked_users"],
      "properties": {
        "revoked_tokens": {
          "$ref": "#/definitions/bloom.FilterJSON"
        },
        "revoked_users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/oauthcommon.UserRevocationListRecord"
          }
        }
      }
    },
    "oauthcommon.JWKKey": {
      "required": ["kty"],
      "properties": {
        "alg": {
          "type": "string"
        },
        "e": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "kty": {
          "type": "string"
        },
        "n": {
          "type": "string"
        },
        "use": {
          "type": "string"
        }
      }
    },
    "oauthcommon.JWKSet": {
      "required": ["keys"],
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/oauthcommon.JWKKey"
          }
        }
      }
    },
    "oauthcommon.UserRevocationListRecord": {
      "required": ["id", "revoked_at"],
      "properties": {
        "id": {
          "type": "string"
        },
        "revoked_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "oauthmodel.CountryLocationResponse": {
      "required": ["countryCode", "countryName", "state", "city"],
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "oauthmodel.ErrorResponse": {
      "required": ["error"],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "default_factor": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "error_uri": {
          "type": "string"
        },
        "factors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "linkingToken": {
          "type": "string"
        },
        "messageVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mfa_token": {
          "type": "string"
        },
        "platformId": {
          "type": "string"
        },
        "userBan": {
          "$ref": "#/definitions/oauthmodel.UserBan"
        }
      }
    },
    "oauthmodel.GameTokenCodeResponse": {
      "required": ["code"],
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "oauthmodel.OneTimeLinkingCodeResponse": {
      "required": ["oneTimeLinkCode", "oneTimeLinkUrl", "exp"],
      "properties": {
        "exp": {
          "description": "code will be expired in seconds",
          "type": "integer",
          "format": "int64"
        },
        "oneTimeLinkCode": {
          "type": "string"
        },
        "oneTimeLinkUrl": {
          "type": "string"
        }
      }
    },
    "oauthmodel.OneTimeLinkingCodeValidationResponse": {
      "required": ["valid", "expired"],
      "properties": {
        "expired": {
          "type": "boolean"
        },
        "valid": {
          "type": "boolean"
        }
      }
    },
    "oauthmodel.TokenIntrospectResponse": {
      "required": ["active"],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "aud": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "exp": {
          "type": "integer",
          "format": "int64"
        },
        "iat": {
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenResponse": {
      "required": [
        "access_token",
        "refresh_token",
        "expires_in",
        "token_type",
        "roles",
        "permissions",
        "bans",
        "user_id",
        "display_name",
        "namespace",
        "namespace_roles"
      ],
      "properties": {
        "access_token": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBanV3"
          }
        },
        "device_id": {
          "description": "will get from xbox dpi if it exists",
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32"
        },
        "is_comply": {
          "type": "boolean"
        },
        "jflgs": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.Permission"
          }
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenResponseV3": {
      "required": ["access_token", "expires_in", "token_type", "roles", "permissions", "bans", "namespace", "namespace_roles", "scope"],
      "properties": {
        "access_token": {
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBanV3"
          }
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32"
        },
        "is_comply": {
          "type": "boolean"
        },
        "jflgs": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_expires_in": {
          "description": "present if it is user token",
          "type": "integer",
          "format": "int32"
        },
        "refresh_token": {
          "description": "present if it is user token",
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "description": "present if it is user token",
          "type": "string"
        },
        "xuid": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenThirdPartyResponse": {
      "required": ["platform_token"],
      "properties": {
        "platform_token": {
          "type": "string"
        },
        "sand_box_id": {
          "type": "string"
        }
      }
    },
    "oauthmodel.TokenWithDeviceCookieResponseV3": {
      "required": ["token_type", "bans", "namespace", "namespace_roles", "access_token", "scope", "permissions", "roles", "expires_in"],
      "properties": {
        "access_token": {
          "type": "string"
        },
        "auth_trust_id": {
          "description": "Authentication Trust Id for device cookie validation. Only exist when login using grant_type=password and no existing Auth-Trust-Id given from request header",
          "type": "string"
        },
        "bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.JWTBanV3"
          }
        },
        "display_name": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32"
        },
        "is_comply": {
          "type": "boolean"
        },
        "jflgs": {
          "type": "integer",
          "format": "int32"
        },
        "namespace": {
          "type": "string"
        },
        "namespace_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.NamespaceRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountcommon.PermissionV3"
          }
        },
        "platform_id": {
          "type": "string"
        },
        "platform_user_id": {
          "type": "string"
        },
        "refresh_expires_in": {
          "description": "present if it is user token",
          "type": "integer",
          "format": "int32"
        },
        "refresh_token": {
          "description": "present if it is user token",
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "user_id": {
          "description": "present if it is user token",
          "type": "string"
        },
        "xuid": {
          "type": "string"
        }
      }
    },
    "oauthmodel.UserBan": {
      "required": ["reason", "endDate", "comment"],
      "properties": {
        "comment": {
          "type": "string"
        },
        "endDate": {
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "rest.ErrorResponse": {
      "required": ["errorCode", "errorMessage"],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "rest.ErrorResponseWithConflictedUserPlatformAccounts": {
      "required": ["errorCode", "errorMessage"],
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        },
        "messageVariables": {
          "$ref": "#/definitions/accountcommon.ConflictedUserPlatformAccounts"
        }
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "authorization": []
    },
    {
      "basic": []
    }
  ]
}
