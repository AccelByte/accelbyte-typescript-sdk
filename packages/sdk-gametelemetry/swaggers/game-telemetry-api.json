{
  "openapi": "3.0.2",
  "info": {
    "title": "Analytics Game Telemetry",
    "description": "This is analytics game telemetry to standardize avengers and justice telemetry",
    "version": "1.15.0"
  },
  "paths": {
    "/game-telemetry/v1/protected/events": {
      "post": {
        "tags": ["telemetry"],
        "summary": "Protected Save Events",
        "description": "This endpoint requires valid JWT token.\nThis endpoint does not require permission.\n\nThis endpoint send events into designated streaming pipeline and each request can contain single or multiple events.\n<p> Format of the event:\n\n- **EventNamespace (required)**: Namespace of the relevant game with domain name format.\n                <p> Only accept input with valid characters. Allowed characters: <b>Aa-Zz0-9_.-</b> <p>\n                <p> It is encouraged to use alphanumeric only characters. <b>_.-</b> will be deprecated soon <p>\n                <p> Example: accelbyte </p>\n\n- **EventName (required)**: Name of the event.\n                <p> Only accept input with valid characters. Allowed characters: <b>Aa-Zz0-9_.-</b> <p>\n                <p> It is encouraged to use alphanumeric only characters. <b>_.-</b> will be deprecated soon <p>\n                <p> Example: player_killed, mission_accomplished </p>\n\n- **Payload (required)**: An arbitrary json with the payload of the said event.\n                <p> Default maximum payload size is <b>1MB</b> <p>",
        "operationId": "protected_save_events_game_telemetry_v1_protected_events_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "anyOf": [
                  { "$ref": "#/components/schemas/TelemetryBody" },
                  { "type": "array", "items": { "$ref": "#/components/schemas/TelemetryBody" } }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "HTTPBearer": [] }, { "APIKeyCookie": [] }]
      }
    },
    "/game-telemetry/v1/protected/steamIds/{steamId}/playtime": {
      "get": {
        "tags": ["telemetry"],
        "summary": "Protected Get Playtime",
        "description": "This endpoint requires valid JWT token.\nThis endpoint does not require permission.\n\nThis endpoint retrieves player's total playtime in Steam for a specific game (AppId) and store them in service's cache.\n\nPlayers' Steam account must be set into public to enable the service fetch their total playtime data.",
        "operationId": "protected_get_playtime_game_telemetry_v1_protected_steamIds__steamId__playtime_get",
        "parameters": [{ "required": true, "schema": { "title": "Steamid", "type": "string" }, "name": "steamId", "in": "path" }],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Protected Get Playtime Game Telemetry V1 Protected Steamids  Steamid  Playtime Get",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "HTTPBearer": [] }, { "APIKeyCookie": [] }]
      }
    },
    "/game-telemetry/v1/protected/steamIds/{steamId}/playtime/{playtime}": {
      "put": {
        "tags": ["telemetry"],
        "summary": "Protected Update Playtime",
        "description": "This endpoint requires valid JWT token.\nThis endpoint does not require permission.\n\nThis endpoint update player's total playtime in a specific game (AppId) from service's cache.",
        "operationId": "protected_update_playtime_game_telemetry_v1_protected_steamIds__steamId__playtime__playtime__put",
        "parameters": [
          { "required": true, "schema": { "title": "Steamid", "type": "string" }, "name": "steamId", "in": "path" },
          { "required": true, "schema": { "title": "Playtime", "type": "string" }, "name": "playtime", "in": "path" }
        ],
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "HTTPBearer": [] }, { "APIKeyCookie": [] }]
      }
    },
    "/game-telemetry/v1/admin/namespaces/{namespace}/events": {
      "get": {
        "tags": ["telemetry"],
        "summary": "Get Events",
        "operationId": "get_events_game_telemetry_v1_admin_namespaces__namespace__events_get",
        "parameters": [
          { "required": true, "schema": { "title": "Namespace", "type": "string" }, "name": "namespace", "in": "path" },
          {
            "description": "Start time of data to be queried. Default: Current time in UTC minus 1 day.",
            "required": false,
            "schema": {
              "title": "Starttime",
              "type": "string",
              "description": "Start time of data to be queried. Default: Current time in UTC minus 1 day.",
              "default": "2023-03-10T10:16:09Z"
            },
            "name": "startTime",
            "in": "query"
          },
          {
            "description": "End time of data to be queried. Default: Current time in UTC.",
            "required": false,
            "schema": {
              "title": "Endtime",
              "type": "string",
              "description": "End time of data to be queried. Default: Current time in UTC.",
              "default": "2023-03-11T10:16:09Z"
            },
            "name": "endTime",
            "in": "query"
          },
          {
            "description": "Offset of response data number.",
            "required": false,
            "schema": { "title": "Offset", "type": "integer", "description": "Offset of response data number.", "default": 0 },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Limit of response data number.",
            "required": false,
            "schema": { "title": "Limit", "type": "integer", "description": "Limit of response data number.", "default": 100 },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Game telemetry EventId.",
            "required": false,
            "schema": { "title": "Eventid", "type": "string", "description": "Game telemetry EventId." },
            "name": "eventId",
            "in": "query"
          },
          {
            "description": "Game telemetry EventName.",
            "required": false,
            "schema": { "title": "Eventname", "type": "string", "description": "Game telemetry EventName." },
            "name": "eventName",
            "in": "query"
          },
          {
            "description": "Game telemetry payload to be query. Format: [foo].[bar]:[keyword]. e.g: player.username:tom*",
            "required": false,
            "schema": {
              "title": "Eventpayload",
              "type": "string",
              "description": "Game telemetry payload to be query. Format: [foo].[bar]:[keyword]. e.g: player.username:tom*"
            },
            "name": "eventPayload",
            "in": "query"
          }
        ],
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "HTTPBearer": [] }, { "APIKeyCookie": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": { "detail": { "title": "Detail", "type": "array", "items": { "$ref": "#/components/schemas/ValidationError" } } }
      },
      "TelemetryBody": {
        "title": "TelemetryBody",
        "required": ["EventNamespace", "EventName", "Payload"],
        "type": "object",
        "properties": {
          "EventNamespace": { "title": "Eventnamespace", "type": "string" },
          "EventName": { "title": "Eventname", "type": "string" },
          "Payload": { "title": "Payload", "type": "object" },
          "EventTimestamp": {
            "title": "Eventtimestamp",
            "type": "string",
            "description": "Adding this `EventTimestamp` field in the request body does not override the `EventTimestamp` generated by server which is saved in the data lake. To add specific timestamp of your telemetry data, please add a new subfield in the `payload` field",
            "format": "date-time",
            "deprecated": true
          },
          "EventId": {
            "title": "Eventid",
            "type": "string",
            "description": "Adding this `EventID` field in the request body does not override the `EventID` generated by server which is saved in the data lake",
            "deprecated": true
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": { "title": "Location", "type": "array", "items": { "type": "string" } },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        }
      }
    },
    "securitySchemes": {
      "HTTPBearer": { "type": "http", "scheme": "bearer" },
      "APIKeyCookie": { "type": "apiKey", "in": "cookie", "name": "access_token" }
    }
  }
}
